name: HumanEval_93_encode
language: js
results:
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 64;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0014\\u0005\\u0013\\u0014'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpt4a2deng.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt4a2deng.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\\
    x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let messageArray = message.split('');\n    let newMessage = '';\n    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndex2 = 0;\n    let vowelsIndex3 = 0;\n\
    \    let vowelsIndex4 = 0;\n    let vowelsIndex5 = 0;\n    let vowelsIndex6 =\
    \ 0;\n    let vowelsIndex7 = 0;\n    let vowelsIndex8 = 0;\n    let vowelsIndex9\
    \ = 0;\n    let vowelsIndex10 = 0;\n    let vowelsIndex11 = 0;\n    let vowelsIndex12\
    \ = 0;\n    let vowelsIndex13 = 0;\n    let vowelsIndex14 = 0;\n    let vowelsIndex15\
    \ = 0;\n    let vowelsIndex16 = 0;\n    let vowelsIndex17 = 0;\n    let vowelsIndex18\
    \ = 0;\n    let vowelsIndex19 = 0;\n    let vowelsIndex20 = 0;\n    let vowelsIndex21\
    \ = 0;\n    let vowelsIndex22 = 0;\n    let vowelsIndex23 = 0;\n    let vowelsIndex24\
    \ = 0;\n    let vowelsIndex25 = 0;\n    let vowelsIndex26 = 0;\n    let vowelsIndex27\
    \ = 0;\n    let vowelsIndex28 = 0;\n    let vowelsIndex29 = 0;\n    let vowelsIndex30\
    \ = 0;\n    let vowelsIndex31 = 0;\n    let vowelsIndex32 = 0;\n    let vowelsIndex33\
    \ = 0;\n    let vowelsIndex34 = 0;\n    let vowelsIndex35 = 0;\n    let vowelsIndex36\
    \ = 0;\n    let vowelsIndex37 = 0;\n    let vowelsIndex38 = 0;\n    let vowelsIndex39\
    \ = 0;\n    let vowelsIndex40 = 0;\n    let vowelsIndex41 = 0;\n    let vowelsIndex42\
    \ = 0;\n    let vowelsIndex43 = 0;\n    let vowelsIndex44 = 0;\n    let vowelsIndex45\
    \ = 0;\n    let vowelsIndex46 = 0;\n    let vowelsIndex47 = 0;\n    let vowelsIndex48\
    \ = 0;\n    let vowelsIndex49 = 0;\n    let vowelsIndex50 = 0;\n    let vowelsIndex51\
    \ = 0;\n    let vowelsIndex52 = 0;\n    let vowelsIndex53 = 0;\n    let vowelsIndex54\
    \ = 0;\n    let vowelsIndex55 = 0;\n    let vowelsIndex56 = 0;\n    let vowelsIndex57\
    \ = 0;\n    let vowelsIndex58 = 0;\n    let vowelsIndex59 = 0;\n    let vowelsIndex60\
    \ = 0;\n    let vowelsIndex61 = 0;\n    let vowelsIndex62 = 0;\n    let vowelsIndex63\
    \ = 0;\n    let vowelsIndex64 = 0;\n    let vowelsIndex65 = 0;\n    let vowelsIndex66\
    \ = 0;\n    let vowelsIndex67 = 0;\n    let vowelsIndex68 = 0;\n    let vowelsIndex69\
    \ = 0;\n    let vowel\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdu2relzw.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message[i];\n        var index = alphabet.indexOf(letter);\n      \
    \  if(index != -1){\n            var nextLetter = alphabet[index+1];\n       \
    \     newMessage += nextLetter;\n        }\n        newMessage += letter;\n  \
    \  }\n    for(var i=0; i<message.length; i++){\n        var letter = message[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextLetter = alphabet[index+2];\n            newMessage += nextLetter;\n\
    \        }\n        newMessage += letter;\n    }\n    return newMessage;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `encode('This\
    \ is a message')`\n<|/ c |>\n<| c |>\nI added a test case to my answer. Can you\
    \ try it out?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `encode('This is\
    \ a message')`\n<|/ c |>\n<| c |>\nI added a test case to my answer. Can you try\
    \ it out?\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `encode('This is a\
    \ message')`\n<|/ c |>\n<| a dscore=0 |>\nI believe this should work:\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbmtwcc55.js:35\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter.toUpperCase() === letter){\n      newMessage = newMessage.replace(letter,\
    \ nextLetter.toUpperCase());\n    }\n  }\n  return newMessage;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'EST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmprwjp90d0.js:27:10)\n    at Object.<anonymous> (/tmp/tmprwjp90d0.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'EST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i + 1);\n    if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n    }\n    if(letter === 'A' || letter ===\
    \ 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n      newMessage\
    \ += letter;\n    }\n    if(letter === 'a' || letter === 'e' || letter === 'i'\
    \ || letter === 'o' || letter === 'u'){\n      newMessage += letter;\n    }\n\
    \    if(letter === 'A' || letter === 'E' || letter === 'I' || letter === 'O' ||\
    \ letter === 'U'){\n      newMessage += letter;\n    }\n    if(letter === 'a'\
    \ || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'){\n\
    \      newMessage += letter;\n    }\n    if(letter === 'A' || letter === 'E' ||\
    \ letter === 'I' || letter === 'O' || letter === 'U'){\n      newMessage += letter;\n\
    \    }\n    if(letter === 'a' || letter === 'e' || letter === 'i' || letter ===\
    \ 'o' || letter === 'u'){\n      newMessage += letter;\n    }\n    if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter;\n    }\n    if(letter === 'a' || letter === 'e' ||\
    \ letter === 'i' || letter === 'o' || letter === 'u'){\n      newMessage += letter;\n\
    \    }\n    if(letter === 'A' || letter === 'E' || letter === 'I' || letter ===\
    \ 'O' || letter === 'U'){\n      newMessage += letter;\n    }\n    if(letter ===\
    \ 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'){\n\
    \      newMessage += letter;\n    }\n    if(letter === 'A' || letter === 'E' ||\
    \ letter === 'I' || letter === 'O' || letter === 'U'){\n      newMessage += letter;\n\
    \    }\n    if(letter === 'a' || letter === 'e' || letter === 'i' || letter ===\
    \ 'o' || letter === 'u'){\n      newMessage += letter;\n    }\n    if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter;\n    }\n    if(letter === 'a' || letter === 'e' ||\
    \ letter === 'i' || letter === 'o' || letter === 'u'){\n      newMessage += letter;\n\
    \    }\n    if(letter === '\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprhluzkqn.js:61\n    if(letter === '\n                  ^\n\nSyntaxError:\
    \ Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        if(letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u'){\n            newLetter\
    \ = nextLetter;\n        }\n        newMessage += newLetter;\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpp1y_s_wc.js:30:10)\n    at Object.<anonymous> (/tmp/tmpp1y_s_wc.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        if(letterIndex === -1){\n            letterIndex = alphabet.indexOf(letter.toUpperCase());\n\
    \        }\n        newMessage += alphabet[letterIndex + 2];\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo2umd53n.js:15\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpo2umd53n.js:15:27)\n    at test (/tmp/tmpo2umd53n.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpo2umd53n.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let encodedLetter = letter;\n    for(let j\
    \ = 0; j < letter.length; j++){\n      if(letter.toUpperCase() === letter){\n\
    \        encodedLetter = letter.toUpperCase().charCodeAt(0) - 64;\n      }\n \
    \     if(letter.toLowerCase() === letter){\n        encodedLetter = letter.toLowerCase().charCodeAt(0)\
    \ - 96;\n      }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'2051920'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmp3uon545h.js:34:10)\n    at Object.<anonymous> (/tmp/tmp3uon545h.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '2051920',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        let letterIndex = letters.indexOf(newMessage.charAt(i));\n  \
    \      if(letterIndex > -1){\n            let vowelIndex = vowels.indexOf(newMessage.charAt(i));\n\
    \            if(vowelIndex > -1){\n                let vowelPosition = vowelIndex\
    \ - 2;\n                let letterPosition = letterIndex + 2;\n              \
    \  newMessage = newMessage.split(\"\").map(letter => letters[letterPosition]).join(\"\
    \") + letters[vowelPosition];\n            }\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp8bzid_ue.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8bzid_ue.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var vowels =\
    \ 'aeiou'.split('');\n    var newMessage = '';\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        if(index == -1){\n            throw 'Invalid letter';\n        }\n  \
    \      var nextVowel = vowels[index + 1];\n        newMessage += alphabet.charAt(index)\
    \ + nextVowel;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "\n/tmp/tmpra1pppd5.js:19\n            throw 'Invalid letter';\n       \
    \     ^\nInvalid letter\n(Use `node --trace-uncaught ...` to show where the exception\
    \ was thrown)\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ newMessage = '';\n  for (var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n    if (index\
    \ != -1){\n      var nextVowel = alphabet.charAt(index+1);\n      var nextIndex\
    \ = alphabet.indexOf(nextVowel);\n      if (nextIndex != -1){\n        newMessage\
    \ += alphabet.charAt(index) + nextVowel;\n      }\n      else{\n        newMessage\
    \ += alphabet.charAt(index);\n      }\n    }\n    else{\n      newMessage += letter;\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp6y5e2iwl.js:40:10)\n    at Object.<anonymous> (/tmp/tmp6y5e2iwl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65\
    \ + letter.charCodeAt(1) - 65;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp7ofmcart.js:25:10)\n    at Object.<anonymous> (/tmp/tmp7ofmcart.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = 'aeiou';\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n  var\
    \ messageArray = message.split('');\n  var newMessage = '';\n  for(var i = 0;\
    \ i < messageArray.length; i++){\n    var letter = messageArray[i];\n    var index\
    \ = letter.indexOf(vowels);\n    if(index != -1){\n      newMessage += letter.substr(0,\
    \ index) + letters[index + 1];\n    }\n    else{\n      newMessage += letter;\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp4wmqnkuy.js:34:10)\n    at Object.<anonymous> (/tmp/tmp4wmqnkuy.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message[i];\n    let newLetter = letter;\n    for(let j = 0; j\
    \ < letter.length; j++){\n      if(j === 0){\n        newLetter = letter.charAt(j);\n\
    \      }\n      else if(letter.charAt(j) === 'A'){\n        newLetter = letter.charAt(j\
    \ - 2);\n      }\n      else if(letter.charAt(j) === 'E'){\n        newLetter\
    \ = letter.charAt(j - 1);\n      }\n      else if(letter.charAt(j) === 'I'){\n\
    \        newLetter = letter.charAt(j + 1);\n      }\n      else if(letter.charAt(j)\
    \ === 'O'){\n        newLetter = letter.charAt(j + 2);\n      }\n      else if(letter.charAt(j)\
    \ === 'U'){\n        newLetter = letter.charAt(j + 3);\n      }\n      else if(letter.charAt(j)\
    \ === 'Y'){\n        newLetter = letter.charAt(j + 4);\n      }\n      else if(letter.charAt(j)\
    \ === 'a' || letter.charAt(j) === 'e' || \n        letter.charAt(j) === 'i' ||\
    \ letter.charAt(j) === 'o' || \n        letter.charAt(j) === 'u' || letter.charAt(j)\
    \ === 'y'){\n        newLetter = letter.charAt(j);\n      }\n      else{\n   \
    \     newLetter = letter.charAt(j);\n      }\n    }\n    newMessage = newMessage.replace(letter,\
    \ newLetter);\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp0hoxjwa8.js:57:10)\n    at Object.<anonymous> (/tmp/tmp0hoxjwa8.js:64:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextIndex = index\
    \ + 1;\n        var nextLetter = alphabet[nextIndex];\n        if(vowels.indexOf(letter)\
    \ > -1){\n            newMessage += nextLetter;\n        }\n        else{\n  \
    \          newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    </code>\n<|/ a tags=javascript,string |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11545604)\n\
    <|/ c |>\n<| c |>\nI added an explanation as to why this works.\n<|/ c |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11545604)\n\
    <|/ c |>\n<| c |>\nI added an explanation as to why this works.\n<|/ c |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11545604)\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvgfuzji8.js:30\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o'\
    \ || letter === 'u'){\n            newMessage += letter;\n            i++;\n \
    \       }\n        else if(letter === 'A' || letter === 'E' || letter === 'I'\
    \ || letter === 'O' || letter === 'U'){\n            newMessage += letter;\n \
    \           i++;\n        }\n        else if(letter === 'b' || letter === 'c'\
    \ || letter === 'd' || letter === 'f' || letter === 'g' || letter === 'h' || letter\
    \ === 'j' || letter === 'k' || letter === 'l' || letter === 'm' || letter ===\
    \ 'n' || letter === 'p' || letter === 'q' || letter === 'r' || letter === 's'\
    \ || letter === 't' || letter === 'v' || letter === 'w' || letter === 'x' || letter\
    \ === 'y' || letter === 'z'){\n            newMessage += letter;\n           \
    \ i++;\n        }\n        else if(letter === 'B' || letter === 'C' || letter\
    \ === 'D' || letter === 'F' || letter === 'G' || letter === 'H' || letter ===\
    \ 'J' || letter === 'K' || letter === 'L' || letter === 'M' || letter === 'N'\
    \ || letter === 'P' || letter === 'Q' || letter === 'R' || letter === 'S' || letter\
    \ === 'T' || letter === 'V' || letter === 'W' || letter === 'X' || letter ===\
    \ 'Y' || letter === 'Z'){\n            newMessage += letter;\n            i++;\n\
    \        }\n        else if(letter === 'q' || letter === 'w' || letter === 'e'\
    \ || letter === 'r' || letter === 't' || letter === 'y'){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if(letter === 'Q' || letter\
    \ === 'W' || letter === 'E' || letter === 'R' || letter === 'T' || letter ===\
    \ 'Y'){\n            newMessage += letter;\n            i++;\n        }\n    \
    \    else if(letter === 's'){\n            newMessage += letter;\n           \
    \ i++;\n        }\n        else if(letter === 'S'){\n            newMessage +=\
    \ letter;\n            i++;\n        }\n        else if(letter === 'd'){\n   \
    \         newMessage += letter;\n            i++;\n        }\n        else if(letter\
    \ === 'D'){\n            newMessage += letter;\n            i++;\n        }\n\
    \        else if(letter === 'f'){\n            newMessage += letter;\n       \
    \     i++;\n        }\n        else if(letter === 'F'){\n            newMessage\
    \ += letter;\n            i++;\n        }\n        else if(letter === 'g'){\n\
    \            newMessage += letter;\n            i++\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgr3wxsdw.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var\
    \ letters = ['t', 'h', 'k', 's', 'c'];\n    \n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index+1];\n  \
    \          newMessage += letters[(index+2)%5];\n        }\n        else{\n   \
    \         newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp62jt_x3g.js:35:10)\n    at Object.<anonymous> (/tmp/tmp62jt_x3g.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let messageArray = message.split('');\n  let newMessage = '';\n  for(let i\
    \ = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n   \
    \ let letterIndex = alphabet.indexOf(letter);\n    let letterToSwap = letterIndex\
    \ + 2;\n    let letterToReplace = alphabet[letterToSwap];\n    newMessage += alphabet[letterIndex];\n\
    \    newMessage += letterToReplace;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmt6hs8ki.js:16\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpmt6hs8ki.js:16:23)\n    at test (/tmp/tmpmt6hs8ki.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmt6hs8ki.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message.toLowerCase().split('').map(letter => {\n    let index\
    \ = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    return index >= 2 ? 'a' + index\
    \ - 2 : letter;\n  }).join('');\n  return newMessage.replace(/[aeiou]/g, letter\
    \ => {\n    let index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    return\
    \ index >= 2 ? 'a' + index - 2 : letter;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpg22tivjg.js:27:10)\n    at Object.<anonymous> (/tmp/tmpg22tivjg.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        var nextLetter = letters[(index+1)%letters.length];\n        newMessage\
    \ += letters.indexOf(letter) + nextLetter;\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-1a-1a-1a-1a'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmphxy6p1io.js:29:10)\n    at Object.<anonymous> (/tmp/tmphxy6p1io.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-1a-1a-1a-1a',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message.toLowerCase().split('').map(letter => {\n    let index\
    \ = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n    return index === 2 ? letter.charCodeAt(0)\
    \ - 'a'.charCodeAt(0) + 26 : index;\n  }).join('');\n  return newMessage.replace(/[aeiou]/g,\
    \ letter => letter.charCodeAt(0) - 'a'.charCodeAt(0) + 26);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'1941819'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpau08by0m.js:24:10)\n    at Object.<anonymous> (/tmp/tmpau08by0m.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '1941819',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    let vowels = 'aeiou'\n \
    \   let newMessage = ''\n    for(let i = 0; i < message.length; i++){\n      \
    \  let letter = message[i]\n        let index = alphabet.indexOf(letter)\n   \
    \     if(index != -1){\n            let nextLetter = alphabet[index + 1]\n   \
    \         newMessage += nextLetter\n        }\n        else{\n            newMessage\
    \ += letter\n        }\n    }\n    for(let i = 0; i < vowels.length; i++){\n \
    \       let letter = vowels[i]\n        let index = alphabet.indexOf(letter)\n\
    \        if(index != -1){\n            let nextLetter = alphabet[index + 2]\n\
    \            newMessage += nextLetter\n        }\n        else{\n            newMessage\
    \ += letter\n        }\n    }\n    return newMessage\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTcgkqw'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp215ivpbt.js:45:10)\n    at Object.<anonymous> (/tmp/tmp215ivpbt.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TESTcgkqw',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\uFFF4'\n\nshould equal\n\
    \n'tgst'\n    at test (/tmp/tmp6aemm3el.js:26:10)\n    at Object.<anonymous> (/tmp/tmp6aemm3el.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\uFFF3\uFFF4',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let position = letter.charCodeAt(0) -\
    \ 97;\n    newMessage += letters[position];\n  }\n  for(let i = 0; i < newMessage.length;\
    \ i++){\n    let letter = newMessage.charAt(i);\n    let position = letter.charCodeAt(0)\
    \ - 97;\n    newMessage = newMessage.replace(vowels, letters[position]);\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefined'\n\
    \nshould equal\n\n'tgst'\n    at test (/tmp/tmpv_1utks1.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_1utks1.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.indexOf(vowels[index + 1], index + 1);\n  \
    \          newMessage += alphabet.charAt(nextVowel);\n        }\n        else{\n\
    \            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp_4t5amzr.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_4t5amzr.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var vowels =\
    \ 'aeiou'.split('');\n    var newMessage = '';\n    \n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        var nextLetter = alphabet[index+1];\n        var nextVowel = vowels[vowels.indexOf(nextLetter)+1];\n\
    \        newMessage += nextVowel;\n    }\n    \n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'eeee'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpgg_8mwgp.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgg_8mwgp.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'eeee',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) -\
    \ 65;\n    newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpg6qakj4u.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg6qakj4u.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = \"\";\n  var vowels = \"aeiou\";\n  for(var i=0; i<message.length;\
    \ i++){\n    var letter = message.charAt(i);\n    var index = vowels.indexOf(letter);\n\
    \    if(index != -1){\n      result += message.charAt(i).toUpperCase();\n    \
    \  result += message.charAt(index+1);\n    }\n    else{\n      result += letter;\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpxnxjdrr3.js:33:10)\n    at Object.<anonymous> (/tmp/tmpxnxjdrr3.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.match(/[A-Z]/)[0]);\n  }\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.match(/[aeiou]/)[0]);\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg4os_hkg.js:19\n    newMessage = newMessage.replace(letter, letter.match(/[aeiou]/)[0]);\n\
    \                                                                   ^\n\nTypeError:\
    \ Cannot read property '0' of null\n    at encode (/tmp/tmpg4os_hkg.js:19:68)\n\
    \    at test (/tmp/tmpg4os_hkg.js:29:20)\n    at Object.<anonymous> (/tmp/tmpg4os_hkg.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp5hh2yog5.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5hh2yog5.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        if(letter === 'a' || letter === 'e' ||\
    \ letter === 'i' || letter === 'o' || letter === 'u'){\n            newMessage\
    \ += letter;\n        }\n        else{\n            newMessage += letter.charCodeAt(0)\
    \ - 96;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpc6h4ef8a.js:30:10)\n    at Object.<anonymous> (/tmp/tmpc6h4ef8a.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        if(letter == 'A' || letter == 'E' ||\
    \ letter == 'I' || letter == 'O' || letter == 'U'){\n            newLetter = letter.toUpperCase();\n\
    \        }\n        if(letter == 'a' || letter == 'e' || letter == 'i' || letter\
    \ == 'o' || letter == 'u'){\n            newLetter = letter.toLowerCase();\n \
    \       }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpo7ajpx64.js:32:10)\n    at Object.<anonymous> (/tmp/tmpo7ajpx64.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        if(letterIndex !=\
    \ -1){\n            let letterIndex = letterIndex + 2;\n            if(letterIndex\
    \ > 26){\n                letterIndex = letterIndex - 26;\n            }\n   \
    \         newMessage += alphabet[letterIndex];\n        }\n        else{\n   \
    \         newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc8f50dk5.js:16\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpc8f50dk5.js:16:27)\n    at test (/tmp/tmpc8f50dk5.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpc8f50dk5.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter.toLowerCase() == 'a' || letter.toLowerCase() == 'e' || letter.toLowerCase()\
    \ == 'i' || letter.toLowerCase() == 'o' || letter.toLowerCase() == 'u'){\n   \
    \         newMessage += letter;\n        }\n        else if(nextLetter.toLowerCase()\
    \ == 'a' || nextLetter.toLowerCase() == 'e' || nextLetter.toLowerCase() == 'i'\
    \ || nextLetter.toLowerCase() == 'o' || nextLetter.toLowerCase() == 'u'){\n  \
    \          newMessage += letter;\n            newMessage += nextLetter;\n    \
    \    }\n        else{\n            newMessage += letter;\n            newMessage\
    \ += nextLetter;\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEESTSTT'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmpdmgufn5j.js:37:10)\n    at Object.<anonymous> (/tmp/tmpdmgufn5j.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEESTSTT',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    for(let i = 0; i < vowels.length; i++){\n        newMessage = newMessage.replace(vowels[i],\
    \ vowels[i+1]);\n    }\n    for(let i = 0; i < message.length; i++){\n       \
    \ newMessage = newMessage.replace(message[i], message[i].toUpperCase());\n   \
    \ }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any libraries, only vanilla JS. I've edited my question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI've edited my answer to include a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any libraries, only vanilla JS. I've edited my question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI've edited my answer to include a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any libraries, only vanilla JS. I've edited my question\
    \ to reflect this.\n<|/ c |>\n<| a tags=javascript,string |>\n<code>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1fm03jkv.js:22\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var\
    \ letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    var vowelsCount = vowels.length;\n\
    \    var lettersCount = letters.length;\n    \n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message[i];\n        var newLetter = letter;\n \
    \       \n        if(letter == vowels[vowelsCount-1]){\n            newLetter\
    \ = letters[lettersCount-1];\n            lettersCount--;\n        }\n       \
    \ \n        newMessage += newLetter;\n    }\n    \n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpzt1jxheu.js:38:10)\n    at Object.<anonymous> (/tmp/tmpzt1jxheu.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        if(vowels.includes(newMessage[i])){\n            newMessage =\
    \ newMessage.replace(newMessage[i], letters[letters.indexOf(newMessage[i]) + 2]);\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpwif30yig.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwif30yig.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let newMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = alphabet.indexOf(letter);\n    let letterIndex2 = letterIndex\
    \ + 1;\n    let letterIndex3 = letterIndex2 + 1;\n    let letterIndex4 = letterIndex3\
    \ + 1;\n    let letterIndex5 = letterIndex4 + 1;\n    let letterIndex6 = letterIndex5\
    \ + 1;\n    let letterIndex7 = letterIndex6 + 1;\n    let letterIndex8 = letterIndex7\
    \ + 1;\n    let letterIndex9 = letterIndex8 + 1;\n    let letterIndex10 = letterIndex9\
    \ + 1;\n    let letterIndex11 = letterIndex10 + 1;\n    let letterIndex12 = letterIndex11\
    \ + 1;\n    let letterIndex13 = letterIndex12 + 1;\n    let letterIndex14 = letterIndex13\
    \ + 1;\n    let letterIndex15 = letterIndex14 + 1;\n    let letterIndex16 = letterIndex15\
    \ + 1;\n    let letterIndex17 = letterIndex16 + 1;\n    let letterIndex18 = letterIndex17\
    \ + 1;\n    let letterIndex19 = letterIndex18 + 1;\n    let letterIndex20 = letterIndex19\
    \ + 1;\n    let letterIndex21 = letterIndex20 + 1;\n    let letterIndex22 = letterIndex21\
    \ + 1;\n    let letterIndex23 = letterIndex22 + 1;\n    let letterIndex24 = letterIndex23\
    \ + 1;\n    let letterIndex25 = letterIndex24 + 1;\n    let letterIndex26 = letterIndex25\
    \ + 1;\n    let letterIndex27 = letterIndex26 + 1;\n    let letterIndex28 = letterIndex27\
    \ + 1;\n    let letterIndex29 = letterIndex28 + 1;\n    let letterIndex30 = letterIndex29\
    \ + 1;\n    let letterIndex31 = letterIndex30 + 1;\n    let letterIndex32 = letterIndex31\
    \ + 1;\n    let letterIndex33 = letterIndex32 + 1;\n    let letterIndex34 = letterIndex33\
    \ + 1;\n    let letterIndex35 = letterIndex34 + 1;\n    let letterIndex36 = letterIndex35\
    \ + 1;\n    let letterIndex37 = letterIndex36 + 1;\n    let letterIndex38 = letterIndex37\
    \ + 1;\n    let letterIndex39 = letterIndex38 + 1;\n    let letterIndex40 = letterIndex39\
    \ + 1;\n    let letterIndex41 = letterIndex40 + 1;\n    let letterIndex42 = letterIndex41\
    \ + 1;\n    let letterIndex43 = letterIndex42 + 1;\n    let letterIndex44 = letterIndex43\
    \ + 1;\n    let letterIndex45 = letterIndex44 + 1;\n    let letterIndex46 = letterIndex45\
    \ + 1;\n    let letterIndex47 = letterIndex46 + 1;\n    let letterIndex48 = letterIndex47\
    \ + 1;\n    let letterIndex49 = letterIndex48 + 1;\n    let letter\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnoq5ua__.js:65\n    let letter\n        ^\n\nSyntaxError: Identifier\
    \ 'letter' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't\
    \ work for me. `encode('This is a message')` returns `'tHKS KS C MGSSCGG'`\n<|/\
    \ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. Maybe I misunderstood\
    \ your question. Do you want the message to become `tHKS KS C MGSSCGG`?\n<|/ c\
    \ |>\n<| c |>\nYes, that is what I want.\n<|/ c |>\n<| c |>\nOkay, I updated my\
    \ answer to reflect your new requirements.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2avt41v4.js:28\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ result = '';\n  for (var i = 0; i < message.length; i++){\n    var letter =\
    \ message.charAt(i);\n    var index = alphabet.indexOf(letter);\n    if (index\
    \ != -1){\n      result += alphabet.charAt(index+2);\n    } else {\n      result\
    \ += letter;\n    }\n  }\n  for (var i = 0; i < vowels.length; i++){\n    var\
    \ index = alphabet.indexOf(vowels.charAt(i));\n    if (index != -1){\n      result\
    \ += alphabet.charAt(index+2);\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTcgkqw'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp8w2g2u6r.js:38:10)\n    at Object.<anonymous> (/tmp/tmp8w2g2u6r.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TESTcgkqw',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n \
    \   let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.charCodeAt(0) - 96);\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpmgp1zfvn.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmgp1zfvn.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = '';\n  for(var i=0; i<message.length; i++){\n    var letter =\
    \ message.charAt(i);\n    if(letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u'){\n      result += letter;\n    }\n    else{\n\
    \      result += letter.charCodeAt(0) - 96;\n    }\n  }\n  return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp3v48h5ij.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3v48h5ij.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    newMessage = newMessage.replace(letter, alphabet[letterIndex + 2]);\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_fsvm53b.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp_fsvm53b.js:15:23)\n    at test (/tmp/tmp_fsvm53b.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_fsvm53b.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var letterIndex = alphabet.indexOf(letter);\n        var letter2 = alphabet[letterIndex\
    \ + 1];\n        newMessage += letter2;\n    }\n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzx5g_msx.js:16\n        var letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpzx5g_msx.js:16:27)\n    at test (/tmp/tmpzx5g_msx.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzx5g_msx.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = message;\n    for(var i=0; i<message.length; i++){\n   \
    \     var letter = message.charAt(i);\n        newMessage = newMessage.replace(letter,\
    \ letter.charCodeAt(0)+2);\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'86718586'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmpfup5rafz.js:25:10)\n    at Object.<anonymous> (/tmp/tmpfup5rafz.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '86718586',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = \"aeiou\";\n  var letters = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = letter.charCodeAt(0);\n    var\
    \ nextLetter = letters.charAt(index + 1);\n    var nextVowel = vowels.charAt(index\
    \ + 1);\n    newMessage += letter;\n    if(letter != nextLetter){\n      newMessage\
    \ += nextLetter;\n    }\n    if(letter != nextVowel){\n      newMessage += nextVowel;\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp9b8b881g.js:36:10)\n    at Object.<anonymous> (/tmp/tmp9b8b881g.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    if (letter === 'a' || letter === 'e' ||\
    \ letter === 'i' || letter === 'o' || letter === 'u'){\n      encodedMessage +=\
    \ letter;\n    }\n    else {\n      let vowelIndex = alphabet.indexOf(letter);\n\
    \      encodedMessage += alphabet[vowelIndex + 2];\n    }\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqzsllzcm.js:19\n      let vowelIndex = alphabet.indexOf(letter);\n\
    \                       ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpqzsllzcm.js:19:24)\n    at test (/tmp/tmpqzsllzcm.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqzsllzcm.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let index = alphabet.indexOf(letter);\n\
    \    if(index === -1){\n      index = alphabet.length;\n      alphabet[alphabet.length]\
    \ = letter;\n    }\n    newMessage = newMessage.replace(letter, alphabet[index+2]);\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdv1vzvqe.js:15\n    let index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmpdv1vzvqe.js:15:17)\n\
    \    at test (/tmp/tmpdv1vzvqe.js:30:20)\n    at Object.<anonymous> (/tmp/tmpdv1vzvqe.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if(letter === 'a' || letter === 'e' || letter\
    \ === 'i' || letter === 'o' || letter === 'u'){\n      encodedMessage += letter;\n\
    \    }\n    else if(letter === 'A' || letter === 'E' || letter === 'I' || letter\
    \ === 'O' || letter === 'U'){\n      encodedMessage += letter.toUpperCase();\n\
    \    }\n    else{\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp4fqyb532.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4fqyb532.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.charCodeAt(0) - 64);\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'2051920'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpdwl4ow73.js:25:10)\n    at Object.<anonymous> (/tmp/tmpdwl4ow73.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '2051920',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < message.length; i++) {\n \
    \   let letter = message[i];\n    let index = english.indexOf(letter);\n    if\
    \ (index > -1) {\n      newMessage = newMessage.replace(letter, english[index\
    \ + 2]);\n    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmqt2qpjt.js:15\n    let index = english.indexOf(letter);\n    \
    \            ^\n\nReferenceError: english is not defined\n    at encode (/tmp/tmpmqt2qpjt.js:15:17)\n\
    \    at test (/tmp/tmpmqt2qpjt.js:28:20)\n    at Object.<anonymous> (/tmp/tmpmqt2qpjt.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.charAt(index+1);\n            var nextLetter\
    \ = alphabet.charAt(index+2);\n            newMessage += alphabet.charAt(index)\
    \ + nextLetter + nextVowel;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp4707smvx.js:36:10)\n    at Object.<anonymous> (/tmp/tmp4707smvx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i + 1);\n \
    \   var newLetter = letter;\n    if(letter === 'a' || letter === 'e' || letter\
    \ === 'i' || letter === 'o' || letter === 'u'){\n      newLetter = nextLetter;\n\
    \    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpckr1158l.js:30:10)\n    at Object.<anonymous> (/tmp/tmpckr1158l.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65;\n\
    \    }\n    for(let i = 0; i < message.length; i++){\n        let letter = message[i];\n\
    \        newMessage += letter.charCodeAt(0) - 97;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'1941819-13-28-14-13'\n\nshould equal\n\n\
    'tgst'\n    at test (/tmp/tmpqj6trp8s.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqj6trp8s.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '1941819-13-28-14-13',\n  expected: 'tgst',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = 'aeiou';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var index = letters.indexOf(letter);\n        var nextIndex = letters.indexOf(nextLetter);\n\
    \        if(index != -1 && nextIndex != -1){\n            var newLetter = letters[(index+2)%letters.length];\n\
    \            newMessage += newLetter;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpg7_tisqx.js:36:10)\n    at Object.<anonymous> (/tmp/tmpg7_tisqx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = '';\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var nextNextLetter\
    \ = message.charAt(i+2);\n    \n    if(letter.toLowerCase() == 'a' || letter.toLowerCase()\
    \ == 'e' || letter.toLowerCase() == 'i' || letter.toLowerCase() == 'o' || letter.toLowerCase()\
    \ == 'u'){\n      result += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == 'b'){\n      result += letter;\n      i++;\n      result += nextLetter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() == 'c'){\n      result +=\
    \ letter;\n      i++;\n      result += nextLetter;\n      i++;\n      result +=\
    \ nextNextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase() == 'd'){\n\
    \      result += letter;\n      i++;\n      result += nextLetter;\n      i++;\n\
    \      result += nextNextLetter;\n      i++;\n      result += nextNextNextLetter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() == 'e'){\n      result +=\
    \ letter;\n      i++;\n      result += nextLetter;\n      i++;\n      result +=\
    \ nextNextLetter;\n      i++;\n      result += nextNextNextLetter;\n      i++;\n\
    \      result += nextNextNextNextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == 'f'){\n      result += letter;\n      i++;\n      result += nextLetter;\n\
    \      i++;\n      result += nextNextLetter;\n      i++;\n      result += nextNextNextLetter;\n\
    \      i++;\n      result += nextNextNextNextLetter;\n      i++;\n      result\
    \ += nextNextNextNextNextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == 'g'){\n      result += letter;\n      i++;\n      result += nextLetter;\n\
    \      i++;\n      result += nextNextLetter;\n      i++;\n      result += nextNextNextLetter;\n\
    \      i++;\n      result += nextNextNextNextLetter;\n      i++;\n      result\
    \ += nextNextNextNextNextLetter;\n      i++;\n      result += nextNextNextNextNextNextLetter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() == 'h'){\n      result +=\
    \ letter;\n      i++;\n      result += nextLetter;\n      i++;\n      result +=\
    \ nextNextLetter;\n      i++;\n      result += nextNextNextLetter;\n      i++;\n\
    \      result += nextNextNextNextLetter;\n      i++;\n      result += nextNextNextNextNextLetter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc52xqetl.js:112\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for (let i = 0; i < message.length; i++){\n   \
    \     let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpwvdenv1u.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwvdenv1u.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = vowels.indexOf(newVowel);\n    var newVowelIndex = newVowelIndex\
    \ + 2;\n    newMessage = newMessage + newLetter;\n    if(newVowelIndex < vowels.length){\n\
    \      newMessage = newMessage + newVowel;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7kw5ar5n.js:17\n    var newVowel = vowels[letter];\n          \
    \         ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp7kw5ar5n.js:17:20)\n\
    \    at test (/tmp/tmp7kw5ar5n.js:33:20)\n    at Object.<anonymous> (/tmp/tmp7kw5ar5n.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    let\
    \ letter = message[i];\n    if (letter === 'a' || letter === 'e' || letter ===\
    \ 'i' || letter === 'o' || letter === 'u') {\n      newMessage += letter;\n  \
    \  } else {\n      newMessage += letter.charCodeAt(0) - 65 + 2;\n    }\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'2162021'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpoyrfvjsq.js:29:10)\n    at Object.<anonymous> (/tmp/tmpoyrfvjsq.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '2162021',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        let newLetter = letter;\n        for(let\
    \ j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n    \
    \            newLetter = vowels[j + 2];\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1plu6848.js:16\n        for(let j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmp1plu6848.js:16:28)\n    at test (/tmp/tmp1plu6848.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1plu6848.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = letter.charCodeAt(0) - 65;\n  \
    \  newMessage = newMessage.replace(letter, String.fromCharCode(index+2));\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0015\\u0006\\u0014\\u0015'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpq1x1xmei.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq1x1xmei.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\\
    x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    var vowels = 'aeiouy';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    \n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        var nextLetter = letters.charAt(index+1);\n\
    \        newMessage += letter.charAt(0).toUpperCase();\n        newMessage +=\
    \ nextLetter;\n    }\n    \n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp6hqeg9zl.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6hqeg9zl.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var encodedMessage = '';\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var letterIndex = alphabet.indexOf(letter);\n        var vowelIndex =\
    \ vowels.indexOf(letter);\n        if(letterIndex > -1 && vowelIndex > -1){\n\
    \            var nextVowelIndex = vowelIndex + 2;\n            if(nextVowelIndex\
    \ > alphabet.length){\n                nextVowelIndex = alphabet.length;\n   \
    \         }\n            encodedMessage += alphabet[letterIndex];\n          \
    \  encodedMessage += alphabet[nextVowelIndex];\n        }\n        else{\n   \
    \         encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmppm_mcxs8.js:40:10)\n    at Object.<anonymous> (/tmp/tmppm_mcxs8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextLetter = alphabet[(index+1)%alphabet.length];\n\
    \        newMessage += letter.swapCase();\n        newMessage += nextLetter;\n\
    \    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n\
    <| c |>\nThis doesn't work. Try it with `encode('This is a message')`.\n<|/ c\
    \ |>\n<| c |>\nI see what you're saying. I was thinking about it backwards. I'll\
    \ fix it.\n<|/ c |>\n<| c |>\nI fixed it. I had a bug in the `swapCase` function.\
    \ I was trying to swap case of the letters themselves, not the letters themselves\
    \ being swapped.\n<|/ c |>\n<| c |>\nI fixed it again. I had a bug in the `swapCase`\
    \ function. I was trying to swap case of the letters themselves, not the letters\
    \ themselves being swapped.\n<|/ c |>\n<| c |>\nI fixed it again. I had a bug\
    \ in the `swapCase` function. I was trying to swap case of the letters themselves,\
    \ not the letters themselves being swapped.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\nI came up with a solution that is probably not very efficient, but I wanted\
    \ to post it anyway:\n<code>\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbyhznmod.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = 'aeiou';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        result += letters[index %\
    \ letters.length];\n    }\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var index = letter.charCodeAt(0);\n   \
    \     var nextIndex = index + 2;\n        result += letters[nextIndex % letters.length];\n\
    \    }\n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        var nextIndex = index + 3;\n\
    \        result += letters[nextIndex % letters.length];\n    }\n    for(var i=0;\
    \ i<message.length; i++){\n        var letter = message.charAt(i);\n        var\
    \ index = letter.charCodeAt(0);\n        var nextIndex = index + 4;\n        result\
    \ += letters[nextIndex % letters.length];\n    }\n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0);\n\
    \        var nextIndex = index + 5;\n        result += letters[nextIndex % letters.length];\n\
    \    }\n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        var nextIndex = index + 6;\n\
    \        result += letters[nextIndex % letters.length];\n    }\n    for(var i=0;\
    \ i<message.length; i++){\n        var letter = message.charAt(i);\n        var\
    \ index = letter.charCodeAt(0);\n        var nextIndex = index + 7;\n        result\
    \ += letters[nextIndex % letters.length];\n    }\n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0);\n\
    \        var nextIndex = index + 8;\n        result += letters[nextIndex % letters.length];\n\
    \    }\n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        var nextIndex = index + 9;\n\
    \        result += letters[nextIndex % letters.length];\n    }\n    for(var i=0;\
    \ i<message.length; i++){\n        var letter = message.charAt(i);\n        var\
    \ index = letter.charCodeAt(0);\n        var nextIndex = index + 10;\n       \
    \ result += letters[nextIndex % letters.length];\n    }\n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0);\n\
    \        var nextIndex = index + 11;\n        result += letters[nextIndex % letters.length];\n\
    \    }\n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        var nextIndex = index + 12;\n\
    \        result += letters[nextIndex % letters.length];\n    }\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp405zruj2.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let messageArray = message.split('');\n  let newMessage = '';\n  for(let i\
    \ = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n   \
    \ let newLetter = letter;\n    for(let j = 0; j < vowels.length; j++){\n     \
    \ if(letter == vowels[j]){\n        newLetter = vowels[j + 2];\n      }\n    }\n\
    \    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9x70_7y0.js:17\n    for(let j = 0; j < vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmp9x70_7y0.js:17:24)\n    at test (/tmp/tmp9x70_7y0.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9x70_7y0.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 65;\n    result\
    \ += String.fromCharCode(index+2);\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0015\\u0006\\u0014\\u0015'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpj1t4r072.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj1t4r072.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\\
    x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  var vowels = 'aeiou'\n  var\
    \ newMessage = ''\n  for(var i=0; i<message.length; i++){\n    var letter = message[i]\n\
    \    var index = alphabet.indexOf(letter)\n    if(index != -1){\n      var nextVowel\
    \ = alphabet.indexOf(vowels[index+1])\n      if(nextVowel == -1){\n        nextVowel\
    \ = alphabet.length\n      }\n      newMessage += alphabet.charAt(nextVowel)\n\
    \    }\n    else{\n      newMessage += letter\n    }\n  }\n  return newMessage\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp8dgxq1r3.js:37:10)\n    at Object.<anonymous> (/tmp/tmp8dgxq1r3.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let vowelsMap = {};\n    vowels.forEach(vowel => {\n        vowelsMap[vowel]\
    \ = vowel;\n    });\n    \n    newMessage = newMessage.split('').map(letter =>\
    \ {\n        if (vowelsMap[letter]) {\n            return vowelsMap[letter];\n\
    \        } else {\n            return letter;\n        }\n    }).join('');\n \
    \   \n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpg82opd6j.js:35:10)\n    at Object.<anonymous> (/tmp/tmpg82opd6j.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        if(alphabet.includes(letter)){\n      \
    \      newMessage += letter;\n        }\n        else{\n            let index\
    \ = alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter) + 1));\n         \
    \   newMessage += alphabet.charAt(index);\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'aaaa'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpg5v6mrhk.js:33:10)\n    at Object.<anonymous> (/tmp/tmpg5v6mrhk.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt()\
    \ - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmphcahog0s.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphcahog0s.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter;\n    for(let j = 0; j < letter.length;\
    \ j++){\n      if(j === 0){\n        newLetter = letter.charAt(j);\n      }\n\
    \      if(letter.charCodeAt(j) >= 65 && letter.charCodeAt(j) <= 90){\n       \
    \ newLetter = letter.charAt(j - 1) + letter.charAt(j);\n      }\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmprwxgis5a.js:34:10)\n    at Object.<anonymous> (/tmp/tmprwxgis5a.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a','e','i','o','u'];\n    let\
    \ vowelsMap = {};\n    vowels.forEach((vowel)=>{\n        vowelsMap[vowel] = vowel;\n\
    \    });\n    newMessage = newMessage.split('').map((letter)=>{\n        return\
    \ vowelsMap[letter];\n    }).join('');\n    return newMessage;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'tgst'\n    at test\
    \ (/tmp/tmpw992d33b.js:28:10)\n    at Object.<anonymous> (/tmp/tmpw992d33b.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = \"aeiou\";\n  var letters = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var index = letters.indexOf(letter);\n    var nextLetter = letters.charAt(index+1);\n\
    \    var nextIndex = letters.indexOf(nextLetter);\n    var nextNextLetter = letters.charAt(index+2);\n\
    \    var nextNextIndex = letters.indexOf(nextNextLetter);\n    var nextNextNextLetter\
    \ = letters.charAt(index+3);\n    var nextNextNextIndex = letters.indexOf(nextNextNextLetter);\n\
    \    var nextNextNextNextLetter = letters.charAt(index+4);\n    var nextNextNextNextIndex\
    \ = letters.indexOf(nextNextNextNextLetter);\n    var nextNextNextNextNextLetter\
    \ = letters.charAt(index+5);\n    var nextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextLetter = letters.charAt(index+6);\n    var nextNextNextNextNextNextIndex\
    \ = letters.indexOf(nextNextNextNextNextNextLetter);\n    var nextNextNextNextNextNextNextLetter\
    \ = letters.charAt(index+7);\n    var nextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextNextNextLetter = letters.charAt(index+8);\n \
    \   var nextNextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextNextNextNextLetter = letters.charAt(index+9);\n\
    \    var nextNextNextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextNextNextNextNextLetter = letters.charAt(index+10);\n\
    \    var nextNextNextNextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextNextNextNextNextNextLetter = letters.charAt(index+11);\n\
    \    var nextNextNextNextNextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextLetter);\n\
    \    var nextNextNextNextNextNextNextNextNextNextNextNextLetter = letters.charAt(index+12);\n\
    \    var nextNextNextNextNextNextNextNextNextNextNextNextIndex = letters.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3nnb3j6f.js:42\n    var nextNextNextNextNextNextNextNextNextNextNextNextIndex\
    \ = letters.indexOf(nextNextNextNextNextNextNextNextNextNextNextNextNextLetter\n\
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSyntaxError:\
    \ missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        var nextLetterIndex = alphabet.indexOf(nextLetter);\n       \
    \ var nextLetterLetter = alphabet[nextLetterIndex + 1];\n        if(nextLetterLetter\
    \ == 'a' || nextLetterLetter == 'e' || nextLetterLetter == 'i' || nextLetterLetter\
    \ == 'o' || nextLetterLetter == 'u'){\n            newMessage += letter;\n   \
    \     }else{\n            newMessage += alphabet[alphabet.indexOf(letter) + 2];\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprl4gtxk8.js:16\n        var nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \                              ^\n\nReferenceError: alphabet is not defined\n\
    \    at encode (/tmp/tmprl4gtxk8.js:16:31)\n    at test (/tmp/tmprl4gtxk8.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmprl4gtxk8.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let result = \"\";\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let letterIndex = english.indexOf(letter);\n    result +=\
    \ swapCase(letter, letterIndex);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcb_1_igk.js:15\n    let letterIndex = english.indexOf(letter);\n\
    \                      ^\n\nReferenceError: english is not defined\n    at encode\
    \ (/tmp/tmpcb_1_igk.js:15:23)\n    at test (/tmp/tmpcb_1_igk.js:26:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpcb_1_igk.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    if(letter === 'a' || letter === 'e' ||\
    \ letter === 'i' || letter === 'o' || letter === 'u'){\n      newMessage = newMessage.replace(letter,\
    \ letter.toUpperCase());\n    }\n    else if(letter === 'A' || letter === 'E'\
    \ || letter === 'I' || letter === 'O' || letter === 'U'){\n      newMessage =\
    \ newMessage.replace(letter, letter.toLowerCase());\n    }\n  }\n  for(let i =\
    \ 0; i < message.length; i++){\n    let letter = message.charAt(i);\n    if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage = newMessage.replace(letter, letter.toUpperCase());\n\
    \    }\n    else if(letter === 'A' || letter === 'E' || letter === 'I' || letter\
    \ === 'O' || letter === 'U'){\n      newMessage = newMessage.replace(letter, letter.toLowerCase());\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TeST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpd8vagf64.js:39:10)\n    at Object.<anonymous> (/tmp/tmpd8vagf64.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        newMessage += alphabet.indexOf(letter) + 1;\n\
    \    }\n    for(var i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0;\
    \ i < message.length; i++){\n        var letter = message.charAt(i);\n       \
    \ newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        newMessage += alphabet.indexOf(letter) + 1;\n\
    \    }\n    for(var i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0;\
    \ i < message.length; i++){\n        var letter = message.charAt(i);\n       \
    \ newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        newMessage += alphabet.indexOf(letter) + 1;\n\
    \    }\n    for(var i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0;\
    \ i < message.length; i++){\n        var letter = message.charAt(i);\n       \
    \ newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        newMessage += alphabet.indexOf(letter) + 1;\n\
    \    }\n    for(var i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0;\
    \ i < message.length; i++){\n        var letter = message.charAt(i);\n       \
    \ newMessage += alphabet.indexOf(letter) + 1;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter)\
    \ + 1;\n    }\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        newMessage += alphabet.indexOf(letter) + 1;\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3d5tno0w.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter);\n\
    \        newMessage += alphabet.indexOf(letter.charAt(1));\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-10-10-10-10'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpmgun2zuf.js:28:10)\n    at Object.<anonymous> (/tmp/tmpmgun2zuf.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-10-10-10-10',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.indexOf(vowels[index],\
    \ index + 1);\n            if(nextVowel != -1){\n                newMessage +=\
    \ alphabet.charAt(nextVowel);\n            }\n            else{\n            \
    \    newMessage += alphabet.charAt(index);\n            }\n        }\n       \
    \ else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work for\
    \ the input `'This is a message'`\n<|/ c |>\n<| c |>\nIt does. I tested it before\
    \ posting it. The problem was the fact that I was using indexOf instead of indexOf.\
    \ My bad.\n<|/ c |>\n<| c |>\nI tested it again and it doesn't work for the input\
    \ `'This is a message'`\n<|/ c |>\n<| c |>\nIt works now. My bad. Sorry about\
    \ that.\n<|/ c |>\n<| c |>\nIt works now. My bad. Sorry about that.\n<|/ c |>\n\
    <| a tags=javascript,algorithm |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj5s1onuh.js:33\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.charCodeAt(0) - 64);\n  }\n  return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'2051920'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmp1ug4codl.js:25:10)\n    at Object.<anonymous> (/tmp/tmp1ug4codl.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '2051920',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = letter.charCodeAt(0) - 65;\n  \
    \  newMessage = newMessage.replace(letter, String.fromCharCode(index));\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpq_x9nrdn.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq_x9nrdn.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var vowels =\
    \ 'aeiou'.split('');\n    var messageArray = message.split('');\n    var newMessage\
    \ = '';\n    for(var i = 0; i < messageArray.length; i++){\n        var letter\
    \ = messageArray[i];\n        var index = alphabet.indexOf(letter);\n        if(index\
    \ != -1){\n            var nextVowel = vowels[index + 1];\n            newMessage\
    \ += nextVowel;\n        }\n        newMessage += letter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpnfcerkxq.js:33:10)\n    at Object.<anonymous> (/tmp/tmpnfcerkxq.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ newMessage = '';\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n    if(index\
    \ != -1){\n      var nextVowel = alphabet.charAt(index+1);\n      newMessage +=\
    \ nextVowel;\n    }\n    else{\n      newMessage += letter;\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp1pvdaypx.js:34:10)\n    at Object.<anonymous> (/tmp/tmp1pvdaypx.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    var messageArray = message.split('');\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.charAt(index+1);\n            newMessage +=\
    \ alphabet.charAt(index) + nextVowel;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpijeg7bo2.js:35:10)\n    at Object.<anonymous> (/tmp/tmpijeg7bo2.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  var vowels = 'aeiou';\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  \n  for(var i=0; i<message.length; i++){\n    var letter = message.charAt(i);\n\
    \    var index = letter.charCodeAt(0) - 97;\n    \n    if(index >= 0 && index\
    \ < letters.length){\n      newMessage += letters[index];\n    }\n    \n    if(letter\
    \ in vowels){\n      newMessage += letters[vowels.indexOf(letter)+1];\n    }\n\
    \  }\n  \n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzo8fmgfj.js:24\n    if(letter in vowels){\n              ^\n\n\
    TypeError: Cannot use 'in' operator to search for 'T' in aeiou\n    at encode\
    \ (/tmp/tmpzo8fmgfj.js:24:15)\n    at test (/tmp/tmpzo8fmgfj.js:37:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpzo8fmgfj.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(letter === 'a' || letter\
    \ === 'e' || letter === 'i' || letter === 'o' || letter === 'u'){\n          \
    \  encodedMessage += letter;\n        }\n        else{\n            let vowelIndex\
    \ = vowels.indexOf(letter);\n            if(vowelIndex === -1){\n            \
    \    encodedMessage += letter;\n            }\n            else{\n           \
    \     let vowel = vowels[vowelIndex];\n                let vowelIndex = vowels.indexOf(vowel);\n\
    \                let nextVowel = vowels[vowelIndex + 1];\n                let\
    \ encodedLetter = nextVowel;\n                encodedMessage += encodedLetter;\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp2c4sj3f.js:19\n            let vowelIndex = vowels.indexOf(letter);\n\
    \                             ^\n\nReferenceError: vowels is not defined\n   \
    \ at encode (/tmp/tmpp2c4sj3f.js:19:30)\n    at test (/tmp/tmpp2c4sj3f.js:40:20)\n\
    \    at Object.<anonymous> (/tmp/tmpp2c4sj3f.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    var currentLetter;\n    var currentVowel;\n   \
    \ var currentVowelIndex;\n    var currentVowelPosition;\n    \n    for(var i =\
    \ 0; i < message.length; i++){\n        currentLetter = message[i];\n        currentVowelIndex\
    \ = alphabet.indexOf(currentLetter);\n        currentVowel = vowels[currentVowelIndex];\n\
    \        currentVowelPosition = alphabet.indexOf(currentVowel);\n        newMessage\
    \ += alphabet.charAt(currentVowelPosition + 2);\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'bbbb'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpqw0dlv68.js:35:10)\n    at Object.<anonymous> (/tmp/tmpqw0dlv68.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'bbbb',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ result = '';\n  for(var i = 0; i < message.length; i++){\n    var letter = message.charAt(i);\n\
    \    var index = alphabet.indexOf(letter);\n    if(index != -1){\n      result\
    \ += alphabet.charAt(index+2);\n    }\n    else{\n      result += letter;\n  \
    \  }\n  }\n  for(var i = 0; i < vowels.length; i++){\n    result += alphabet.indexOf(vowels.charAt(i));\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST0481420'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpw42zydkx.js:36:10)\n    at Object.<anonymous> (/tmp/tmpw42zydkx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST0481420',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var letterIndex = alphabet.indexOf(letter);\n        if(letterIndex >\
    \ -1){\n            var nextLetterIndex = letterIndex + 1;\n            if(nextLetterIndex\
    \ < alphabet.length){\n                newMessage += alphabet[nextLetterIndex];\n\
    \            }\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw5xbnarz.js:16\n        var letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpw5xbnarz.js:16:27)\n    at test (/tmp/tmpw5xbnarz.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpw5xbnarz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let newVowels = [];\n    for(let i = 0; i < vowels.length; i++){\n      \
    \  newVowels.push(vowels[i]);\n    }\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        let letter = newMessage.charAt(i);\n        let newLetter = letter;\n\
    \        for(let j = 0; j < newVowels.length; j++){\n            if(newVowels[j]\
    \ === letter){\n                newLetter = newVowels[j];\n            }\n   \
    \     }\n        newMessage = newMessage.replace(letter, newLetter);\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp23ai_z23.js:36:10)\n    at Object.<anonymous> (/tmp/tmp23ai_z23.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    let letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        if(vowels.includes(newMessage[i])){\n            newMessage[i]\
    \ = letters[newMessage.indexOf(i)+1];\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpx74cv2r0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpx74cv2r0.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = message;\n  encodedMessage = encodedMessage.toLowerCase();\n\
    \  encodedMessage = encodedMessage.replace(/[a-z]/g, function(letter){\n    return\
    \ letter.charCodeAt(0) - 96;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 64;\n  });\n  encodedMessage\
    \ = encodedMessage.replace(/[aeiou]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 64;\n  });\n  encodedMessage = encodedMessage.replace(/[aeiou]/g, function(\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfgn9gzn4.js:69\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for (let i = 0; i < message.length; i++){\n   \
    \     let letter = message.charAt(i);\n        let nextLetter = message.charAt(i+1);\n\
    \        let vowels = ['a', 'e', 'i', 'o', 'u'];\n        if (vowels.includes(letter)){\n\
    \            newMessage += letter;\n            newMessage += nextLetter;\n  \
    \      }\n        else {\n            newMessage += letter.toUpperCase();\n  \
    \          newMessage += nextLetter.toUpperCase();\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEESSTT'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmph89yrqt2.js:34:10)\n    at Object.<anonymous> (/tmp/tmph89yrqt2.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    newMessage += newLetter;\n    var\
    \ vowelIndex = newLetter.indexOf(\"A\");\n    if(vowelIndex != -1){\n      var\
    \ vowel = newLetter.charAt(vowelIndex+1);\n      var newVowel = newLetter.charAt(vowelIndex+2);\n\
    \      newMessage += vowel;\n      newMessage += newVowel;\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp7449i98b.js:34:10)\n    at Object.<anonymous> (/tmp/tmp7449i98b.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmplfgfr82p.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplfgfr82p.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = 'aeiouAEIOU';\n    let vowelsArray\
    \ = vowels.split('');\n    let vowelsArrayLength = vowelsArray.length;\n    let\
    \ vowelsArrayIndex = 0;\n    let newMessageArray = newMessage.split('');\n   \
    \ let newMessageArrayLength = newMessageArray.length;\n    let newMessageArrayIndex\
    \ = 0;\n    let newMessageArrayIndex2 = 0;\n    let newMessageArrayIndex3 = 0;\n\
    \    let newMessageArrayIndex4 = 0;\n    let newMessageArrayIndex5 = 0;\n    let\
    \ newMessageArrayIndex6 = 0;\n    let newMessageArrayIndex7 = 0;\n    let newMessageArrayIndex8\
    \ = 0;\n    let newMessageArrayIndex9 = 0;\n    let newMessageArrayIndex10 = 0;\n\
    \    let newMessageArrayIndex11 = 0;\n    let newMessageArrayIndex12 = 0;\n  \
    \  let newMessageArrayIndex13 = 0;\n    let newMessageArrayIndex14 = 0;\n    let\
    \ newMessageArrayIndex15 = 0;\n    let newMessageArrayIndex16 = 0;\n    let newMessageArrayIndex17\
    \ = 0;\n    let newMessageArrayIndex18 = 0;\n    let newMessageArrayIndex19 =\
    \ 0;\n    let newMessageArrayIndex20 = 0;\n    let newMessageArrayIndex21 = 0;\n\
    \    let newMessageArrayIndex22 = 0;\n    let newMessageArrayIndex23 = 0;\n  \
    \  let newMessageArrayIndex24 = 0;\n    let newMessageArrayIndex25 = 0;\n    let\
    \ newMessageArrayIndex26 = 0;\n    let newMessageArrayIndex27 = 0;\n    let newMessageArrayIndex28\
    \ = 0;\n    let newMessageArrayIndex29 = 0;\n    let newMessageArrayIndex30 =\
    \ 0;\n    let newMessageArrayIndex31 = 0;\n    let newMessageArrayIndex32 = 0;\n\
    \    let newMessageArrayIndex33 = 0;\n    let newMessageArrayIndex34 = 0;\n  \
    \  let newMessageArrayIndex35 = 0;\n    let newMessageArrayIndex36 = 0;\n    let\
    \ newMessageArrayIndex37 = 0;\n    let newMessageArrayIndex38 = 0;\n    let newMessageArrayIndex39\
    \ = 0;\n    let newMessageArrayIndex40 = 0;\n    let newMessageArrayIndex41 =\
    \ 0;\n    let newMessageArrayIndex42 = 0;\n    let newMessageArrayIndex43 = 0;\n\
    \    let newMessageArrayIndex44 = 0;\n    let newMessageArrayIndex45 = 0;\n  \
    \  let newMessageArrayIndex46 = 0;\n    let newMessageArrayIndex47 = 0;\n    let\
    \ newMessageArrayIndex48 = 0;\n    let newMessageArrayIndex49 = 0;\n    let newMessageArrayIndex50\
    \ = 0;\n    let newMessageArrayIndex51 = 0;\n    let newMessageArrayIndex52 =\
    \ 0;\n    let newMessageArrayIndex53 = 0;\n    let newMessageArrayIndex54 = 0;\n\
    \    let newMessageArrayIndex55 = 0;\n    let newMessageArrayIndex56 = 0;\n  \
    \  let newMessageArrayIndex57\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdtwsden1.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.toUpperCase();\n    newMessage +=\
    \ newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.toLowerCase();\n    newMessage +=\
    \ newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter;\n    newMessage += newLetter;\n \
    \ }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTtestTEST'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpq8r9ernx.js:36:10)\n    at Object.<anonymous> (/tmp/tmpq8r9ernx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    newMessage = newMessage.replace(letter,\
    \ letter.match(/[aeiou]/) ? letter.match(/[aeiou]/)[0].toUpperCase() : letter.match(/[aeiou]/)\
    \ ? letter.match(/[aeiou]/)[0].toLowerCase() : letter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpm_sm7m7z.js:25:10)\n    at Object.<anonymous> (/tmp/tmpm_sm7m7z.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ messageArray = message.split('');\n  var newMessage = '';\n  for(var i = 0;\
    \ i < messageArray.length; i++){\n    var letter = messageArray[i];\n    var index\
    \ = alphabet.indexOf(letter);\n    var nextVowel = alphabet.indexOf(vowels[index\
    \ + 1], index + 1);\n    newMessage += alphabet.charAt(nextVowel);\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'aaaa'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpxr_fu1jt.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxr_fu1jt.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var newLetter\
    \ = letter;\n    if(letter === 'a' || letter === 'e' || letter === 'i' || letter\
    \ === 'o' || letter === 'u'){\n      newLetter = nextLetter;\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp4s31klb2.js:30:10)\n    at Object.<anonymous> (/tmp/tmp4s31klb2.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ messageArray = message.split('');\n  var newMessage = '';\n  for(var i = 0;\
    \ i < messageArray.length; i++){\n    var letter = messageArray[i];\n    var index\
    \ = alphabet.indexOf(letter);\n    var nextLetter = alphabet[index + 1];\n   \
    \ if(vowels.indexOf(letter) > -1){\n      newMessage += letter;\n      newMessage\
    \ += nextLetter;\n    }else{\n      newMessage += letter.toUpperCase();\n    \
    \  newMessage += nextLetter.toUpperCase();\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TAEASATA'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmpdnu12z6o.js:36:10)\n    at Object.<anonymous> (/tmp/tmpdnu12z6o.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TAEASATA',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter;\n    for(var j=0; j<vowels.length;\
    \ j++){\n      if(letter == vowels[j]){\n        newLetter = vowels[j+1];\n  \
    \    }\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7jxxq9qq.js:16\n    for(var j=0; j<vowels.length; j++){\n     \
    \              ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp7jxxq9qq.js:16:20)\n\
    \    at test (/tmp/tmp7jxxq9qq.js:31:20)\n    at Object.<anonymous> (/tmp/tmp7jxxq9qq.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = \"aeiou\";\n    var messageArray = message.split(\"\");\n  \
    \  var newMessage = \"\";\n    for(var i = 0; i < messageArray.length; i++){\n\
    \        var letter = messageArray[i];\n        var index = vowels.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = vowels[index + 1];\n \
    \           newMessage += nextLetter;\n        }\n        newMessage += letter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpbgwyqgal.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbgwyqgal.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterToAdd = \"\";\n    for(let j = 0;\
    \ j < vowels.length; j++){\n      if(letter == vowels[j]){\n        letterToAdd\
    \ = vowels[j+1];\n      }\n    }\n    newMessage += letterToAdd;\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfi689uff.js:16\n    for(let j = 0; j < vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpfi689uff.js:16:24)\n    at test (/tmp/tmpfi689uff.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpfi689uff.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmp5e1av15a.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5e1av15a.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextVowel = alphabet.indexOf(vowels[index],\
    \ index + 1);\n        if(nextVowel === -1){\n            nextVowel = alphabet.length;\n\
    \        }\n        newMessage += alphabet.charAt(nextVowel);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'tgst'\n    at test\
    \ (/tmp/tmptj3nmv_v.js:33:10)\n    at Object.<anonymous> (/tmp/tmptj3nmv_v.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = '';\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let index = letter.charCodeAt(0) - 'a'.charCodeAt(0);\n \
    \   newMessage += letter.charCodeAt(0) - 'a'.charCodeAt(0) + index;\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-26-56-28-26'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpq3aps2sh.js:26:10)\n    at Object.<anonymous> (/tmp/tmpq3aps2sh.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-26-56-28-26',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        if(index >= 0){\n            newMessage += letter.charAt(index);\n\
    \        }\n        else{\n            newMessage += letter;\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpj03uehkv.js:31:10)\n    at Object.<anonymous> (/tmp/tmpj03uehkv.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = '';\n  for(var i=0;i<message.length;i++){\n    var letter = message.charAt(i);\n\
    \    if(letter=='A'||letter=='E'||letter=='I'||letter=='O'||letter=='U'){\n  \
    \    result += letter;\n    }else{\n      result += letter.charCodeAt(0)-65;\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'19E1819'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpl3l2xd21.js:29:10)\n    at Object.<anonymous> (/tmp/tmpl3l2xd21.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '19E1819',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextLetter = alphabet[index\
    \ + 1];\n        if(vowels.indexOf(letter) > -1 && vowels.indexOf(nextLetter)\
    \ > -1){\n            newMessage += letter;\n        }\n        else{\n      \
    \      newMessage += nextLetter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'aaaa'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpc5rmyym9.js:35:10)\n    at Object.<anonymous> (/tmp/tmpc5rmyym9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        let newLetter = letter;\n        for(let\
    \ j = 0; j < letter.length; j++){\n            let nextLetter = letter.charAt(j);\n\
    \            if(nextLetter == 'A' || nextLetter == 'E' || nextLetter == 'I' ||\
    \ nextLetter == 'O' || nextLetter == 'U'){\n                newLetter = nextLetter.toUpperCase();\n\
    \            }\n            else if(nextLetter == 'a' || nextLetter == 'e' ||\
    \ nextLetter == 'i' || nextLetter == 'o' || nextLetter == 'u'){\n            \
    \    newLetter = nextLetter.toLowerCase();\n            }\n        }\n       \
    \ newMessage += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpx_luy0ja.js:35:10)\n    at Object.<anonymous> (/tmp/tmpx_luy0ja.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ if(vowels.includes(letter)){\n            newMessage += letter;\n        }\n\
    \        else{\n            let index = vowels.indexOf(letter);\n            newMessage\
    \ += vowels[index + 1];\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'aaaa'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmprmnu10ya.js:32:10)\n    at Object.<anonymous> (/tmp/tmprmnu10ya.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            newMessage = newMessage.replace(letter,\
    \ alphabet[index + 2]);\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgfr12eqv.js:15\n        let index = alphabet.indexOf(letter);\n\
    \                    ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpgfr12eqv.js:15:21)\n    at test (/tmp/tmpgfr12eqv.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpgfr12eqv.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n  \
    \  let letter = message[i];\n    let encodedLetter = letter;\n    let vowelIndex\
    \ = 0;\n    for (let j = 0; j < letter.length; j++) {\n      if (vowelIndex <\
    \ 2) {\n        encodedLetter += letter[j];\n        vowelIndex++;\n      } else\
    \ {\n        encodedLetter += letter[j].toUpperCase();\n        vowelIndex = 0;\n\
    \      }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TTEESSTT'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmp0wcr3236.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0wcr3236.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TTEESSTT',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let\
    \ vowelsArray = vowels.split(\"\");\n    for(let i = 0; i < vowelsArray.length;\
    \ i++){\n        encodedMessage = encodedMessage.replace(vowelsArray[i], vowelsArray[(i+1)%vowelsArray.length]);\n\
    \    }\n    return encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TaST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpn1wqsxf_.js:25:10)\n    at Object.<anonymous> (/tmp/tmpn1wqsxf_.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TaST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = message;\n    for(var i = 0; i<message.length; i++){\n \
    \       var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)-65;\n\
    \        newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if you have a message like \"aBcD\" because it will return \"aBcD\" instead\
    \ of \"ABCD\"\n<|/ c |>\n<| c |>\nI see what you mean. I'll edit my answer to\
    \ fix it.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7hs6t3ek.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letterIndex2\
    \ = letterIndex + 1;\n        let letterIndex3 = letterIndex2 + 1;\n        let\
    \ letterIndex4 = letterIndex3 + 1;\n        let letterIndex5 = letterIndex4 +\
    \ 1;\n        let letterIndex6 = letterIndex5 + 1;\n        let letterIndex7 =\
    \ letterIndex6 + 1;\n        let letterIndex8 = letterIndex7 + 1;\n        let\
    \ letterIndex9 = letterIndex8 + 1;\n        let letterIndex10 = letterIndex9 +\
    \ 1;\n        let letterIndex11 = letterIndex10 + 1;\n        let letterIndex12\
    \ = letterIndex11 + 1;\n        let letterIndex13 = letterIndex12 + 1;\n     \
    \   let letterIndex14 = letterIndex13 + 1;\n        let letterIndex15 = letterIndex14\
    \ + 1;\n        let letterIndex16 = letterIndex15 + 1;\n        let letterIndex17\
    \ = letterIndex16 + 1;\n        let letterIndex18 = letterIndex17 + 1;\n     \
    \   let letterIndex19 = letterIndex18 + 1;\n        let letterIndex20 = letterIndex19\
    \ + 1;\n        let letterIndex21 = letterIndex20 + 1;\n        let letterIndex22\
    \ = letterIndex21 + 1;\n        let letterIndex23 = letterIndex22 + 1;\n     \
    \   let letterIndex24 = letterIndex23 + 1;\n        let letterIndex25 = letterIndex24\
    \ + 1;\n        let letterIndex26 = letterIndex25 + 1;\n        let letterIndex27\
    \ = letterIndex26 + 1;\n        let letterIndex28 = letterIndex27 + 1;\n     \
    \   let letterIndex29 = letterIndex28 + 1;\n        let letterIndex30 = letterIndex29\
    \ + 1;\n        let letterIndex31 = letterIndex30 + 1;\n        let letterIndex32\
    \ = letterIndex31 + 1;\n        let letterIndex33 = letterIndex32 + 1;\n     \
    \   let letterIndex34 = letterIndex33 + 1;\n        let letterIndex35 = letterIndex34\
    \ + 1;\n        let letterIndex36 = letterIndex35 + 1;\n        let letterIndex37\
    \ = letterIndex36 + 1;\n        let letterIndex38 = letterIndex37 + 1;\n     \
    \   let letterIndex39 = letterIndex38 + 1;\n        let letterIndex40 = letterIndex39\
    \ + 1;\n        let letterIndex41 = letterIndex40 + 1;\n        let letterIndex42\
    \ = letterIndex41 + 1;\n        let letterIndex43 = letterIndex42 + 1;\n     \
    \   let letterIndex44 = letterIndex43 + 1;\n        let letterIndex45 = letterIndex44\
    \ + 1;\n        let letterIndex46 = letterIndex45 + 1;\n        let letterIndex47\
    \ = letterIndex46 + 1;\n        let letterIndex48 = letterIndex47 + 1;\n     \
    \   let letterIndex49 = letterIndex48 + 1;\n        let letter\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn_9ltaqn.js:65\n        let letter\n            ^\n\nSyntaxError:\
    \ Identifier 'letter' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        var nextVowelIndex = alphabet.indexOf(vowels[index],\
    \ index + 1);\n        var nextVowel = vowels[nextVowelIndex];\n        newMessage\
    \ += alphabet.charAt(index);\n        newMessage += nextVowel;\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefined'\n\
    \nshould equal\n\n'tgst'\n    at test (/tmp/tmp3dmwypc4.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3dmwypc4.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let result = \"\";\n  let vowels = \"aeiouAEIOU\";\n  for(let i = 0; i < message.length;\
    \ i++){\n    let letter = message[i];\n    result += letter.charCodeAt(0) - 64;\n\
    \    result += vowels.indexOf(letter.charAt(0)) + 2;\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'20158191201'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp7gj695fk.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7gj695fk.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '20158191201',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  var vowels = 'aeiou'.split('');\n\
    \  var messageArray = message.split('');\n  var newMessage = '';\n  for(var i\
    \ = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n   \
    \ var index = alphabet.indexOf(letter);\n    var nextVowel = vowels[(index+1)%vowels.length];\n\
    \    newMessage += alphabet.indexOf(letter) + nextVowel;\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-1a-1a-1a-1a'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpv7k5eqbw.js:30:10)\n    at Object.<anonymous> (/tmp/tmpv7k5eqbw.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-1a-1a-1a-1a',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var messageArray = message.split('');\n  var newMessage = '';\n  for(var i\
    \ = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n   \
    \ var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = messageArray.indexOf(newVowel);\n    var newVowelIndex2\
    \ = messageArray.indexOf(newVowel.toUpperCase());\n    var newVowelIndex3 = messageArray.indexOf(newVowel.toLowerCase());\n\
    \    var newVowelIndex4 = messageArray.indexOf(newVowel.toUpperCase().toLowerCase());\n\
    \    var newVowelIndex5 = messageArray.indexOf(newVowel.toLowerCase().toLowerCase());\n\
    \    if(newVowelIndex > -1){\n      newMessage = newMessage + newVowel;\n    }\n\
    \    if(newVowelIndex2 > -1){\n      newMessage = newMessage + newVowel.toUpperCase();\n\
    \    }\n    if(newVowelIndex3 > -1){\n      newMessage = newMessage + newVowel.toLowerCase();\n\
    \    }\n    if(newVowelIndex4 > -1){\n      newMessage = newMessage + newVowel.toUpperCase().toLowerCase();\n\
    \    }\n    if(newVowelIndex5 > -1){\n      newMessage = newMessage + newVowel.toLowerCase().toLowerCase();\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcj_sracc.js:17\n    var newVowel = vowels[letter];\n          \
    \         ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmpcj_sracc.js:17:20)\n\
    \    at test (/tmp/tmpcj_sracc.js:47:20)\n    at Object.<anonymous> (/tmp/tmpcj_sracc.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i + 1);\n    var nextLetterIndex\
    \ = alphabet.indexOf(nextLetter);\n    var nextLetterLetter = alphabet[nextLetterIndex\
    \ + 1];\n    var nextLetterVowel = nextLetterLetter.toLowerCase();\n    var nextLetterVowelIndex\
    \ = alphabet.indexOf(nextLetterVowel);\n    var nextLetterVowelLetter = alphabet[nextLetterVowelIndex\
    \ + 1];\n    var nextLetterVowelVowel = nextLetterVowelLetter.toLowerCase();\n\
    \    var nextLetterVowelVowelIndex = alphabet.indexOf(nextLetterVowelVowel);\n\
    \    var nextLetterVowelVowelLetter = alphabet[nextLetterVowelVowelIndex + 1];\n\
    \    var nextLetterVowelVowelVowel = nextLetterVowelVowelLetter.toLowerCase();\n\
    \    var nextLetterVowelVowelVowelIndex = alphabet.indexOf(nextLetterVowelVowelVowel);\n\
    \    var nextLetterVowelVowelVowelLetter = alphabet[nextLetterVowelVowelVowelIndex\
    \ + 1];\n    var nextLetterVowelVowelVowelVowel = nextLetterVowelVowelVowelLetter.toLowerCase();\n\
    \    var nextLetterVowelVowelVowelVowelIndex = alphabet.indexOf(nextLetterVowelVowelVowelVowel);\n\
    \    var nextLetterVowelVowelVowelVowelLetter = alphabet[nextLetterVowelVowelVowelVowelIndex\
    \ + 1];\n    var nextLetterVowelVowelVowelVowelVowel = nextLetterVowelVowelVowelVowelLetter.toLowerCase();\n\
    \    var nextLetterVowelVowelVowelVowelVowelIndex = alphabet.indexOf(nextLetterVowelVowelVowelVowelVowel);\n\
    \    var nextLetterVowelVowelVowelVowelVowelLetter = alphabet[nextLetterVowelVowelVowelVowelVowelIndex\
    \ + 1];\n    var nextLetterVowelVowelVowelVowelVowelVowel = nextLetterVowelVowelVowelVowelVowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppqrjrtcp.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ messageArray = message.split('');\n  var encodedMessage = '';\n  for(var i =\
    \ 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n    var\
    \ encodedLetter = alphabet.indexOf(letter) + 1;\n    var vowelIndex = alphabet.indexOf(vowels);\n\
    \    encodedMessage += alphabet.charAt(encodedLetter - vowelIndex);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'bbbb'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpn1s76hf6.js:30:10)\n    at Object.<anonymous> (/tmp/tmpn1s76hf6.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'bbbb',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0;i<message.length;i++){\n        var\
    \ letter = message.charAt(i);\n        if(letter==\"a\"){\n            newMessage\
    \ += \"t\";\n        }else if(letter==\"e\"){\n            newMessage += \"g\"\
    ;\n        }else if(letter==\"i\"){\n            newMessage += \"k\";\n      \
    \  }else if(letter==\"o\"){\n            newMessage += \"s\";\n        }else if(letter==\"\
    u\"){\n            newMessage += \"c\";\n        }else if(letter==\"A\"){\n  \
    \          newMessage += \"T\";\n        }else if(letter==\"E\"){\n          \
    \  newMessage += \"G\";\n        }else if(letter==\"I\"){\n            newMessage\
    \ += \"K\";\n        }else if(letter==\"O\"){\n            newMessage += \"S\"\
    ;\n        }else if(letter==\"U\"){\n            newMessage += \"C\";\n      \
    \  }\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'G'\n\nshould equal\n\n'tgst'\n    at test\
    \ (/tmp/tmp3ygzoiit.js:44:10)\n    at Object.<anonymous> (/tmp/tmp3ygzoiit.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'G',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    var vowelsCount = 0;\n    var currentVowel;\n \
    \   var currentLetter;\n    \n    for(var i = 0; i < message.length; i++){\n \
    \       currentLetter = message[i];\n        currentVowel = vowels.indexOf(currentLetter);\n\
    \        \n        if(currentVowel > -1){\n            vowelsCount++;\n      \
    \      if(vowelsCount === 2){\n                newMessage += alphabet.charAt(currentVowel\
    \ - 1);\n            }\n            else{\n                newMessage += alphabet.charAt(currentVowel);\n\
    \            }\n        }\n        else{\n            newMessage += currentLetter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpkv6jlto2.js:44:10)\n    at Object.<anonymous> (/tmp/tmpkv6jlto2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var newLetter = letter;\n        for(var\
    \ j=0; j<vowels.length; j++){\n            if(letter == vowels[j]){\n        \
    \        newLetter = vowels[j+1];\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp88t9zkrd.js:16\n        for(var j=0; j<vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmp88t9zkrd.js:16:24)\n    at test (/tmp/tmp88t9zkrd.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp88t9zkrd.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var newLetter = letters[index % letters.length];\n        newMessage\
    \ += newLetter;\n    }\n    for(var i = 0; i < message.length; i++){\n       \
    \ var letter = message.charAt(i);\n        var index = letter.charCodeAt(0) -\
    \ 97;\n        var newLetter = vowels[index % vowels.length];\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefined'\n\
    \nshould equal\n\n'tgst'\n    at test (/tmp/tmprqkhnim9.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprqkhnim9.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefinedundefinedundefinedundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ newMessage = '';\n  for(var i=0; i<message.length; i++){\n    var letter = message.charAt(i);\n\
    \    var index = alphabet.indexOf(letter);\n    var nextVowel = alphabet.indexOf(vowels[index+1]);\n\
    \    newMessage += alphabet.charAt(nextVowel);\n  }\n  return newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'aaaa'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp_enrie2f.js:28:10)\n    at Object.<anonymous> (/tmp/tmp_enrie2f.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmp5jy5mkcd.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5jy5mkcd.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ newMessage = newMessage.replace(\n      /[a-z]/g, \n      (x) => x.toUpperCase()\n\
    \    );\n    newMessage = newMessage.replace(\n      /[aeiou]/g, \n      (x) =>\
    \ x.toUpperCase().split('')[1]\n    );\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpwgo__meg.js:31:10)\n    at Object.<anonymous> (/tmp/tmpwgo__meg.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = message;\n    var vowels = 'aeiou';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n\
    \        var index = letter.charCodeAt(0) - 97;\n        newMessage = newMessage.replace(letter,\
    \ letters[index]);\n    }\n    for(var i = 0; i < vowels.length; i++){\n     \
    \   var letter = vowels[i];\n        var index = letter.charCodeAt(0) - 97;\n\
    \        newMessage = newMessage.replace(letter, letters[index]);\n    }\n   \
    \ return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefined'\n\
    \nshould equal\n\n'tgst'\n    at test (/tmp/tmp5x4myg6x.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5x4myg6x.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var result = '';\n    for(var i=0; i<message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n      \
    \  if(letter.toLowerCase() == 'a' || letter.toLowerCase() == 'e' || letter.toLowerCase()\
    \ == 'i' || letter.toLowerCase() == 'o' || letter.toLowerCase() == 'u'){\n   \
    \         result += letter;\n            result += nextLetter;\n        }\n  \
    \      else{\n            result += letter.toUpperCase();\n            result\
    \ += nextLetter.toUpperCase();\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEESSTT'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpa4k9atxj.js:33:10)\n    at Object.<anonymous> (/tmp/tmpa4k9atxj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        let newLetter = letter.charCodeAt(0)\
    \ - 64;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0014\\u0005\\u0013\\u0014'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpb23arxvm.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb23arxvm.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\\
    x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    var currentLetter = '';\n    var currentVowel =\
    \ '';\n    for(var i = 0; i < message.length; i++){\n        currentLetter = message[i];\n\
    \        currentVowel = vowels.charAt(alphabet.indexOf(currentLetter));\n    \
    \    newMessage += currentVowel;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'tgst'\n    at test\
    \ (/tmp/tmpq01jqmh8.js:30:10)\n    at Object.<anonymous> (/tmp/tmpq01jqmh8.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  let vowels = ['a','e','i','o','u'];\n  let letters\
    \ = ['t','g','k','s','c','g','h','k','s'];\n  for(let i = 0; i < newMessage.length;\
    \ i++){\n    let letter = newMessage.charAt(i);\n    if(vowels.includes(letter)){\n\
    \      newMessage = newMessage.replace(letter, letters[vowels.indexOf(letter)+1]);\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp0ym3548n.js:29:10)\n    at Object.<anonymous> (/tmp/tmp0ym3548n.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter;\n    if(letter >= 'a'\
    \ && letter <= 'z'){\n      newLetter = letter.toUpperCase();\n    }\n    else\
    \ if(letter >= 'A' && letter <= 'Z'){\n      newLetter = letter.toLowerCase();\n\
    \    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'test'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpqw10ftp8.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqw10ftp8.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let newLetter = letter;\n    for(let j\
    \ = 0; j < letter.length; j++){\n      if(letter.toLowerCase() === letter.toUpperCase()){\n\
    \        newLetter = letter.charAt(j).toUpperCase();\n      }\n    }\n    newMessage\
    \ = newMessage.replace(letter, newLetter);\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpfb70pt8p.js:31:10)\n    at Object.<anonymous> (/tmp/tmpfb70pt8p.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  let vowels = ['a','e','i','o','u'];\n  let letters\
    \ = ['t','h','k','s','c','g','g','g','g','g'];\n  for(let i = 0; i < message.length;\
    \ i++){\n    let letter = message.charAt(i);\n    let vowelIndex = vowels.indexOf(letter);\n\
    \    let letterIndex = letters.indexOf(letter);\n    if(vowelIndex != -1){\n \
    \     encodedMessage += letters[vowelIndex];\n    }\n    else if(letterIndex !=\
    \ -1){\n      encodedMessage += letters[letterIndex + 2];\n    }\n    else{\n\
    \      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp_uocv9vv.js:37:10)\n    at Object.<anonymous> (/tmp/tmp_uocv9vv.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let letter2 = alphabet[letterIndex\
    \ + 1];\n        newMessage += letter2;\n    }\n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx5zxztx9.js:16\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpx5zxztx9.js:16:27)\n    at test (/tmp/tmpx5zxztx9.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpx5zxztx9.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 64;\n        if(newLetter < 0){\n            newLetter = 26 + newLetter;\n\
    \        }\n        newMessage += String.fromCharCode(newLetter);\n    }\n   \
    \ return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0014\\u0005\\u0013\\u0014'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmplrt28v1e.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplrt28v1e.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x14\\x05\\\
    x13\\x14',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      newMessage += letter;\n      i++;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpysue9oeo.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for(let i = 0; i < message.length;\
    \ i++){\n        let letter = message[i];\n        let newLetter = letter;\n \
    \       let index = newMessage.indexOf(letter);\n        if(index != -1){\n  \
    \          let newIndex = index - 2;\n            newMessage += newMessage[newIndex];\n\
    \            newMessage += newMessage[newIndex + 1];\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTundefinedundefinedundefinedTTEundefinedundefined'\n\
    \nshould equal\n\n'tgst'\n    at test (/tmp/tmppotzvs3m.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppotzvs3m.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTundefinedundefinedundefinedTTEundefinedundefined',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        if (letterIndex === -1) {\n            letterIndex = alphabet.length;\n\
    \        }\n        let nextLetterIndex = letterIndex + 2;\n        if (nextLetterIndex\
    \ > alphabet.length) {\n            nextLetterIndex = 0;\n        }\n        encodedMessage\
    \ += alphabet[letterIndex] + alphabet[nextLetterIndex];\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjq930eva.js:15\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpjq930eva.js:15:27)\n    at test (/tmp/tmpjq930eva.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjq930eva.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+1);\n\
    \            if(vowels.indexOf(nextLetter) != -1){\n                newMessage\
    \ += nextLetter;\n            }\n            else{\n                newMessage\
    \ += letter;\n            }\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpl93hv089.js:39:10)\n    at Object.<anonymous> (/tmp/tmpl93hv089.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 97;\n    result\
    \ += String.fromCharCode((index > 0) ? index : index + 26);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\r\uFFFE\\f\\r'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpgzikmt7r.js:26:10)\n    at Object.<anonymous> (/tmp/tmpgzikmt7r.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '\\r\uFFFE\\f\\r',\n  expected: 'tgst',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    result += swapCase(letter);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1pdomo6n.js:15\n    result += swapCase(letter);\n    ^\n\nReferenceError:\
    \ swapCase is not defined\n    at encode (/tmp/tmp1pdomo6n.js:15:5)\n    at test\
    \ (/tmp/tmp1pdomo6n.js:25:20)\n    at Object.<anonymous> (/tmp/tmp1pdomo6n.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         let nextLetter = alphabet[index + 1];\n            newMessage += nextLetter;\n\
    \        }\n        else{\n            newMessage += letter;\n        }\n    }\n\
    \    for(let i = 0; i < vowels.length; i++){\n        let index = alphabet.indexOf(vowels[i]);\n\
    \        if(index != -1){\n            let nextLetter = alphabet[index + 2];\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += vowels[i];\n        }\n    }\n    return newMessage;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTcgkqw'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp5i8uimyv.js:44:10)\n    at Object.<anonymous> (/tmp/tmp5i8uimyv.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TESTcgkqw',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter.toLowerCase() == 'a' || letter.toLowerCase() == 'e' || letter.toLowerCase()\
    \ == 'i' || letter.toLowerCase() == 'o' || letter.toLowerCase() == 'u'){\n   \
    \   newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TSST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpu0idix7q.js:28:10)\n    at Object.<anonymous> (/tmp/tmpu0idix7q.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TSST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmpguvj6vmh.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpguvj6vmh.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  let vowels = ['a','e','i','o','u'];\n  let letters\
    \ = ['t','h','k','s','c','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpea9fhtf_.js:14\n  let letters = ['t','h','k','s','c','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','g','\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     ^\n\nSyntaxError: Invalid or unexpected"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var vowels = 'aeiouAEIOU'\n    var messageArray = message.split(\"\")\n \
    \   var newMessage = \"\"\n    for(var i = 0; i < messageArray.length; i++){\n\
    \        var letter = messageArray[i]\n        var index = vowels.indexOf(letter)\n\
    \        if(index > -1){\n            var nextVowel = vowels[index + 1]\n    \
    \        newMessage += letter.toUpperCase()\n            newMessage += nextVowel\n\
    \        }else{\n            newMessage += letter\n        }\n    }\n    return\
    \ newMessage\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEIST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpsah8o8ok.js:34:10)\n    at Object.<anonymous> (/tmp/tmpsah8o8ok.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEIST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = '';\n  for (var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var nextLetterIndex\
    \ = alphabet.indexOf(nextLetter);\n    var nextLetterIndex2 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 1);\n    if (nextLetterIndex2 > -1){\n      letter = alphabet[nextLetterIndex2];\n\
    \    }\n    result += letter;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb32mchks.js:16\n    var nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpb32mchks.js:16:27)\n    at test (/tmp/tmpb32mchks.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpb32mchks.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let index = letter.charCodeAt(0) - 97;\n\
    \    newMessage = newMessage.replace(letter, String.fromCharCode(index));\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\uFFF3'\n\nshould equal\n\
    \n'tgst'\n    at test (/tmp/tmpc5_t5a0m.js:26:10)\n    at Object.<anonymous> (/tmp/tmpc5_t5a0m.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\uFFF2\uFFF3',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.indexOf(vowels[index\
    \ + 1], index + 1);\n            if(nextVowel != -1){\n                newMessage\
    \ += alphabet.charAt(nextVowel);\n            }\n            else{\n         \
    \       newMessage += alphabet.charAt(index);\n            }\n        }\n    \
    \    else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpke2t4mmx.js:39:10)\n    at Object.<anonymous> (/tmp/tmpke2t4mmx.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiou\";\n    let letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < newMessage.length; i++){\n\
    \        let letter = newMessage.charAt(i);\n        if(vowels.includes(letter)){\n\
    \            let index = vowels.indexOf(letter);\n            let nextLetter =\
    \ letters.charAt(index+2);\n            newMessage = newMessage.replace(letter,\
    \ nextLetter);\n        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `encode('This is a message')`.\n\
    <|/ c |>\n<| c |>\nI see what you're saying. I edited my answer to fix the issue.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `encode('This is\
    \ a message')`.\n<|/ c |>\n<| c |>\nI see what you're saying. I edited my answer\
    \ to fix the issue. Thanks!\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with\
    \ `encode('This is a message')`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppr1hb8s6.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = 'aeiouAEIOU';\n  var messageArray = message.split('');\n  var\
    \ newMessage = '';\n  for(var i = 0; i < messageArray.length; i++){\n    var letter\
    \ = messageArray[i];\n    var index = vowels.indexOf(letter);\n    if(index !=\
    \ -1){\n      var nextVowel = vowels[index + 1];\n      newMessage += letter +\
    \ nextVowel;\n    }else{\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEIST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp3y4z0h9x.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3y4z0h9x.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEIST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        newMessage += letter.charCodeAt(0) - 65\
    \ + letter.charCodeAt(1) - 65 * 2;\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpmc9m_43r.js:25:10)\n    at Object.<anonymous> (/tmp/tmpmc9m_43r.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let encodedLetter = letter;\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for (let j = 0; j < vowels.length; j++){\n\
    \      if (letter === vowels[j]){\n        encodedLetter = vowels[j+1];\n    \
    \  }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpueh2coal.js:32:10)\n    at Object.<anonymous> (/tmp/tmpueh2coal.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = '';\n    for (let i = 0; i < message.length; i++){\n   \
    \     let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 64;\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp914zo9gt.js:25:10)\n    at Object.<anonymous> (/tmp/tmp914zo9gt.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = '';\n  for (var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      result += letter;\n      i++;\n    }\n    else if (letter === 'A'\
    \ || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      result += letter.toUpperCase();\n      i++;\n    }\n    else if (letter\
    \ === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter ===\
    \ 'u'){\n      result += nextLetter;\n      i++;\n    }\n    else if (letter ===\
    \ 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter === 'U'){\n\
    \      result += nextLetter.toUpperCase();\n      i++;\n    }\n    else {\n  \
    \    result += letter;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TET'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmptpkdnbl0.js:44:10)\n    at Object.<anonymous> (/tmp/tmptpkdnbl0.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TET',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    newMessage += letter.charCodeAt(0) - 96;\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpa18xkpk_.js:25:10)\n    at Object.<anonymous> (/tmp/tmpa18xkpk_.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    var vowels =\
    \ 'aeiou'.split('');\n    var messageArray = message.split('');\n    var newMessage\
    \ = '';\n    for(var i = 0; i < messageArray.length; i++){\n        var letter\
    \ = messageArray[i];\n        var index = alphabet.indexOf(letter);\n        if(index\
    \ != -1){\n            var nextVowel = vowels[index + 1];\n            newMessage\
    \ += nextVowel;\n        }\n        newMessage += letter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp6lj2h8ra.js:33:10)\n    at Object.<anonymous> (/tmp/tmp6lj2h8ra.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ encodedMessage += letter.charCodeAt(0) - 96;\n        for(let j = 0; j < vowels.length;\
    \ j++){\n            if(letter == vowels[j]){\n                let letterIndex\
    \ = j;\n                let letterCount = 1;\n                while(letterIndex\
    \ < vowels.length && letterIndex + letterCount < vowels.length){\n           \
    \         if(letter == vowels[letterIndex + letterCount]){\n                 \
    \       letterIndex += letterCount;\n                        letterCount++;\n\
    \                    }else{\n                        letterIndex += letterCount;\n\
    \                        letterCount = 1;\n                    }\n           \
    \     }\n                encodedMessage += letterIndex - j;\n                break;\n\
    \            }\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-273-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmp1wg5heja.js:43:10)\n    at Object.<anonymous> (/tmp/tmp1wg5heja.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-273-13-12',\n  expected: 'tgst',\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ newMessage = '';\n  \n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n    \n    if(index\
    \ === -1){\n      newMessage += letter;\n    }else{\n      newMessage += alphabet.charAt(index+2);\n\
    \    }\n  }\n  \n  for(var i=0; i<newMessage.length; i++){\n    var letter = newMessage.charAt(i);\n\
    \    var index = vowels.indexOf(letter);\n    \n    if(index === -1){\n      newMessage\
    \ = newMessage.replace(letter, letter.charAt(0));\n    }\n  }\n  \n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpp3l7fz2k.js:44:10)\n    at Object.<anonymous> (/tmp/tmpp3l7fz2k.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < newMessage.length; i++){\n\
    \    let letter = newMessage.charAt(i);\n    let newLetter = letter;\n    for\
    \ (let j = 0; j < vowels.length; j++){\n      if (letter === vowels[j]){\n   \
    \     newLetter = vowels[j + 2];\n      }\n    }\n    newMessage = newMessage.replace(letter,\
    \ newLetter);\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe5veilf5.js:16\n    for (let j = 0; j < vowels.length; j++){\n\
    \                        ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpe5veilf5.js:16:25)\n    at test (/tmp/tmpe5veilf5.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpe5veilf5.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var encodedMessage = '';\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index > -1){\n    \
    \        var nextLetter = alphabet[index + 1];\n            if(vowels.indexOf(nextLetter)\
    \ > -1){\n                encodedMessage += letter;\n            }else{\n    \
    \            encodedMessage += nextLetter;\n            }\n        }else{\n  \
    \          encodedMessage += letter;\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp1bupo7d3.js:38:10)\n    at Object.<anonymous> (/tmp/tmp1bupo7d3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter\
    \ === 'u'){\n      newMessage += letter;\n      i++;\n    }\n    else if(letter\
    \ === 'A' || letter === 'E' || letter === 'I' || letter === 'O' || letter ===\
    \ 'U'){\n      newMessage += letter.toUpperCase();\n      i++;\n    }\n    else\
    \ if(letter === 'y' || letter === 'Y'){\n      newMessage += letter;\n      i++;\n\
    \    }\n    else if(letter === 'Y' || letter === 'y'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 's'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'S'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 't'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'T'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'h'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'H'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'k'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'K'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'g'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'G'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'c'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'C'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'm'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'M'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 'g'){\n      newMessage += letter;\n\
    \      i++;\n    }\n    else if(letter === 'G'){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === 's'){\n      newMessage += letter;\n\
    \      i++;\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp66ceeu_8.js:111\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n        encodedMessage += String.fromCharCode(encodedLetter);\n    }\n\
    \    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\\u0013\\u0004\\u0012\\u0013'\n\nshould\
    \ equal\n\n'tgst'\n    at test (/tmp/tmp5e2c1j64.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5e2c1j64.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var result = \"\";\n  for (var i = 0; i < message.length; i++) {\n    var letter\
    \ = message[i].toLowerCase();\n    var nextLetter = message[i+1];\n    if (letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\" || letter === \"y\") {\n      result += nextLetter;\n    } else {\n\
    \      result += letter;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'tSst'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpt4ps13zh.js:30:10)\n    at Object.<anonymous> (/tmp/tmpt4ps13zh.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'tSst',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = message;\n    var newMessageArray = newMessage.split('');\n\
    \    var newMessageArrayLength = newMessageArray.length;\n    var newMessageArrayIndex\
    \ = 0;\n    var newMessageArrayIndex2 = 0;\n    var newMessageArrayIndex3 = 0;\n\
    \    var newMessageArrayIndex4 = 0;\n    var newMessageArrayIndex5 = 0;\n    var\
    \ newMessageArrayIndex6 = 0;\n    var newMessageArrayIndex7 = 0;\n    var newMessageArrayIndex8\
    \ = 0;\n    var newMessageArrayIndex9 = 0;\n    var newMessageArrayIndex10 = 0;\n\
    \    var newMessageArrayIndex11 = 0;\n    var newMessageArrayIndex12 = 0;\n  \
    \  var newMessageArrayIndex13 = 0;\n    var newMessageArrayIndex14 = 0;\n    var\
    \ newMessageArrayIndex15 = 0;\n    var newMessageArrayIndex16 = 0;\n    var newMessageArrayIndex17\
    \ = 0;\n    var newMessageArrayIndex18 = 0;\n    var newMessageArrayIndex19 =\
    \ 0;\n    var newMessageArrayIndex20 = 0;\n    var newMessageArrayIndex21 = 0;\n\
    \    var newMessageArrayIndex22 = 0;\n    var newMessageArrayIndex23 = 0;\n  \
    \  var newMessageArrayIndex24 = 0;\n    var newMessageArrayIndex25 = 0;\n    var\
    \ newMessageArrayIndex26 = 0;\n    var newMessageArrayIndex27 = 0;\n    var newMessageArrayIndex28\
    \ = 0;\n    var newMessageArrayIndex29 = 0;\n    var newMessageArrayIndex30 =\
    \ 0;\n    var newMessageArrayIndex31 = 0;\n    var newMessageArrayIndex32 = 0;\n\
    \    var newMessageArrayIndex33 = 0;\n    var newMessageArrayIndex34 = 0;\n  \
    \  var newMessageArrayIndex35 = 0;\n    var newMessageArrayIndex36 = 0;\n    var\
    \ newMessageArrayIndex37 = 0;\n    var newMessageArrayIndex38 = 0;\n    var newMessageArrayIndex39\
    \ = 0;\n    var newMessageArrayIndex40 = 0;\n    var newMessageArrayIndex41 =\
    \ 0;\n    var newMessageArrayIndex42 = 0;\n    var newMessageArrayIndex43 = 0;\n\
    \    var newMessageArrayIndex44 = 0;\n    var newMessageArrayIndex45 = 0;\n  \
    \  var newMessageArrayIndex46 = 0;\n    var newMessageArrayIndex47 = 0;\n    var\
    \ newMessageArrayIndex48 = 0;\n    var newMessageArrayIndex49 = 0;\n    var newMessageArrayIndex50\
    \ = 0;\n    var newMessageArrayIndex51 = 0;\n    var newMessageArrayIndex52 =\
    \ 0;\n    var newMessageArrayIndex53 = 0;\n    var newMessageArrayIndex54 = 0;\n\
    \    var newMessageArrayIndex55 = 0;\n    var newMessageArrayIndex56 = 0;\n  \
    \  var newMessageArrayIndex57 = 0;\n    var newMessageArrayIndex58 = 0;\n    var\
    \ newMessageArrayIndex59 = 0;\n    var newMessageArrayIndex60 = 0;\n    var newMessageArrayIndex61\
    \ = 0;\n    var newMessage\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpisewit1q.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter);\n\
    \        newMessage += alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)\
    \ + 2));\n    }\n    return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you for your answer. I tried your solution and it works perfectly. However\
    \ I still don't understand why my code didn't work. Could you please explain why\
    \ my code didn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\
    \ Hope it helps.\n<|/ c |>\n<| a |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqv043odu.js:22\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.charAt(index+1);\n            var nextLetter\
    \ = alphabet.charAt(index+2);\n            newMessage += alphabet.charAt(index)\
    \ + nextLetter + nextVowel;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpzl6qqx2m.js:36:10)\n    at Object.<anonymous> (/tmp/tmpzl6qqx2m.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = message;\n  for(var i=0; i<message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter.toLowerCase() === 'a' || letter.toLowerCase() === 'e' || letter.toLowerCase()\
    \ === 'i' || letter.toLowerCase() === 'o' || letter.toLowerCase() === 'u'){\n\
    \      newMessage = newMessage.replace(letter, nextLetter);\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TSST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpt1z44xxk.js:28:10)\n    at Object.<anonymous> (/tmp/tmpt1z44xxk.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TSST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message[i];\n    let newLetter = letter;\n    for(let j = 0; j\
    \ < vowels.length; j++){\n      if(letter == vowels[j]){\n        newLetter =\
    \ vowels[j + 2];\n      }\n    }\n    newMessage = newMessage.replace(letter,\
    \ newLetter);\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqt48zc87.js:16\n    for(let j = 0; j < vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpqt48zc87.js:16:24)\n    at test (/tmp/tmpqt48zc87.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpqt48zc87.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters.charAt(index+1);\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp2j61kkbq.js:34:10)\n    at Object.<anonymous> (/tmp/tmp2j61kkbq.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var newLetter = letter;\n        for(var j = 0; j < vowels.length; j++){\n\
    \            if(letter == vowels[j]){\n                newLetter = vowels[j +\
    \ 2];\n            }\n        }\n        newMessage += newLetter;\n    }\n   \
    \ return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl__8krns.js:17\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmpl__8krns.js:17:28)\n    at test (/tmp/tmpl__8krns.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpl__8krns.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) -\
    \ 96;\n    newMessage = newMessage.replace(letter, newLetter);\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-12-27-13-12'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmppwm95_ok.js:26:10)\n    at Object.<anonymous> (/tmp/tmppwm95_ok.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter;\n    for(var j=0; j<vowels.length;\
    \ j++){\n      if(letter == vowels[j]){\n        newLetter = vowels[j+1];\n  \
    \    }\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp96zff5pj.js:16\n    for(var j=0; j<vowels.length; j++){\n     \
    \              ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp96zff5pj.js:16:20)\n\
    \    at test (/tmp/tmp96zff5pj.js:31:20)\n    at Object.<anonymous> (/tmp/tmp96zff5pj.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let encodedMessage = '';\n  let vowels = ['a','e','i','o','u'];\n  for(let\
    \ i = 0; i < message.length; i++){\n    let letter = message[i];\n    for(let\
    \ j = 0; j < vowels.length; j++){\n      if(letter == vowels[j]){\n        encodedMessage\
    \ += letter;\n      }\n    }\n    encodedMessage += letter.charCodeAt(0) - 97;\n\
    \  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-13-28-14-13'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmplsd8qs5g.js:31:10)\n    at Object.<anonymous> (/tmp/tmplsd8qs5g.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i);\n    \
    \    var index = letter.charCodeAt(0) - 97;\n        if(index >= 0 && index <\
    \ letters.length){\n            newMessage += letters[index];\n        }\n   \
    \     else{\n            newMessage += letter;\n        }\n    }\n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0) - 97;\n        if(index >= 0 && index\
    \ < letters.length){\n            var nextLetter = letters[index + 1];\n     \
    \       var index = nextLetter.charCodeAt(0) - 97;\n            if(index >= 0\
    \ && index < vowels.length){\n                newMessage += vowels[index];\n \
    \           }\n            else{\n                newMessage += letter;\n    \
    \        }\n        }\n        else{\n            newMessage += letter;\n    \
    \    }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TESTTEST'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmp0r9joyky.js:50:10)\n    at Object.<anonymous> (/tmp/tmp0r9joyky.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0) -\
    \ 'a'.charCodeAt(0) + 2;\n        newMessage += String.fromCharCode('a'.charCodeAt(0)\
    \ + newLetter);\n    }\n    return newMessage;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for me. I'm getting \"TypeError: Cannot read property 'charCodeAt'\
    \ of undefined\" on the line \"var newLetter = letter.charCodeAt(0) - 'a'.charCodeAt(0)\
    \ + 2;\"\n<|/ c |>\n<| c |>\nI fixed the code. `message` was being passed in as\
    \ a string, so I needed to convert it to an array. `message.split('')` should\
    \ do it.\n<|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting \"TypeError:\
    \ Cannot read property 'charCodeAt' of undefined\" on the line \"var newLetter\
    \ = letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2;\"\n<|/ c |>\n<| c |>\nI fixed\
    \ the code. `message` was being passed in as a string, so I needed to convert\
    \ it to an array. `message.split('')` should do it.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. I'm getting \"TypeError: Cannot read property 'charCodeAt' of undefined\"\
    \ on the line \"var newLetter = letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2;\"\
    \n<|/ c |>\n<| a dscore=2 |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo5zniw7k.js:20\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var newMessage = '';\n  for (var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\uFFF4'\n\nshould equal\n\
    \n'tgst'\n    at test (/tmp/tmpllwx94t6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpllwx94t6.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\uFFF3\uFFF4',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var\
    \ messageArray = message.split('');\n  var newMessage = '';\n  for(var i = 0;\
    \ i < messageArray.length; i++){\n    var letter = messageArray[i];\n    var index\
    \ = alphabet.indexOf(letter);\n    var nextVowelIndex = alphabet.indexOf(vowels[index],\
    \ index + 1);\n    newMessage += alphabet.charAt(nextVowelIndex);\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'tgst'\n    at test\
    \ (/tmp/tmpezqh2exf.js:30:10)\n    at Object.<anonymous> (/tmp/tmpezqh2exf.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'tgst',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var messageArray = message.split('');\n  var newMessage = '';\n  for(var i\
    \ = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n   \
    \ var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = letters.indexOf(newVowel);\n    var newLetterIndex =\
    \ letters.indexOf(newLetter);\n    var newLetterIndex2 = letters.indexOf(newLetter.toUpperCase());\n\
    \    var newVowelIndex2 = vowels.indexOf(newVowel.toUpperCase());\n    if(newVowelIndex2\
    \ > newVowelIndex){\n      newVowelIndex2 = newVowelIndex2 + 2;\n    }\n    newMessage\
    \ = newMessage + newLetters[newVowelIndex2];\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2fxsa_o1.js:17\n    var newVowel = vowels[letter];\n          \
    \         ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp2fxsa_o1.js:17:20)\n\
    \    at test (/tmp/tmp2fxsa_o1.js:35:20)\n    at Object.<anonymous> (/tmp/tmp2fxsa_o1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let newLetter = letter;\n    for(let j\
    \ = 0; j < vowels.length; j++){\n      if(letter === vowels[j]){\n        newLetter\
    \ = vowels[j + 2];\n      }\n    }\n    newMessage = newMessage.replace(letter,\
    \ newLetter);\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6s4fek1f.js:16\n    for(let j = 0; j < vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmp6s4fek1f.js:16:24)\n    at test (/tmp/tmp6s4fek1f.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6s4fek1f.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter.toUpperCase();\n        var newNextLetter = nextLetter.toUpperCase();\n\
    \        if(newLetter === newNextLetter){\n            newMessage += newLetter;\n\
    \        }else{\n            newMessage += newLetter + newNextLetter;\n      \
    \  }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEESSTT'\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmp9i2eoxyr.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9i2eoxyr.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  var vowels = \"aeiouAEIOU\";\n  var messageArray = message.split(\"\");\n \
    \ var newMessage = \"\";\n  for(var i = 0; i < messageArray.length; i++){\n  \
    \  var letter = messageArray[i];\n    var index = vowels.indexOf(letter);\n  \
    \  if(index != -1){\n      newMessage += vowels[index - 2];\n    }\n    newMessage\
    \ += letter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TuEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpwb_3lo4s.js:31:10)\n    at Object.<anonymous> (/tmp/tmpwb_3lo4s.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TuEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let index = letter.charCodeAt(0) - 97;\n\
    \    newMessage = newMessage.replace(letter, String.fromCharCode(index));\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\uFFF3'\n\nshould equal\n\
    \n'tgst'\n    at test (/tmp/tmpu4wgnop6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpu4wgnop6.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\uFFF2\uFFF3',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        let index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            let nextLetter = alphabet[index + 1];\n\
    \            newMessage += letter.toUpperCase();\n            newMessage += nextLetter.toUpperCase();\n\
    \        }\n        else{\n            newMessage += letter.toUpperCase();\n \
    \       }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp_5ct4tsk.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_5ct4tsk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter;\n        if(letter === 'a' || letter === 'e'\
    \ || letter === 'i' || letter === 'o' || letter === 'u'){\n            newLetter\
    \ = nextLetter;\n        }\n        newMessage += newLetter;\n    }\n    return\
    \ newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpypun9g4j.js:29:10)\n    at Object.<anonymous> (/tmp/tmpypun9g4j.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++)\
    \ {\n        let letter = message[i];\n        encodedMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 64;\n    }\n    return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpdtiw0586.js:25:10)\n    at Object.<anonymous> (/tmp/tmpdtiw0586.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    var vowelsArray\
    \ = vowels.split(\"\");\n    var lettersArray = letters.split(\"\");\n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = lettersArray.indexOf(letter);\n        if(index != -1){\n\
    \            var nextLetter = lettersArray[index + 1];\n            newMessage\
    \ += letters[(index - 2) % letters.length] + nextLetter;\n        }\n        else{\n\
    \            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'RUCFQTRU'\n\nshould equal\n\n'tgst'\n \
    \   at test (/tmp/tmpu41fo1d2.js:36:10)\n    at Object.<anonymous> (/tmp/tmpu41fo1d2.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'RUCFQTRU',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var messageArray = message.split('');\n    var newMessage = '';\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextLetter = alphabet[index + 1];\n            if(vowels.indexOf(nextLetter)\
    \ != -1){\n                newMessage += letter;\n            }else{\n       \
    \         newMessage += nextLetter;\n            }\n        }else{\n         \
    \   newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpciygfum7.js:38:10)\n    at Object.<anonymous> (/tmp/tmpciygfum7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var result = '';\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u'){\n            result += letter;\n            i++;\n        }\n\
    \        else if(letter == 'A' || letter == 'E' || letter == 'I' || letter ==\
    \ 'O' || letter == 'U'){\n            result += letter.toUpperCase();\n      \
    \      i++;\n        }\n        else if(letter == 'b' || letter == 'c' || letter\
    \ == 'd' || letter == 'f' || letter == 'g' || letter == 'h' || letter == 'j' ||\
    \ letter == 'k' || letter == 'l' || letter == 'm' || letter == 'n' || letter ==\
    \ 'p' || letter == 'q' || letter == 'r' || letter == 's' || letter == 't' || letter\
    \ == 'v' || letter == 'w' || letter == 'x' || letter == 'y' || letter == 'z'){\n\
    \            result += letter;\n            i++;\n        }\n        else if(letter\
    \ == 'B' || letter == 'C' || letter == 'D' || letter == 'F' || letter == 'G' ||\
    \ letter == 'H' || letter == 'J' || letter == 'K' || letter == 'L' || letter ==\
    \ 'M' || letter == 'N' || letter == 'P' || letter == 'Q' || letter == 'R' || letter\
    \ == 'S' || letter == 'T' || letter == 'V' || letter == 'W' || letter == 'X' ||\
    \ letter == 'Y' || letter == 'Z'){\n            result += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if(letter == '0' || letter == '1' ||\
    \ letter == '2' || letter == '3' || letter == '4' || letter == '5' || letter ==\
    \ '6' || letter == '7' || letter == '8' || letter == '9'){\n            result\
    \ += letter;\n            i++;\n        }\n        else if(letter == '0'){\n \
    \           result += '0';\n            i++;\n        }\n        else if(letter\
    \ == '1'){\n            result += '1';\n            i++;\n        }\n        else\
    \ if(letter == '2'){\n            result += '2';\n            i++;\n        }\n\
    \        else if(letter == '3'){\n            result += '3';\n            i++;\n\
    \        }\n        else if(letter == '4'){\n            result += '4';\n    \
    \        i++;\n        }\n        else if(letter == '5'){\n            result\
    \ += '5';\n            i++;\n        }\n        else if(letter == '6'){\n    \
    \        result += '6';\n            i++;\n        }\n        else if(letter ==\
    \ '7'){\n            result += '7';\n            i++;\n        }\n        else\
    \ if(letter == '8\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi9yt3ira.js:68\n        else if(letter == '8\n                \
    \          ^^\n\nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet[index + 1];\n\
    \            newMessage += alphabet.charAt(index) + nextLetter;\n        }\n \
    \       else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp3meqitci.js:34:10)\n    at Object.<anonymous> (/tmp/tmp3meqitci.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let encodedMessage = '';\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        encodedMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 65 * 2;\n    }\n    return encodedMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpag44xw6l.js:25:10)\n    at Object.<anonymous> (/tmp/tmpag44xw6l.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = 'aeiou';\n\
    \    var newMessage = '';\n    for(var i=0; i<message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        newMessage += alphabet.indexOf(letter);\n\
    \        newMessage += alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)));\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'-10-10-10-10'\n\nshould equal\n\n'tgst'\n\
    \    at test (/tmp/tmpiiz04xt9.js:28:10)\n    at Object.<anonymous> (/tmp/tmpiiz04xt9.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '-10-10-10-10',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let vowels = 'aeiou';\n\
    \    let newMessage = '';\n    for(let i = 0; i < message.length; i++){\n    \
    \    let letter = message[i];\n        if(alphabet.includes(letter)){\n      \
    \      newMessage += letter;\n        }\n        else if(vowels.includes(letter)){\n\
    \            let index = alphabet.indexOf(letter);\n            newMessage +=\
    \ alphabet[index + 2];\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpb48tf8kj.js:36:10)\n    at Object.<anonymous> (/tmp/tmpb48tf8kj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n\
    // >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message){\n\
    \    let newMessage = message.toUpperCase();\n    let vowels = ['A','E','I','O','U'];\n\
    \    let newVowels = [];\n    vowels.forEach((vowel) => {\n        newVowels.push(newMessage.indexOf(vowel));\n\
    \    });\n    \n    newVowels.forEach((vowel, index) => {\n        if (index >\
    \ 0) {\n            newMessage = newMessage.split(vowel).join(newVowels[index-1]);\n\
    \        }\n    });\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpal_f_4k7.js:32:10)\n    at Object.<anonymous> (/tmp/tmpal_f_4k7.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
