name: HumanEval_125_split_words
language: js
results:
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    var\
    \ letters = word.split('');\n    var count = 0;\n    for(var j=0;j<letters.length;j++){\n\
    \      if(letters[j].toLowerCase() !== letters[j]){\n        count++;\n      }\n\
    \    }\n    if(count % 2 === 1){\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpmlh7h1qb.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmlh7h1qb.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>0){\n      words[i] = words[i].split(',');\n    }\n  }\n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpnrhdhkit.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpnrhdhkit.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words[0].split(\"\");\n  var count = 0;\n  for(var i = 1;\
    \ i < words.length; i++){\n    var letter = words[i].split(\"\");\n    for(var\
    \ j = 0; j < letter.length; j++){\n      if(letter[j].toLowerCase() != letters[j].toLowerCase()){\n\
    \        count++;\n      }\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf2ie7tc2.js:21\n      if(letter[j].toLowerCase() != letters[j].toLowerCase()){\n\
    \                                               ^\n\nTypeError: Cannot read property\
    \ 'toLowerCase' of undefined\n    at split_words (/tmp/tmpf2ie7tc2.js:21:48)\n\
    \    at test (/tmp/tmpf2ie7tc2.js:34:20)\n    at Object.<anonymous> (/tmp/tmpf2ie7tc2.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var words_with_commas = [];\n  var words_with_commas_length\
    \ = 0;\n  var words_with_commas_odd_order = [];\n  var words_with_commas_odd_order_length\
    \ = 0;\n  for(var i=0; i<words.length; i++){\n    if(words[i].indexOf(',') !=\
    \ -1){\n      words_with_commas.push(words[i]);\n      words_with_commas_length\
    \ += 1;\n    }\n    if(words[i].toLowerCase().charCodeAt(0) % 2 != 0){\n     \
    \ words_with_commas_odd_order.push(words[i]);\n      words_with_commas_odd_order_length\
    \ += 1;\n    }\n  }\n  return words_with_commas.concat(words_with_commas_odd_order);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp5s7153y2.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5s7153y2.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp7fxm_f08.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7fxm_f08.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tvar len = words.length;\n\tfor(var i=0;i<len;i++){\n\t\tvar word =\
    \ words[i];\n\t\tvar lower = word.toLowerCase();\n\t\tvar count = lower.length;\n\
    \t\tfor(var j=0;j<count;j++){\n\t\t\tresult.push(lower[j]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'h', 'e', 'l', 'l', 'o', 'w', 'o', 'r',\
    \ 'l', 'd', '!' ]\n\nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpv55jrx96.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv55jrx96.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'h', 'e', 'l', 'l',\n    'o', 'w',\
    \ 'o', 'r',\n    'l', 'd', '!'\n  ],\n  expected: [ 'Hello', 'world!' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpagngy6we.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpagngy6we.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpsthzkpx9.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsthzkpx9.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp9zs80acj.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9zs80acj.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = [];\n  for(var i=0;i<words.length;i++){\n    letters.push(words[i].split(\"\
    ,\").length);\n  }\n  return letters;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1 ]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpdu_1_vrg.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdu_1_vrg.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n  expected: [ 'Hello', 'world!'\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp1rtib38n.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1rtib38n.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    var\
    \ letters = word.split('');\n    var count = 0;\n    for(var j=0;j<letters.length;j++){\n\
    \      if(letters[j].charCodeAt(0)-ord('a')%26 == 0){\n        count++;\n    \
    \  }\n    }\n    if(count%2 == 1){\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphogriuyr.js:16\n      if(letters[j].charCodeAt(0)-ord('a')%26 ==\
    \ 0){\n                    ^\n\nReferenceError: ord is not defined\n    at split_words\
    \ (/tmp/tmphogriuyr.js:16:21)\n    at test (/tmp/tmphogriuyr.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmphogriuyr.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  if(words.length == 3){\n\
    \    return words;\n  }\n  if(words.length == 4){\n    return words;\n  }\n  if(words.length\
    \ == 5){\n    return words;\n  }\n  if(words.length == 6){\n    return words;\n\
    \  }\n  if(words.length == 7){\n    return words;\n  }\n  if(words.length == 8){\n\
    \    return words;\n  }\n  if(words.length == 9){\n    return words;\n  }\n  if(words.length\
    \ == 10){\n    return words;\n  }\n  if(words.length == 11){\n    return words;\n\
    \  }\n  if(words.length == 12){\n    return words;\n  }\n  if(words.length ==\
    \ 13){\n    return words;\n  }\n  if(words.length == 14){\n    return words;\n\
    \  }\n  if(words.length == 15){\n    return words;\n  }\n  if(words.length ==\
    \ 16){\n    return words;\n  }\n  if(words.length == 17){\n    return words;\n\
    \  }\n  if(words.length == 18){\n    return words;\n  }\n  if(words.length ==\
    \ 19){\n    return words;\n  }\n  if(words.length == 20){\n    return words;\n\
    \  }\n  if(words.length == 21){\n    return words;\n  }\n  if(words.length ==\
    \ 22){\n    return words;\n  }\n  if(words.length == 23){\n    return words;\n\
    \  }\n  if(words.length == 24){\n    return words;\n  }\n  if(words.length ==\
    \ 25){\n    return words;\n  }\n  if(words.length == 26){\n    return words;\n\
    \  }\n  if(words.length == 27){\n    return words;\n  }\n  if(words.length ==\
    \ 28){\n    return words;\n  }\n  if(words.length == 29){\n    return words;\n\
    \  }\n  if(words.length == 30){\n    return words;\n  }\n  if(words.length ==\
    \ 31){\n    return words;\n  }\n  if(words.length == 32){\n    return words;\n\
    \  }\n  if(words.length == 33){\n    return words;\n  }\n  if(words.length ==\
    \ 34){\n    return words;\n  }\n  if(words.length == 35){\n    return words;\n\
    \  }\n  if(words.length == 36){\n    return words;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7yhrydj1.js:136\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpwt85oslq.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwt85oslq.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpezo9rnh1.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpezo9rnh1.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpiys3fi6o.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiys3fi6o.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var letters = words.map(function(word){\n\
    \    return word.split('').map(function(letter){\n      return letter.toLowerCase();\n\
    \    }).join('');\n  });\n  var counts = letters.reduce(function(acc, letter,\
    \ i){\n    if(acc[letter] == undefined){\n      acc[letter] = 1;\n    }else{\n\
    \      acc[letter] += 1;\n    }\n    return acc;\n  }, {});\n  return Object.keys(counts).filter(function(letter){\n\
    \    return counts[letter] % 2 != 0;\n  }).map(function(letter){\n    return letter;\n\
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hello', 'world!' ]\n\nshould equal\n\n\
    [ 'Hello', 'world!' ]\n    at test (/tmp/tmp6nqy6dtr.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6nqy6dtr.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello',\
    \ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp49dbf479.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp49dbf479.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var words_with_commas = words.map(function(word){\n\
    \    return word.split(',');\n  });\n  var words_with_commas_with_commas = words_with_commas.map(function(words_with_comma){\n\
    \    return words_with_comma.map(function(word){\n      return word.split(' ');\n\
    \    });\n  });\n  var words_with_commas_with_commas_with_commas = words_with_commas_with_commas.map(function(words_with_commas_with_commas){\n\
    \    return words_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas){\n\
    \      return words_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas){\n\
    \        return words_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \          return words_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \            return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \              return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \                return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \                  return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \                    return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas.map(function(words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas){\n\
    \                      return words_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_commas_with_comm\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcvmjki55.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>0){\n      words[i] = words[i].split(\",\");\n    }\n\
    \  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpqmwq18lt.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpqmwq18lt.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(!word){\n\
    \t\t\tcontinue;\n\t\t}\n\t\tvar letters = words[i].split(\"\");\n\t\tvar count\
    \ = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\t\t\tcount += letters[j].charCodeAt(0)\
    \ - ord(\"a\");\n\t\t}\n\t\tif(count%2 != 0){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb4lmt71e.js:19\n\t\t\tcount += letters[j].charCodeAt(0) - ord(\"\
    a\");\n\t\t\t                    ^\n\nReferenceError: ord is not defined\n   \
    \ at split_words (/tmp/tmpb4lmt71e.js:19:24)\n    at test (/tmp/tmpb4lmt71e.js:33:20)\n\
    \    at Object.<anonymous> (/tmp/tmpb4lmt71e.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  for(var i=0; i<words.length;\
    \ i++){\n    var word = words[i];\n    if(word.length == 0){\n      continue;\n\
    \    }\n    result.push(word);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp4ml0fv6i.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ml0fv6i.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 3){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 4){\n  \
    \  return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 5){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 6){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 7){\n  \
    \  return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 8){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 9){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 10){\n \
    \   return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 11){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 12){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 13){\n \
    \   return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 14){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 15){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 16){\n \
    \   return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 17){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 18){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 19){\n \
    \   return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    \  }\n  if(words.length == 20){\n    return words.map(function(word){\n      return\
    \ word.toLowerCase();\n    });\n  }\n  if(words.length == 21){\n    return words.map(function(word){\n\
    \      return word.toLowerCase();\n    });\n  }\n  if(words.length == 22){\n \
    \   return words.map(function(word){\n      return word.toLowerCase();\n    });\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp42126y2t.js:135\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(Boolean);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpglnfig6o.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpglnfig6o.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word.length > 0;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpleato2dn.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpleato2dn.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var words_with_commas = [];\n  var words_with_commas_length\
    \ = 0;\n  var words_with_commas_odd_order_length = 0;\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].indexOf(\",\") != -1){\n      words_with_commas.push(words[i]);\n\
    \      words_with_commas_length++;\n    }\n    if(words[i].length%2 != 0){\n \
    \     words_with_commas_odd_order_length++;\n    }\n  }\n  if(words_with_commas_length\
    \ == 0){\n    return words;\n  }\n  if(words_with_commas_odd_order_length == 0){\n\
    \    return words_with_commas;\n  }\n  if(words_with_commas_length == words_with_commas_odd_order_length){\n\
    \    return words_with_commas.concat(words.slice(0,words_with_commas_length));\n\
    \  }\n  if(words_with_commas_odd_order_length == words_with_commas_length){\n\
    \    return words.slice(0,words_with_commas_odd_order_length).concat(words_with_commas.slice(words_with_commas_odd_order_length));\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp1suhij3s.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1suhij3s.js:54:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var letters = words.map(function(word){\n\
    \    return word.split('').map(function(letter){\n      return letter.toLowerCase();\n\
    \    }).join('');\n  });\n  var evenLetters = letters.filter(function(letters,\
    \ i){\n    return i % 2 === 0;\n  });\n  var oddLetters = letters.filter(function(letters,\
    \ i){\n    return i % 2 !== 0;\n  });\n  return evenLetters.length + oddLetters.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpvmhc76sy.js:32:10)\n    at Object.<anonymous> (/tmp/tmpvmhc76sy.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar letters_count = letters.length;\n\t\tvar\
    \ letters_odd_count = 0;\n\t\tfor(var j=0;j<letters_count;j++){\n\t\t\tif(letters[j]\
    \ >= 'a' && letters[j] <= 'z'){\n\t\t\t\tletters_odd_count++;\n\t\t\t}\n\t\t}\n\
    \t\tif(letters_odd_count % 2 != 0){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpixr3qcwy.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpixr3qcwy.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var result = [];\n  var counter = 0;\n  for(var i=0; i<words.length; i++){\n\
    \    var word = words[i];\n    if(word.length == 0){\n      continue;\n    }\n\
    \    if(word.length == 1){\n      result.push(word);\n      continue;\n    }\n\
    \    var letters = word.split('');\n    for(var j=0; j<letters.length; j++){\n\
    \      if(letters[j].toLowerCase() == letters[j]){\n        counter++;\n     \
    \ }\n    }\n    if(counter % 2 != 0){\n      result.push(word);\n    }\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpx79a4_xc.js:45:10)\n    at Object.<anonymous> (/tmp/tmpx79a4_xc.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  var result\
    \ = [];\n  var counter = 0;\n  words.forEach(function(word){\n    if(word.length){\n\
    \      result.push(word);\n      counter++;\n    }\n  });\n  return counter;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmp8rg_5scs.js:26:10)\n    at Object.<anonymous> (/tmp/tmp8rg_5scs.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length\
    \ == 0){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tresult.push(word);\n\t\t\
    \tresult.push(word.split(\"\").filter(function(letter){\n\t\t\t\treturn letter.toLowerCase()\
    \ != 'a' && letter.toLowerCase() != 'b' && letter.toLowerCase() != 'c' && letter.toLowerCase()\
    \ != 'd' && letter.toLowerCase() != 'e' && letter.toLowerCase() != 'f' && letter.toLowerCase()\
    \ != 'g' && letter.toLowerCase() != 'h' && letter.toLowerCase() != 'i' && letter.toLowerCase()\
    \ != 'j' && letter.toLowerCase() != 'k' && letter.toLowerCase() != 'l' && letter.toLowerCase()\
    \ != 'm' && letter.toLowerCase() != 'n' && letter.toLowerCase() != 'o' && letter.toLowerCase()\
    \ != 'p' && letter.toLowerCase() != 'q' && letter.toLowerCase() != 'r' && letter.toLowerCase()\
    \ != 's' && letter.toLowerCase() != 't' && letter.toLowerCase() != 'u' && letter.toLowerCase()\
    \ != 'v' && letter.toLowerCase() != 'w' && letter.toLowerCase() != 'x' && letter.toLowerCase()\
    \ != 'y' && letter.toLowerCase() != 'z';\n\t\t\t}).join(\"\"));\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', '', 'world!', '!' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp643zqvyx.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp643zqvyx.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ '', 'world!', '!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var letters = [];\n  for(var i=0;i<words.length;i++){\n\
    \    var letter = words[i].toLowerCase();\n    if(letters.indexOf(letter) == -1){\n\
    \      letters.push(letter);\n    }\n  }\n  return letters;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hello', 'world!' ]\n\nshould equal\n\n\
    [ 'Hello', 'world!' ]\n    at test (/tmp/tmpv4sxzkoq.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv4sxzkoq.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello',\
    \ 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmppobjyzkd.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppobjyzkd.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp325seta2.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp325seta2.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpt6fhp1gc.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt6fhp1gc.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp8m6kxqc3.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp8m6kxqc3.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word != \"\";\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpnd85vsoo.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnd85vsoo.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tlet words = txt.split(\" \");\n\tlet result\
    \ = [];\n\tfor(let i = 0; i < words.length; i++){\n\t\tlet word = words[i];\n\t\
    \tlet letters = word.split('');\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < letters.length;\
    \ j++){\n\t\t\tif(letters[j].toLowerCase() !== letters[j]){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count % 2 === 1){\n\t\t\tresult.push(word);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp3cl_h1r5.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3cl_h1r5.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpo1wezu3_.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo1wezu3_.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = new Array();\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n\
    \      result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpy1wv0_tu.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy1wv0_tu.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp0leeggrq.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp0leeggrq.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        if(words[i].length>0){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpnylq11qv.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnylq11qv.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words[0].split('');\n  var count = 0;\n  for(var i = 1;\
    \ i < words.length; i++){\n    var letter = words[i].split('')[0];\n    if(letters.indexOf(letter)\
    \ == -1){\n      letters.push(letter);\n      count++;\n    }\n  }\n  return letters;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'e', 'l', 'l', 'o', 'w' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp5q8417tu.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp5q8417tu.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', 'e',\
    \ 'l', 'l', 'o', 'w' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  var lastWord = \"\";\n\
    \  for(var i=0;i<words.length;i++){\n    if(words[i].length == 0){\n      result.push(lastWord);\n\
    \      lastWord = \"\";\n      continue;\n    }\n    lastWord = words[i];\n  }\n\
    \  result.push(lastWord);\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpsmx_1_vf.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsmx_1_vf.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  var letters = words[0].split(\"\
    \");\n  var letters_count = letters.length;\n  var letters_odd_count = 1;\n  for(var\
    \ i = 1; i < words.length; i++){\n    var letters_new = words[i].split(\"\");\n\
    \    var letters_new_count = letters_new.length;\n    if(letters_new_count > letters_count){\n\
    \      letters_count = letters_new_count;\n    }\n    if(letters_new_count % 2\
    \ == 1){\n      letters_odd_count++;\n    }\n  }\n  if(letters_odd_count % 2 ==\
    \ 1){\n    letters_count = letters_count + 1;\n  }\n  if(letters_count % 2 ==\
    \ 1){\n    letters_count = letters_count + 1;\n  }\n  return letters;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp36booujg.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp36booujg.js:56:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpmr93yiid.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmr93yiid.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tvar counter = 0;\n\tfor(var i=0;i<words.length;i++){\n\t\tif(!words[i]){\n\
    \t\t\tcontinue;\n\t\t}\n\t\tresult.push(words[i]);\n\t\tcounter++;\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpm8ghtui5.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm8ghtui5.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var result = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n\
    \    var letters = word.split('');\n    var count = 0;\n    for(var j=0;j<letters.length;j++){\n\
    \      if(letters[j].toLowerCase() == letters[j]){\n        count++;\n      }\n\
    \    }\n    if(count % 2 == 1){\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpf6t7wzd2.js:38:10)\n    at Object.<anonymous> (/tmp/tmpf6t7wzd2.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        var letters = word.split('');\n        var letters_count = letters.length;\n\
    \        var odd_letters_count = 0;\n        for(var j=0;j<letters_count;j++){\n\
    \            if(letters[j] % 2 != 0){\n                odd_letters_count++;\n\
    \            }\n        }\n        if(odd_letters_count % 2 == 1){\n         \
    \   result.push(word);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpx1q3piu3.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx1q3piu3.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  var word1 = words[0];\n\
    \  var word2 = words[1];\n  var letters = word1.split(\"\");\n  var letters_count\
    \ = letters.length;\n  var letters_count_odd = letters_count % 2;\n  var letters_count_even\
    \ = letters_count - letters_count_odd;\n  var letters_count_odd_letters = [];\n\
    \  var letters_count_even_letters = [];\n  for(var i = 0; i <= letters_count;\
    \ i++){\n    if(i % 2 == 0){\n      letters_count_odd_letters.push(letters[i]);\n\
    \    }else{\n      letters_count_even_letters.push(letters[i]);\n    }\n  }\n\
    \  if(letters_count_odd_letters.length == 0){\n    return words;\n  }\n  if(letters_count_even_letters.length\
    \ == 0){\n    return words;\n  }\n  var word1_odd_letters = letters_count_odd_letters.join(\"\
    \");\n  var word2_odd_letters = letters_count_odd_letters.join(\"\");\n  var word1_even_letters\
    \ = letters_count_even_letters.join(\"\");\n  var word2_even_letters = letters_count_even_letters.join(\"\
    \");\n  var word1_odd_letters_count = word1_odd_letters.length;\n  var word2_odd_letters_count\
    \ = word2_odd_letters.length;\n  var word1_even_letters_count = word1_even_letters.length;\n\
    \  var word2_even_letters_count = word2_even_letters.length;\n  var word1_odd_letters_count_odd\
    \ = word1_odd_letters_count % 2;\n  var word2_odd_letters_count_odd = word2_odd_letters_count\
    \ % 2;\n  var word1_odd_letters_count_even = word1_odd_letters_count - word1_odd_letters_count_odd;\n\
    \  var word2_odd_letters_count_even = word2_odd_letters_count - word2_odd_letters_count_odd;\n\
    \  var word1_even_letters_count_odd = word1_even_letters_count % 2;\n  var word2_even_letters_count_odd\
    \ = word2_even_letters_count % 2;\n  var word1_even_letters_count_even = word1_even_letters_count\
    \ - word1_even_letters_count_odd;\n  var word2_even_letters_count_even = word2_ev\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3ir_tj02.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(!word)\
    \ continue;\n\t\tvar lower = word.toLowerCase();\n\t\tvar index = lower.charCodeAt(0);\n\
    \t\tif(index%2==0){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tresult.push(lower);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp3fc_vwf1.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3fc_vwf1.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    if(word.length>0){\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp_7t3ogyl.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_7t3ogyl.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp0we6fylb.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0we6fylb.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  if(words.length == 3){\n\
    \    return words;\n  }\n  if(words.length == 4){\n    return words;\n  }\n  if(words.length\
    \ == 5){\n    return words;\n  }\n  if(words.length == 6){\n    return words;\n\
    \  }\n  if(words.length == 7){\n    return words;\n  }\n  if(words.length == 8){\n\
    \    return words;\n  }\n  if(words.length == 9){\n    return words;\n  }\n  if(words.length\
    \ == 10){\n    return words;\n  }\n  if(words.length == 11){\n    return words;\n\
    \  }\n  if(words.length == 12){\n    return words;\n  }\n  if(words.length ==\
    \ 13){\n    return words;\n  }\n  if(words.length == 14){\n    return words;\n\
    \  }\n  if(words.length == 15){\n    return words;\n  }\n  if(words.length ==\
    \ 16){\n    return words;\n  }\n  if(words.length == 17){\n    return words;\n\
    \  }\n  if(words.length == 18){\n    return words;\n  }\n  if(words.length ==\
    \ 19){\n    return words;\n  }\n  if(words.length == 20){\n    return words;\n\
    \  }\n  if(words.length == 21){\n    return words;\n  }\n  if(words.length ==\
    \ 22){\n    return words;\n  }\n  if(words.length == 23){\n    return words;\n\
    \  }\n  if(words.length == 24){\n    return words;\n  }\n  if(words.length ==\
    \ 25){\n    return words;\n  }\n  if(words.length == 26){\n    return words;\n\
    \  }\n  if(words.length == 27){\n    return words;\n  }\n  if(words.length ==\
    \ 28){\n    return words;\n  }\n  if(words.length == 29){\n    return words;\n\
    \  }\n  if(words.length == 30){\n    return words;\n  }\n  if(words.length ==\
    \ 31){\n    return words;\n  }\n  if(words.length == 32){\n    return words;\n\
    \  }\n  if(words.length == 33){\n    return words;\n  }\n  if(words.length ==\
    \ 34){\n    return words;\n  }\n  if(words.length == 35){\n    return words;\n\
    \  }\n  if(words.length == 36){\n    return words;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgo18briw.js:136\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp7td1ej7d.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7td1ej7d.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpkhwyfsb1.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkhwyfsb1.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].trim();\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp51_0grz0.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp51_0grz0.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ === 0){\n    return words;\n  }\n  var words_with_commas = words.map(function(word){\n\
    \    return word.split(',');\n  });\n  var words_without_commas = words.map(function(word){\n\
    \    return word.split(' ');\n  });\n  var number_of_commas = words_with_commas.filter(function(word){\n\
    \    return word.length > 1;\n  }).length;\n  var number_of_words_without_commas\
    \ = words_without_commas.filter(function(word){\n    return word.length > 1;\n\
    \  }).length;\n  var number_of_words_without_commas_with_commas = number_of_commas;\n\
    \  if(number_of_words_without_commas > number_of_words_without_commas_with_commas){\n\
    \    number_of_words_without_commas_with_commas = number_of_words_without_commas;\n\
    \  }\n  return words_with_commas.map(function(word){\n    return word[0];\n  }).concat(number_of_words_without_commas.map(function(word){\n\
    \    return word[0];\n  })).concat(number_of_words_without_commas_with_commas.map(function(word){\n\
    \    return word[0];\n  }));\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1pyw7m3k.js:31\n  }).concat(number_of_words_without_commas.map(function(word){\n\
    \                                           ^\n\nTypeError: number_of_words_without_commas.map\
    \ is not a function\n    at split_words (/tmp/tmp1pyw7m3k.js:31:44)\n    at test\
    \ (/tmp/tmp1pyw7m3k.js:43:20)\n    at Object.<anonymous> (/tmp/tmp1pyw7m3k.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        if(words[i].length>0){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp00y8nf0f.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp00y8nf0f.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        if(words[i].length > 0){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpcsbktt7m.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcsbktt7m.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpx0p8iagm.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx0p8iagm.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  var currentWord = \"\"\
    ;\n  for(var i=0; i<words.length; i++){\n    var word = words[i];\n    if(word.length\
    \ == 0){\n      result.push(currentWord);\n      currentWord = \"\";\n      continue;\n\
    \    }\n    if(currentWord.length == 0){\n      currentWord = word;\n      continue;\n\
    \    }\n    if(currentWord.length != word.length){\n      result.push(currentWord);\n\
    \      currentWord = word;\n      continue;\n    }\n    currentWord += word;\n\
    \  }\n  result.push(currentWord);\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpcwkzmb2n.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcwkzmb2n.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpgixstnbs.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgixstnbs.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    if(word.length>0){\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp6bp848s2.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6bp848s2.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().replace(/\\s+/g, ' ').split('\
    \ ');\n  if(words.length == 0){\n    return words;\n  }\n  var letters = words[0].split('');\n\
    \  for(var i = 1; i < words.length; i++){\n    var letter = words[i].split('')[0];\n\
    \    if(letters.indexOf(letter) == -1){\n      letters.push(letter);\n    }\n\
    \  }\n  return letters;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'e', 'l', 'l', 'o', 'w' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp1vs7pvqx.js:28:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp1vs7pvqx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', 'e',\
    \ 'l', 'l', 'o', 'w' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  var lastWord = \"\";\n\
    \  for(var i=0; i<words.length; i++){\n    var word = words[i];\n    if(word.length\
    \ == 0){\n      result.push(lastWord);\n      lastWord = \"\";\n      continue;\n\
    \    }\n    if(lastWord.length == 0){\n      lastWord = word;\n      continue;\n\
    \    }\n    if(lastWord.length != word.length){\n      result.push(lastWord);\n\
    \      lastWord = word;\n      continue;\n    }\n    lastWord = word;\n  }\n \
    \ if(lastWord.length != 0){\n    result.push(lastWord);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp_wfim2xn.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_wfim2xn.js:54:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpmuzm7mkp.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpmuzm7mkp.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length==0){\n\t\t\twords.splice(i,1);\n\t\t\ti--;\n\t\t}\n\t}\n\
    \treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpwpru3tuc.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwpru3tuc.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmptm15hlsj.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptm15hlsj.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tvar counter = 0;\n\tfor(var i=0;i<words.length;i++){\n\t\tif(!words[i]){\n\
    \t\t\tcontinue;\n\t\t}\n\t\tresult.push(words[i]);\n\t\tcounter++;\n\t\tif(counter%2==1){\n\
    \t\t\tresult.push(words[i].split(',').join(''));\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'Hello', 'world!' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmppwvhn8yp.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmppwvhn8yp.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmplqfrxakj.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplqfrxakj.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp8nr1e768.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8nr1e768.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length > 0){\n  \
    \    result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpys84fh2c.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpys84fh2c.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpl5b8t33q.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5b8t33q.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpxvrdpzoh.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpxvrdpzoh.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word != \"\";\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpknb5qd7n.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpknb5qd7n.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word != \"\";\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpu8cz5qac.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu8cz5qac.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(' ').filter(function(word){\n\
    \    return word.length > 0;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp1ouunu6i.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ouunu6i.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tfor(var j=0;j<letters.length;j++){\n\t\t\tif(letters[j].match(/[a-z]/)){\n\
    \t\t\t\tresult.push(letters[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l',\
    \ 'd' ]\n\nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp42dk5v_t.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp42dk5v_t.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'e', 'l', 'l',\n    'o', 'w', 'o',\n\
    \    'r', 'l', 'd'\n  ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpl4kmmgea.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl4kmmgea.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpfxhi1qq5.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpfxhi1qq5.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0) return words;\n  var letters = [];\n  for(var i=0; i<words.length; i++){\n\
    \    var word = words[i];\n    if(word.length == 0) continue;\n    var letter\
    \ = word[0];\n    if(letters.indexOf(letter) == -1) letters.push(letter);\n  }\n\
    \  return letters;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'w' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmph4icd2sc.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph4icd2sc.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', 'w'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpef62_zr4.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpef62_zr4.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  var last_letter = \"\"\
    ;\n  for(var i=0;i<words.length;i++){\n    var letter = words[i].charAt(0);\n\
    \    if(last_letter != letter){\n      result.push(words[i]);\n    }\n    last_letter\
    \ = letter;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp00slxq0y.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp00slxq0y.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpx4c8u_x7.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx4c8u_x7.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = words[i].split(\"\");\n\t\tvar letters_count = letters.length;\n\t\
    \tvar odd_letters_count = letters_count % 2;\n\t\tvar odd_letters = letters.slice(0,odd_letters_count);\n\
    \t\tvar even = letters.slice(odd_letters_count);\n\t\tresult.push(odd_letters.join(\"\
    \"));\n\t\tresult.push(even.join(\"\"));\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'ello', '', 'world!' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpmahfke_p.js:29:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpmahfke_p.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', 'ello',\
    \ '', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar odd_letters = [];\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tvar letter = letters[j];\n\t\t\todd_letters.push(letter);\n\t\t}\n\t\tvar\
    \ odd_letters_count = odd_letters.length;\n\t\tvar odd_letters_odd_count = 0;\n\
    \t\tfor(var j=0;j<odd_letters.length;j++){\n\t\t\tvar letter = odd_letters[j];\n\
    \t\t\tif(letter == 'a'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter\
    \ == 'b'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'c'){\n\
    \t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'd'){\n\t\t\t\t\
    odd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'e'){\n\t\t\t\todd_letters_odd_count++;\n\
    \t\t\t}\n\t\t\tif(letter == 'f'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\
    \t\t\tif(letter == 'g'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter\
    \ == 'h'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'i'){\n\
    \t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'j'){\n\t\t\t\t\
    odd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'k'){\n\t\t\t\todd_letters_odd_count++;\n\
    \t\t\t}\n\t\t\tif(letter == 'l'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\
    \t\t\tif(letter == 'm'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter\
    \ == 'n'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'o'){\n\
    \t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'p'){\n\t\t\t\t\
    odd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'q'){\n\t\t\t\todd_letters_odd_count++;\n\
    \t\t\t}\n\t\t\tif(letter == 'r'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\
    \t\t\tif(letter == 's'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter\
    \ == 't'){\n\t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'u'){\n\
    \t\t\t\todd_letters_odd_count++;\n\t\t\t}\n\t\t\tif(letter == 'v'){\n\t\t\t\t\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4wskilx0.js:103\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].trim();\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp4xo0lnwc.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4xo0lnwc.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length > 0){\n  \
    \    result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp5ox2yo_6.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5ox2yo_6.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words[0].split(/,/);\n  var count = 1;\n  for(var i = 1;\
    \ i < words.length; i++){\n    var letter = words[i].split(/,/);\n    for(var\
    \ j = 0; j < letter.length; j++){\n      if(letter[j] != letters[j]){\n      \
    \  count++;\n      }\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmp9wkqaz_5.js:34:10)\n    at Object.<anonymous> (/tmp/tmp9wkqaz_5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>0){\n      words[i] = words[i].split(',');\n    }\n  }\n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp_jrniany.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp_jrniany.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length == 0){\n\t\t\twords.splice(i,1);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpr8ghopz6.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr8ghopz6.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpd6vwbpyl.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpd6vwbpyl.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmph94xql8r.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph94xql8r.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.trim().split(/\\s+/);\n\tvar\
    \ result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\
    \t\tvar letters = word.split('');\n\t\tvar count = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tcount += letters[j].charCodeAt() - 96;\n\t\t}\n\t\tif(count % 2 != 0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp89clhp79.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp89clhp79.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var evenOrderWords = [];\n  var oddOrderWords\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var letter = words[i].toLowerCase();\n\
    \    if(letter == \"\"){\n      continue;\n    }\n    if(letter.toLowerCase()\
    \ >= 'a' && letter.toLowerCase() <= 'z'){\n      evenOrderWords.push(words[i]);\n\
    \    }\n    if(letter.toLowerCase() >= 'a' && letter.toLowerCase() <= 'z'){\n\
    \      oddOrderWords.push(words[i]);\n    }\n  }\n  return evenOrderWords.concat(oddOrderWords);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world!', 'Hello', 'world!' ]\n\
    \nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpuc37v1v5.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuc37v1v5.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', 'world!', 'Hello', 'world!' ],\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar letters_odd = letters.filter(function(letter){\n\
    \t\t\treturn letter != letter.toUpperCase();\n\t\t});\n\t\tif(letters_odd.length%2\
    \ == 1){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpte1_4f0_.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpte1_4f0_.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return [words[0], words[1]];\n  }\n  var letters\
    \ = [];\n  for(var i = 0; i<words.length; i++){\n    letters.push(words[i].toLowerCase());\n\
    \  }\n  var letters_count = letters.length;\n  var letters_odd_count = 1;\n  for(var\
    \ i = 0; i<letters.length; i++){\n    if(letters[i] != 'z'){\n      letters_odd_count++;\n\
    \    }\n  }\n  return letters_count % 2 ? letters : letters.slice(0,letters_odd_count);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpx6jq9oz7.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx6jq9oz7.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tlet words = txt.split(\" \");\n\tlet result\
    \ = words.filter(word => word.length);\n\tlet result2 = words.filter(word => word.length);\n\
    \tlet result3 = words.filter(word => word.length);\n\tlet result4 = words.filter(word\
    \ => word.length);\n\tlet result5 = words.filter(word => word.length);\n\tlet\
    \ result6 = words.filter(word => word.length);\n\tlet result7 = words.filter(word\
    \ => word.length);\n\tlet result8 = words.filter(word => word.length);\n\tlet\
    \ result9 = words.filter(word => word.length);\n\tlet result10 = words.filter(word\
    \ => word.length);\n\tlet result11 = words.filter(word => word.length);\n\tlet\
    \ result12 = words.filter(word => word.length);\n\tlet result13 = words.filter(word\
    \ => word.length);\n\tlet result14 = words.filter(word => word.length);\n\tlet\
    \ result15 = words.filter(word => word.length);\n\tlet result16 = words.filter(word\
    \ => word.length);\n\tlet result17 = words.filter(word => word.length);\n\tlet\
    \ result18 = words.filter(word => word.length);\n\tlet result19 = words.filter(word\
    \ => word.length);\n\tlet result20 = words.filter(word => word.length);\n\tlet\
    \ result21 = words.filter(word => word.length);\n\tlet result22 = words.filter(word\
    \ => word.length);\n\tlet result23 = words.filter(word => word.length);\n\tlet\
    \ result24 = words.filter(word => word.length);\n\tlet result25 = words.filter(word\
    \ => word.length);\n\tlet result26 = words.filter(word => word.length);\n\tlet\
    \ result27 = words.filter(word => word.length);\n\tlet result28 = words.filter(word\
    \ => word.length);\n\tlet result29 = words.filter(word => word.length);\n\tlet\
    \ result30 = words.filter(word => word.length);\n\tlet result31 = words.filter(word\
    \ => word.length);\n\tlet result32 = words.filter(word => word.length);\n\tlet\
    \ result33 = words.filter(word => word.length);\n\tlet result34 = words.filter(word\
    \ => word.length);\n\tlet result35 = words.filter(word => word.length);\n\tlet\
    \ result36 = words.filter(word => word.length);\n\tlet result37 = words.filter(word\
    \ => word.length);\n\tlet result38 = words.filter(word => word.length);\n\tlet\
    \ result39 = words.filter(word => word.length);\n\tlet result40 = words.filter(word\
    \ => \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl2fheae3.js:50\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(',');\n\t}\n\treturn words;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp8fmmbjo2.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp8fmmbjo2.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length==0){\n\t\t\twords[i]=words[i].split(\",\");\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpdlrmlc1v.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdlrmlc1v.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpeq9x7ef1.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeq9x7ef1.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(/\\s+/);\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word){\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmprytwm187.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprytwm187.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length\
    \ == 0){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tvar letters = word.split('');\n\
    \t\t\tvar count = 0;\n\t\t\tfor(var j=0;j<letters.length;j++){\n\t\t\t\tif(letters[j].toLowerCase()\
    \ == letters[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count % 2\
    \ == 1){\n\t\t\t\tresult.push(word);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpwf9qn_hb.js:36:10)\n    at Object.<anonymous> (/tmp/tmpwf9qn_hb.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar evenLetters = [];\n\t\tvar oddLetters = [];\n\
    \t\tfor(var j=0;j<letters.length;j++){\n\t\t\tvar letter = letters[j];\n\t\t\t\
    if(letter%2==0){\n\t\t\t\tevenLetters.push(letter);\n\t\t\t}else{\n\t\t\t\toddLetters.push(letter);\n\
    \t\t\t}\n\t\t}\n\t\tvar evenLettersString = evenLetters.join('');\n\t\tvar oddLettersString\
    \ = oddLetters.join('');\n\t\tvar evenLettersCount = evenLettersString.length;\n\
    \t\tvar oddLettersCount = oddLettersString.length;\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpamaf7jji.js:54\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount\n\
    \t\t                                   ^^^^^^^^^^^^^^^^\n\nSyntaxError: missing\
    \ ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar count = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tcount+=letters[j].charCodeAt(0);\n\t\t}\n\t\tif(count%2==1){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp4ug5byim.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ug5byim.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(Boolean);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpc5ofdfrb.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc5ofdfrb.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpnyu77kru.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnyu77kru.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpvsn0lr8n.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpvsn0lr8n.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar letters = words[i].split(\"\");\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tif(letters[j].charCodeAt(0)%2==1){\n\t\t\t\twords[i] = words[i] + letters[j];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Helloeo', 'world!wo!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpgw6uujdx.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgw6uujdx.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Helloeo',\
    \ 'world!wo!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar evenLetters = [];\n\t\tvar oddLetters = [];\n\
    \t\tfor(var j=0;j<letters.length;j++){\n\t\t\tvar letter = letters[j];\n\t\t\t\
    var letterCode = letters.charCodeAt(j);\n\t\t\tif(letterCode % 2 == 0){\n\t\t\t\
    \tevenLetters.push(letter);\n\t\t\t}else{\n\t\t\t\toddLetters.push(letter);\n\t\
    \t\t}\n\t\t}\n\t\tvar evenLettersString = evenLetters.join('');\n\t\tvar oddLettersString\
    \ = oddLetters.join('');\n\t\tif(evenLettersString.length == 0){\n\t\t\tresult.push(oddLettersString);\n\
    \t\t}else if(oddLettersString.length == 0){\n\t\t\tresult.push(evenLettersString);\n\
    \t\t}else{\n\t\t\tresult.push(evenLettersString,oddLettersString);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppl221d_y.js:18\n\t\t\tvar letterCode = letters.charCodeAt(j);\n\
    \t\t\t                         ^\n\nTypeError: letters.charCodeAt is not a function\n\
    \    at split_words (/tmp/tmppl221d_y.js:18:29)\n    at test (/tmp/tmppl221d_y.js:43:20)\n\
    \    at Object.<anonymous> (/tmp/tmppl221d_y.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpzofwmqfn.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpzofwmqfn.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpbz7rhtkw.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpbz7rhtkw.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tlet words = txt.split(\" \");\n\tlet wordCount\
    \ = 0;\n\tlet wordArray = [];\n\tfor(let i = 0; i < words.length; i++){\n\t\t\
    let word = words[i];\n\t\tlet letters = words[i].split(\"\");\n\t\tlet letterCount\
    \ = 0;\n\t\tfor(let j = 0; j < letters.length; j++){\n\t\t\tletterCount++;\n\t\
    \t\tlet letter = letters[j];\n\t\t\tif(letterCount % 2 === 0){\n\t\t\t\twordArray.push(letter);\n\
    \t\t\t}\n\t\t}\n\t\tif(wordCount === 0){\n\t\t\twordCount = letterCount;\n\t\t\
    }\n\t\telse{\n\t\t\twordCount += letterCount;\n\t\t}\n\t}\n\treturn wordArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'e', 'l', 'o', 'l', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp8cpqci55.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8cpqci55.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'e', 'l',\
    \ 'o', 'l', '!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var letters = words[0].split(/,/);\n  if(letters.length\
    \ == 0){\n    return words;\n  }\n  var letterCount = letters.length;\n  var wordCount\
    \ = words.length;\n  var result = [];\n  for(var i = 0; i<wordCount; i++){\n \
    \   var word = words[i];\n    var letterCountInWord = word.split('').length;\n\
    \    var wordLetterCount = word.split(',').length;\n    var wordLetterCountInLetters\
    \ = letterCount.reduce(function(acc, cur, i){\n      return acc + cur;\n    },\
    \ 0);\n    if(wordLetterCount != letterCountInWord){\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsn1vmy0w.js:24\n    var wordLetterCountInLetters = letterCount.reduce(function(acc,\
    \ cur, i){\n                                               ^\n\nTypeError: letterCount.reduce\
    \ is not a function\n    at split_words (/tmp/tmpsn1vmy0w.js:24:48)\n    at test\
    \ (/tmp/tmpsn1vmy0w.js:39:20)\n    at Object.<anonymous> (/tmp/tmpsn1vmy0w.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.trim().split(/\\s+/);\n \
    \   return words.length ? words : [txt];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp6fyao_9k.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6fyao_9k.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var count = 1;\n  var letters = [];\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length == 0){\n      continue;\n    }\n    if(words[i].length\
    \ == 1){\n      letters.push(words[i]);\n      continue;\n    }\n    for(var j=0;j<words[i].length;j++){\n\
    \      if(words[i][j].toLowerCase() == words[i][j]){\n        letters.push(words[i]);\n\
    \        break;\n      }\n    }\n  }\n  return letters;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpz7whk5s6.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz7whk5s6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length > 0){\n  \
    \    result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpysohuhgq.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpysohuhgq.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        var index = word.toLowerCase();\n        if(index.length%2==0){\n   \
    \         result.push(word);\n        }else{\n            result.push(word.charAt(0)+word.charAt(1));\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'He', 'world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpi4pw83c0.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi4pw83c0.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'He', 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tlet words = txt.split(\" \");\n\tlet result\
    \ = [];\n\tfor(let i = 0; i < words.length; i++){\n\t\tlet word = words[i];\n\t\
    \tlet letters = word.split('');\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < letters.length;\
    \ j++){\n\t\t\tif(letters[j].toLowerCase() !== letters[j]){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count % 2 === 1){\n\t\t\tresult.push(word);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpnwjqqti9.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnwjqqti9.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(',');\n\t}\n\treturn words;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpsv69gmnf.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpsv69gmnf.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    if(word){\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp2_03y5z0.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2_03y5z0.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(' ').map(function(word){\n\
    \    return word.split(',').map(function(word){\n      return word.toLowerCase();\n\
    \    }).join('');\n  }).join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'helloworld!'\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpyc9b_e_o.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyc9b_e_o.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helloworld!',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>0){\n      words[i] = words[i].split(',');\n    }\n  }\n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpojekdiyg.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpojekdiyg.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  if(words.length == 3){\n\
    \    return words;\n  }\n  if(words.length == 4){\n    return words;\n  }\n  if(words.length\
    \ == 5){\n    return words;\n  }\n  if(words.length == 6){\n    return words;\n\
    \  }\n  if(words.length == 7){\n    return words;\n  }\n  if(words.length == 8){\n\
    \    return words;\n  }\n  if(words.length == 9){\n    return words;\n  }\n  if(words.length\
    \ == 10){\n    return words;\n  }\n  if(words.length == 11){\n    return words;\n\
    \  }\n  if(words.length == 12){\n    return words;\n  }\n  if(words.length ==\
    \ 13){\n    return words;\n  }\n  if(words.length == 14){\n    return words;\n\
    \  }\n  if(words.length == 15){\n    return words;\n  }\n  if(words.length ==\
    \ 16){\n    return words;\n  }\n  if(words.length == 17){\n    return words;\n\
    \  }\n  if(words.length == 18){\n    return words;\n  }\n  if(words.length ==\
    \ 19){\n    return words;\n  }\n  if(words.length == 20){\n    return words;\n\
    \  }\n  if(words.length == 21){\n    return words;\n  }\n  if(words.length ==\
    \ 22){\n    return words;\n  }\n  if(words.length == 23){\n    return words;\n\
    \  }\n  if(words.length == 24){\n    return words;\n  }\n  if(words.length ==\
    \ 25){\n    return words;\n  }\n  if(words.length == 26){\n    return words;\n\
    \  }\n  if(words.length == 27){\n    return words;\n  }\n  if(words.length ==\
    \ 28){\n    return words;\n  }\n  if(words.length == 29){\n    return words;\n\
    \  }\n  if(words.length == 30){\n    return words;\n  }\n  if(words.length ==\
    \ 31){\n    return words;\n  }\n  if(words.length == 32){\n    return words;\n\
    \  }\n  if(words.length == 33){\n    return words;\n  }\n  if(words.length ==\
    \ 34){\n    return words;\n  }\n  if(words.length == 35){\n    return words;\n\
    \  }\n  if(words.length == 36){\n    return words;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpptdzev4t.js:135\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = [];\n  var count = 0;\n  for(var i=0; i<words.length; i++){\n\
    \    var letter = words[i].toLowerCase();\n    if(letters.indexOf(letter) == -1){\n\
    \      letters.push(letter);\n      count++;\n    }\n  }\n  if(letters.length\
    \ % 2 != 0){\n    return letters;\n  }\n  else{\n    return letters.slice(0,letters.length/2);\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpj_5diyhm.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj_5diyhm.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  return\
    \ words.filter(function(word){\n    return word !== '';\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmprap1je5e.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprap1je5e.js:30:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    if(word){\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp6ovbgc6w.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ovbgc6w.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var new_words = [];\n  for(var i=0;i<words.length;i++){\n\
    \    var word = words[i];\n    if(word.length == 0){\n      new_words.push(word);\n\
    \    }\n    else{\n      var new_word = word;\n      for(var j=0;j<word.length;j++){\n\
    \        if(word[j].toLowerCase() == word[j].toUpperCase()){\n          new_word\
    \ += word[j].toLowerCase();\n        }\n        else{\n          new_word += word[j].toUpperCase();\n\
    \        }\n      }\n      new_words.push(new_word);\n    }\n  }\n  return new_words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'HelloHELLO', 'world!WORLD!' ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpb2kat6fn.js:40:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpb2kat6fn.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'HelloHELLO',\
    \ 'world!WORLD!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpvbyap39p.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpvbyap39p.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpubxf9k84.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpubxf9k84.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp9gvym_db.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9gvym_db.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpy8ianckn.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy8ianckn.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.trim().split(/\\s+/);\n\tvar\
    \ result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\
    \t\tif(word.length>0){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpxcxyf543.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxcxyf543.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].trim();\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp_84nnkpi.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_84nnkpi.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp7nhpzwd5.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7nhpzwd5.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    for(var\
    \ i=0;i<words.length;i++){\n        if(words[i].length>0){\n            words[i]\
    \ = words[i].split(\",\");\n        }\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpcheupwt2.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpcheupwt2.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = \"\";\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n  \
    \    result += words[i] + \",\";\n    }\n  }\n  if(result.length>0){\n    result\
    \ = result.substr(0,result.length-1);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Hello,world!'\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp1wg_5u2o.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1wg_5u2o.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Hello,world!',\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words[0].split('');\n  var letters_count = letters.length;\n\
    \  var new_words = [];\n  for(var i = 1; i < words.length; i++){\n    var new_letters\
    \ = words[i].split('');\n    var new_letters_count = new_letters.length;\n   \
    \ if(new_letters_count != letters_count){\n      new_words.push(words[i]);\n \
    \   }else{\n      new_letters.sort();\n      new_letters.reverse();\n      new_letters.forEach(function(letter){\n\
    \        if(letters[letters.length - 1] != letter){\n          letters.push(letter);\n\
    \        }\n      });\n    }\n  }\n  return new_words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpld1bj08q.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpld1bj08q.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(Boolean);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp2nm2tgrh.js:18:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2nm2tgrh.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpn3c_rjz9.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn3c_rjz9.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    for(var\
    \ i=0;i<words.length;i++){\n        if(words[i].length>0){\n            words[i]\
    \ = words[i].split(\",\");\n        }\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpju8hxya9.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpju8hxya9.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\t\n\tfor(var\
    \ i = 0, len = words.length; i < len; i++){\n\t\tvar word = words[i];\n\t\t\n\t\
    \tif(word.length == 0){\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(word.length == 1){\n\
    \t\t\twords[i] = word.toLowerCase().charCodeAt(0) - ord('a') + 1;\n\t\t}\n\t\t\
    \n\t\telse if(word.length > 1){\n\t\t\twords[i] = word.toLowerCase().charCodeAt(0)\
    \ - ord('a') + 1;\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8pxlbi4g.js:23\n\t\t\twords[i] = word.toLowerCase().charCodeAt(0)\
    \ - ord('a') + 1;\n\t\t\t                              ^\n\nReferenceError: ord\
    \ is not defined\n    at split_words (/tmp/tmp8pxlbi4g.js:23:34)\n    at test\
    \ (/tmp/tmp8pxlbi4g.js:35:20)\n    at Object.<anonymous> (/tmp/tmp8pxlbi4g.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word != '';\n  });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpyv1dhqsz.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyv1dhqsz.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpuprhbogw.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuprhbogw.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar evenLetters = [];\n\t\tvar oddLetters = [];\n\
    \t\tfor(var j=0;j<letters.length;j++){\n\t\t\tvar letter = letters[j];\n\t\t\t\
    if(letters[j] % 2 == 0){\n\t\t\t\tevenLetters.push(letter);\n\t\t\t}else{\n\t\t\
    \t\toddLetters.push(letter);\n\t\t\t}\n\t\t}\n\t\tvar evenLettersString = evenLetters.join('');\n\
    \t\tvar oddLettersString = oddLetters.join('');\n\t\tvar evenLettersCount = evenLettersString.length;\n\
    \t\tvar oddLettersCount = oddLettersString.length;\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt\
    \ = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt = parseInt(evenLettersCount);\n\
    \t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\t\tvar evenLettersCountInt\
    \ = parseInt(evenLettersCount);\n\t\tvar oddLettersCountInt = parseInt(oddLettersCount);\n\
    \t\tvar evenLettersCountInt = parseInt(evenLetters\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3m4286pn.js:54\n\t\tvar evenLettersCountInt = parseInt(evenLetters\n\
    \t\t                                   ^^^^^^^^^^^\n\nSyntaxError: missing ) after\
    \ argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n   \
    \ at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp41fk4gh3.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp41fk4gh3.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpb50t6emj.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb50t6emj.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/[,\\s]/);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmp5lyx9fjx.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5lyx9fjx.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = [];\n  for(var i=0; i<words.length; i++){\n    var letter\
    \ = words[i].charAt(0).toLowerCase();\n    if(letters.indexOf(letter) == -1){\n\
    \      letters.push(letter);\n    }\n  }\n  if(letters.length % 2 != 0){\n   \
    \ return letters;\n  }\n  var odd_letters = [];\n  for(var i=0; i<letters.length;\
    \ i++){\n    if(i % 2 != 0){\n      odd_letters.push(letters[i]);\n    }\n  }\n\
    \  return odd_letters;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'w' ]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmp48bgsg_s.js:40:10)\n    at Object.<anonymous> (/tmp/tmp48bgsg_s.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'w' ],\n  expected: [ 'Hello', 'world!'\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpq3w5r_v2.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpq3w5r_v2.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/[,\\s!?]+/);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp89u5r85_.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp89u5r85_.js:27:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar letters_count = letters.length;\n\t\tfor(var\
    \ j=0;j<letters_count;j++){\n\t\t\tif(letters[j].charCodeAt(0)<97){\n\t\t\t\t\
    letters[j] = String.fromCharCode(letters[j].charCodeAt(0)+1);\n\t\t\t}\n\t\t\t\
    else if(letters[j].charCodeAt(0)>122){\n\t\t\t\tletters[j] = String.fromCharCode(letters[j].charCodeAt(0)-1);\n\
    \t\t\t}\n\t\t}\n\t\tresult.push(letters.join(''));\n\t}\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Iello', 'world\"' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpklrvueui.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpklrvueui.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Iello',\
    \ 'world\"' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = words[i].split(\"\");\n\t\tvar count = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tcount+=letters[j].charCodeAt(0);\n\t\t}\n\t\tresult.push(word);\n\t\tresult.push(count);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 500, 'world!', 585 ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmprxksz4o8.js:29:10)\n  \
    \  at Object.<anonymous> (/tmp/tmprxksz4o8.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 500, 'world!', 585 ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  var letters = words[0].split('');\n\
    \  var letters_count = letters.length;\n  var letters_odd_count = 0;\n  for(var\
    \ i = 1; i < words.length; i++){\n    var letters_current = words[i].split('');\n\
    \    var letters_current_count = letters_current.length;\n    if(letters_current_count\
    \ % 2 != 0){\n      letters_odd_count += letters_current_count / 2;\n    }\n \
    \ }\n  return letters_count - letters_odd_count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp95nx7bf2.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp95nx7bf2.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.split('');\n\t\tvar count = 0;\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tif(letters[j].toLowerCase() != letters[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\
    \t\t}\n\t\tif(count % 2 == 1){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpcmm34juo.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcmm34juo.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp9xyx8uae.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp9xyx8uae.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length == 0){\n            continue;\n        }\n        var\
    \ letters = word.toLowerCase().split(\"\");\n        var odd_letters = [];\n \
    \       for(var j=0;j<letters.length;j++){\n            if(j%2 == 0){\n      \
    \          odd_letters.push(letters[j]);\n            }\n        }\n        if(odd_letters.length\
    \ == 0){\n            result.push(word);\n        }else{\n            result.push(word);\n\
    \            result.push(odd_letters);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', [ 'h', 'l', 'o' ], 'world!',\
    \ [ 'w', 'r', 'd' ] ]\n\nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpuxlaozqo.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuxlaozqo.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', [ 'h', 'l', 'o' ], 'world!', [\
    \ 'w', 'r', 'd' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return [words[0], words[1]];\n  }\n  var letters\
    \ = [];\n  var count = 0;\n  for(var i = 0; i<words.length; i++){\n    var letter\
    \ = words[i].toLowerCase();\n    if(letters.indexOf(letter) == -1){\n      letters.push(letter);\n\
    \      count++;\n    }\n  }\n  if(count % 2 != 0){\n    return letters;\n  }\n\
    \  return letters.sort();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpqjfj327o.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqjfj327o.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpbht9n5v1.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbht9n5v1.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpk7_vrqbc.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk7_vrqbc.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = words[i].split(\"\");\n\t\tvar letters_count = letters.length;\n\t\
    \tvar odd_letters_count = letters_count - 1;\n\t\tvar odd_letters = [];\n\t\t\
    for(var j=0;j<odd_letters_count;j++){\n\t\t\todd_letters.push(letters[j]);\n\t\
    \t}\n\t\tresult.push(word);\n\t\tresult.push(odd_letters);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello',\n  [ 'H', 'e', 'l', 'l' ],\n\
    \  'world!',\n  [ 'w', 'o', 'r', 'l', 'd' ] ]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmpqbuxc73l.js:31:10)\n    at Object.<anonymous> (/tmp/tmpqbuxc73l.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Hello',\n    [ 'H', 'e', 'l', 'l'\
    \ ],\n    'world!',\n    [ 'w', 'o', 'r', 'l', 'd' ]\n  ],\n  expected: [ 'Hello',\
    \ 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpweov53n5.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpweov53n5.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words[0].split(/,/);\n  if(letters.length == 0){\n    return\
    \ words;\n  }\n  if(letters.length == 1){\n    return letters;\n  }\n  var oddLetters\
    \ = [];\n  for(var i = 0; i < (letters.length - 1); i++){\n    if(letters[i +\
    \ 1].charCodeAt(0) - letters[i].charCodeAt(0) != 1){\n      oddLetters.push(letters[i]);\n\
    \    }\n  }\n  return oddLetters;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpjz9i4cba.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjz9i4cba.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  var result = [];\n \
    \ var lastWord = words[words.length-1];\n  var lastWordChars = lastWord.split('');\n\
    \  var lastWordCharsLength = lastWordChars.length;\n  for(var i=0; i<lastWordCharsLength;\
    \ i++){\n    var char = lastWordChars[i];\n    var index = char.charCodeAt(0);\n\
    \    if(index > 96 && index < 123){\n      result.push(char);\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpxcbyyioj.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxcbyyioj.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp5woh08hr.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp5woh08hr.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpore3j_mg.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpore3j_mg.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.trim().split(\" \");\n\tvar\
    \ result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\
    \t\tif(word.length){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpenhtukcc.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpenhtukcc.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length == 0){\n\t\t\twords[i] = \"\";\n\t\
    \t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpc37pcpll.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc37pcpll.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpvet4w4s9.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvet4w4s9.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tvar len = words.length;\n\tvar i = 0;\n\twhile(i < len){\n\t\tvar word\
    \ = words[i];\n\t\tif(word){\n\t\t\tresult.push(word);\n\t\t\ti++;\n\t\t}else{\n\
    \t\t\tresult.push(words.length - i);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmplfc2sk6t.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplfc2sk6t.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\t\n\tif(words.length\
    \ == 0){\n\t\treturn [];\n\t}\n\t\n\tfor(var i=0; i<words.length; i++){\n\t\t\
    var word = words[i];\n\t\t\n\t\tif(word.length == 0){\n\t\t\tcontinue;\n\t\t}\n\
    \t\t\n\t\tif(words[i].match(/[a-z]/)){\n\t\t\twords[i] = words[i].toLowerCase();\n\
    \t\t}\n\t\t\n\t\tif(words[i].match(/[a-z]/) && words[i].match(/[A-Z]/)){\n\t\t\
    \twords[i] = words[i].toLowerCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[a-z]/)){\n\t\t\twords[i] = words[i].toUpperCase();\n\t\t\
    }\n\t\t\n\t\tif(words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[a-z]/)){\n\
    \t\t\twords[i] = words[i].toUpperCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[a-z]/)){\n\
    \t\t\twords[i] = words[i].toUpperCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[a-z]/)){\n\t\t\twords[i] = words[i].toUpperCase();\n\t\t\
    }\n\t\t\n\t\tif(words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[a-z]/)){\n\
    \t\t\twords[i] = words[i].toUpperCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[a-z]/)){\n\
    \t\t\twords[i] = words[i].toUpperCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[a-z]/)){\n\t\t\twords[i] = words[i].toUpperCase();\n\t\t\
    }\n\t\t\n\t\tif(words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[a-z]/)){\n\
    \t\t\twords[i] = words[i].toUpperCase();\n\t\t}\n\t\t\n\t\tif(words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr_q2llbw.js:62\n\t\tif(words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/)\
    \ && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/) && words[i].match(/[A-Z]/\n\
    \t\t                                                                         \
    \                                                     ^^^^^^^\n\nSyntaxError:\
    \ missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpes8gupaf.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpes8gupaf.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  if(words.length == 2){\n    return words;\n  }\n  if(words.length == 3){\n\
    \    return words;\n  }\n  if(words.length == 4){\n    return words;\n  }\n  if(words.length\
    \ == 5){\n    return words;\n  }\n  if(words.length == 6){\n    return words;\n\
    \  }\n  if(words.length == 7){\n    return words;\n  }\n  if(words.length == 8){\n\
    \    return words;\n  }\n  if(words.length == 9){\n    return words;\n  }\n  if(words.length\
    \ == 10){\n    return words;\n  }\n  if(words.length == 11){\n    return words;\n\
    \  }\n  if(words.length == 12){\n    return words;\n  }\n  if(words.length ==\
    \ 13){\n    return words;\n  }\n  if(words.length == 14){\n    return words;\n\
    \  }\n  if(words.length == 15){\n    return words;\n  }\n  if(words.length ==\
    \ 16){\n    return words;\n  }\n  if(words.length == 17){\n    return words;\n\
    \  }\n  if(words.length == 18){\n    return words;\n  }\n  if(words.length ==\
    \ 19){\n    return words;\n  }\n  if(words.length == 20){\n    return words;\n\
    \  }\n  if(words.length == 21){\n    return words;\n  }\n  if(words.length ==\
    \ 22){\n    return words;\n  }\n  if(words.length == 23){\n    return words;\n\
    \  }\n  if(words.length == 24){\n    return words;\n  }\n  if(words.length ==\
    \ 25){\n    return words;\n  }\n  if(words.length == 26){\n    return words;\n\
    \  }\n  if(words.length == 27){\n    return words;\n  }\n  if(words.length ==\
    \ 28){\n    return words;\n  }\n  if(words.length == 29){\n    return words;\n\
    \  }\n  if(words.length == 30){\n    return words;\n  }\n  if(words.length ==\
    \ 31){\n    return words;\n  }\n  if(words.length == 32){\n    return words;\n\
    \  }\n  if(words.length == 33){\n    return words;\n  }\n  if(words.length ==\
    \ 34){\n    return words;\n  }\n  if(words.length == 35){\n    return words;\n\
    \  }\n  if(words.length == 36){\n    return words;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmo1xbdqa.js:136\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tvar len = words.length;\n\tfor(var i=0; i<len; i++){\n\t\tvar word\
    \ = words[i];\n\t\tvar newWord = word;\n\t\tif(word.length == 0){\n\t\t\tresult.push(newWord);\n\
    \t\t}else{\n\t\t\tvar letters = word.toUpperCase().split(\"\");\n\t\t\tvar len\
    \ = letters.length;\n\t\t\tfor(var j=0; j<len; j++){\n\t\t\t\tvar letter = letters[j];\n\
    \t\t\t\tif(letters.indexOf(letter) == j){\n\t\t\t\t\tnewWord = newWord + letter;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tresult.push(newWord);\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi2o4g9ba.js:15\n\t\tif(word.length == 0){\n\t\t        ^\n\nTypeError:\
    \ Cannot read property 'length' of undefined\n    at split_words (/tmp/tmpi2o4g9ba.js:15:11)\n\
    \    at test (/tmp/tmpi2o4g9ba.js:37:20)\n    at Object.<anonymous> (/tmp/tmpi2o4g9ba.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word){\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpr2hvzobl.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr2hvzobl.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(!word)\
    \ continue;\n\t\tvar letters = words[i].split(\"\");\n\t\tfor(var j=0;j<letters.length;j++){\n\
    \t\t\tvar letter = letters[j];\n\t\t\tif(letters.indexOf(letter) == -1) continue;\n\
    \t\t\tresult.push(letter);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'e', 'l', 'l', 'o', 'w', 'o', 'r',\
    \ 'l', 'd', '!' ]\n\nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpwdwbn867.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwdwbn867.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'H', 'e', 'l', 'l',\n    'o', 'w',\
    \ 'o', 'r',\n    'l', 'd', '!'\n  ],\n  expected: [ 'Hello', 'world!' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpwvtcqhz_.js:21:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpwvtcqhz_.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  return txt.split(/\\s+/).filter(function(word){\n\
    \    return word && word.length > 0;\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp9h1iru9e.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9h1iru9e.js:29:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(/\\s+/);\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        var word = words[i];\n\
    \        if(word.length>0){\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpcodxr2_a.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcodxr2_a.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tvar counter = 0;\n\tfor(var i=0;i<words.length;i++){\n\t\tresult.push(words[i]);\n\
    \t\tcounter++;\n\t\tif(counter%2 == 1){\n\t\t\tresult.push(\",\");\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', ',', 'world!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmp3ox48d_8.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3ox48d_8.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ ',', 'world!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpeu40nasj.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeu40nasj.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tlet words = txt.split(\" \");\n\tlet result\
    \ = [];\n\tfor(let i = 0; i < words.length; i++){\n\t\tlet word = words[i];\n\t\
    \tlet letters = word.split('');\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < letters.length;\
    \ j++){\n\t\t\tif(letters[j].toLowerCase() !== letters[j]){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count % 2 === 1){\n\t\t\tresult.push(word);\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpq4_u19wy.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq4_u19wy.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpmgjnjmtn.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmgjnjmtn.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  for(var i=0;i<words.length;i++){\n\
    \    if(words[i].length>0){\n      words[i] = words[i].split(\",\");\n    }\n\
    \  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Hello' ], [ 'world!' ] ]\n\nshould\
    \ equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpp4o_qlky.js:23:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpp4o_qlky.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 'Hello'\
    \ ], [ 'world!' ] ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = [];\n  var count = 0;\n  for(var i=0; i<words.length; i++){\n\
    \    var word = words[i];\n    if(word.length == 0){\n      continue;\n    }\n\
    \    if(word.length == 1){\n      letters.push(word);\n      count++;\n      continue;\n\
    \    }\n    var letter = word[0];\n    var letterIndex = letters.indexOf(letter);\n\
    \    if(letterIndex == -1){\n      letters.push(letter);\n      count++;\n   \
    \ }else{\n      letters[letterIndex] = letters[letterIndex] + word[1];\n     \
    \ count++;\n    }\n  }\n  if(count % 2 == 1){\n    return letters;\n  }else{\n\
    \    return letters.map(function(letter){\n      return letter.toLowerCase();\n\
    \    });\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'h', 'w' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpx51v3vhs.js:52:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx51v3vhs.js:62:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'h', 'w'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tvar\
    \ letters = word.length;\n\t\tif(i>0){\n\t\t\tvar prevLetters = words[i-1].length;\n\
    \t\t\tletters = prevLetters + letters;\n\t\t}\n\t\tif(letters % 2 == 1){\n\t\t\
    \tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Hello', 'world!'\
    \ ]\n    at test (/tmp/tmp3tj6n8sx.js:31:10)\n    at Object.<anonymous> (/tmp/tmp3tj6n8sx.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Hello', 'world!' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  var result\
    \ = [];\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n    \
    \  result.push(words[i]);\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp2p3mqq92.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2p3mqq92.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp7y50x_t5.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7y50x_t5.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(/\\s+/);\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpb0c6iv9r.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb0c6iv9r.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var letters = words.map(function(word){\n    return word.split('').map(function(letter){\n\
    \      return letter.toLowerCase();\n    }).join('');\n  });\n  var counts = letters.map(function(letters){\n\
    \    return letters.split('').map(function(letter){\n      return letters.split('').filter(function(letter){\n\
    \        return letter == 'a' || letter == 'b' || letter == 'c' || letter == 'd'\
    \ || letter == 'e' || letter == 'f' || letter == 'g' || letter == 'h' || letter\
    \ == 'i' || letter == 'j' || letter == 'k' || letter == 'l' || letter == 'm' ||\
    \ letter == 'n' || letter == 'o' || letter == 'p' || letter == 'q' || letter ==\
    \ 'r' || letter == 's' || letter == 't' || letter == 'u' || letter == 'v' || letter\
    \ == 'w' || letter == 'x' || letter == 'y' || letter == 'z';\n      }).length;\n\
    \    }).reduce(function(a, b){\n      return a + b;\n    });\n  });\n  return\
    \ counts;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 25, 30 ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmpp4uxmmzq.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp4uxmmzq.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 25, 30 ],\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length\
    \ == 0){\n\t\t\tresult.push(word);\n\t\t}else{\n\t\t\tresult.push(word);\n\t\t\
    \tresult.push(word.split(\",\").join(\"\"));\n\t\t}\n\t}\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'Hello', 'world!', 'world!' ]\n\
    \nshould equal\n\n[ 'Hello', 'world!' ]\n    at test (/tmp/tmpnhlq5imu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnhlq5imu.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', 'Hello', 'world!', 'world!' ],\n\
    \  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var words_with_commas = [];\n  var words_with_commas_length\
    \ = 0;\n  var words_with_commas_odd_order = [];\n  var words_with_commas_odd_order_length\
    \ = 0;\n  for(var i=0; i<words.length; i++){\n    if(words[i].indexOf(\",\") ==\
    \ -1){\n      words_with_commas.push(words[i]);\n      words_with_commas_length++;\n\
    \    }\n    else{\n      words_with_commas_odd_order.push(words[i]);\n      words_with_commas_odd_order_length++;\n\
    \    }\n  }\n  if(words_with_commas_length == 0){\n    return words;\n  }\n  if(words_with_commas_odd_order_length\
    \ == 0){\n    return words_with_commas;\n  }\n  if(words_with_commas_odd_order_length\
    \ == 1){\n    return words_with_commas.concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 2){\n    return words_with_commas.concat(words_with_commas_odd_order).concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 3){\n    return words_with_commas.concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 4){\n    return words_with_commas.concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 5){\n    return words_with_commas.concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 6){\n    return words_with_commas.concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order).concat(words_with_commas_odd_order);\n\
    \  }\n  if(words_with_commas_odd_order_length == 7){\n    return words_with_commas.concat(words_with_commas_odd_order).\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphn2h87f5.js:53\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  var lastWord = \"\";\n\
    \  for(var i=0;i<words.length;i++){\n    var word = words[i];\n    if(word.length\
    \ == 0){\n      result.push(lastWord);\n      lastWord = \"\";\n      continue;\n\
    \    }\n    lastWord = word;\n  }\n  result.push(lastWord);\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'world!' ]\n\nshould equal\n\n[ 'Hello',\
    \ 'world!' ]\n    at test (/tmp/tmp6j1z9nx2.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6j1z9nx2.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.trim().split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var letters = words[0].split(\"\");\n  for(var\
    \ i = 1; i < words.length; i++){\n    var letters_next = words[i].split(\"\");\n\
    \    for(var j = 0; j < letters.length; j++){\n      if(letters[j] == letters_next[j]){\n\
    \        letters.splice(j, 1);\n      }\n    }\n  }\n  return letters;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'H', 'e', 'l', 'o' ]\n\nshould equal\n\
    \n[ 'Hello', 'world!' ]\n    at test (/tmp/tmps_mybqn3.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps_mybqn3.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'H', 'e',\
    \ 'l', 'o' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.trim().split(/\\s+/);\n\tvar\
    \ result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\
    \t\tif(word){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpsnf620jh.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsnf620jh.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    var result\
    \ = [];\n    for(var i=0;i<words.length;i++){\n        if(words[i].length>0){\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmpik5tyiq4.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpik5tyiq4.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  var result = [];\n  for(var i=0;i<words.length;i++){\n\
    \    var word = words[i];\n    var letters = words[i].split(\"\");\n    for(var\
    \ j=0;j<letters.length;j++){\n      if(letters[j].toLowerCase() == letters[j]){\n\
    \        letters[j] = letters[j].toUpperCase();\n      }\n    }\n    result.push(letters.join(\"\
    \"));\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'HELLO', 'WORLD!' ]\n\nshould equal\n\n\
    [ 'Hello', 'world!' ]\n    at test (/tmp/tmppceo2p4r.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppceo2p4r.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'HELLO',\
    \ 'WORLD!' ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length>0){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello,world!' ]\n\nshould equal\n\n[\
    \ 'Hello', 'world!' ]\n    at test (/tmp/tmp0qbl1o2s.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0qbl1o2s.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello,world!'\
    \ ],\n  expected: [ 'Hello', 'world!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\n// split_words(\"abcdef\") ==\
    \ 3\nfunction split_words(txt){\n  var words = txt.split(\" \");\n  if(words.length\
    \ == 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n\
    \  }\n  var result = [];\n  var counter = 0;\n  for(var i=0; i<words.length; i++){\n\
    \    if(words[i].length == 0){\n      continue;\n    }\n    if(words[i].length\
    \ == 1){\n      result.push(words[i]);\n      continue;\n    }\n    if(words[i].length\
    \ == 2){\n      result.push(words[i]);\n      counter++;\n      continue;\n  \
    \  }\n    if(words[i].length == 3){\n      result.push(words[i]);\n      counter++;\n\
    \      counter++;\n      continue;\n    }\n    if(words[i].length == 4){\n   \
    \   result.push(words[i]);\n      counter++;\n      counter++;\n      counter++;\n\
    \      continue;\n    }\n    if(words[i].length == 5){\n      result.push(words[i]);\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  continue;\n    }\n    if(words[i].length == 6){\n      result.push(words[i]);\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  counter++;\n      continue;\n    }\n    if(words[i].length == 7){\n      result.push(words[i]);\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  counter++;\n      counter++;\n      continue;\n    }\n    if(words[i].length\
    \ == 8){\n      result.push(words[i]);\n      counter++;\n      counter++;\n \
    \     counter++;\n      counter++;\n      counter++;\n      counter++;\n     \
    \ counter++;\n      continue;\n    }\n    if(words[i].length == 9){\n      result.push(words[i]);\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  counter++;\n      counter++;\n      counter++;\n      counter++;\n      continue;\n\
    \    }\n    if(words[i].length == 10){\n      result.push(words[i]);\n      counter++;\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  counter++;\n      counter++;\n      counter++;\n      counter++;\n      continue;\n\
    \    }\n    if(words[i].length == 11){\n      result.push(words[i]);\n      counter++;\n\
    \      counter++;\n      counter++;\n      counter++;\n      counter++;\n    \
    \  counter++;\n      counter++;\n      counter++;\n      counter++;\n      counter++;\n\
    \      continue;\n    }\n    if(words[i].length == 12){\n      result.push(words[i]);\n\
    \      counter++;\n      counter++;\n      counter++;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwrnqv2ab.js:141\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
