name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n      \
    \      if(arr[i] < min){\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    return [min, minIndex];\n}\n", " \
    \   let even = arr.filter(function(el){\n        return el%2 === 0;\n    });\n\
    \    let smallest = even.sort((a,b) => a-b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minValue = arr[0];\n    let minIndex\
    \ = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let even = [];\n    let odd = [];\n\
    \    let index = [];\n    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n        }else{\n            odd.push(arr[i]);\n\
    \        }\n    }\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < min){\n            min = even[i];\n            minIndex = i;\n        }\n\
    \    }\n    for(let i = 0; i < odd.length; i++){\n        if(odd[i] < min){\n\
    \            min = odd[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [min, minIndex];\n}\n", "    let evenNodes = arr.filter(node => node.value %\
    \ 2 === 0);\n    let smallestEvenValue = evenNodes.reduce((prev, curr) => prev\
    \ < curr.value ? prev : curr.value);\n    let smallestIndex = 0;\n    evenNodes.forEach((node,\
    \ index) => {\n        if(smallestEvenValue === node.value){\n            smallestIndex\
    \ = index;\n        }\n    });\n    return [smallestEvenValue, smallestIndex];\n\
    }\n", "    let evenNodes = arr.filter(n => n % 2 === 0);\n    let smallestEven\
    \ = evenNodes.reduce((a, b) => a < b ? a : b);\n    let smallestIndex = evenNodes.indexOf(smallestEven);\n\
    \    return [smallestEven, smallestIndex];\n}\n", "    let minValue = arr[0];\n\
    \    let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = [];\n\
    \    let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    even.sort((a,b)\
    \ => a - b);\n    let min = even[0];\n    let minIndex = 0;\n    for(let i = 0;\
    \ i < even.length; i++){\n        if(even[i] === min){\n            minIndex =\
    \ index[i];\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even\
    \ = []\n    let index = []\n    let smalest_value = 0\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n\
    \        }\n        if(arr[i] < smalest_value){\n            smalest_value = arr[i]\n\
    \            index.push(i)\n        }\n    }\n    if(even.length === 0){\n   \
    \     return []\n    }\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < smalest_value){\n            smalest_value = even[i]\n            index.push(i)\n\
    \        }\n    }\n    return [smalest_value, index]\n}\n", "    let even = arr.filter(function(x){return\
    \ x%2===0});\n    if(even.length===0){\n        return [];\n    }\n    let min\
    \ = even[0];\n    let minIndex = 0;\n    for(let i=0;i<even.length;i++){\n   \
    \     if(even[i]<min){\n            min = even[i];\n            minIndex = i;\n\
    \        }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes = [];\n\
    \    let smallestEven = arr[0];\n    let smallestIndex = -1;\n    for(let i =\
    \ 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestEven){\n                smallestEven = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b)=>a-b).pop();\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(v){\n\
    \        return v%2 === 0;\n    });\n    if(even.length === 0) return [];\n  \
    \  let min = even[0];\n    let minIndex = 0;\n    for(let i = 1; i < even.length;\
    \ i++){\n        if(even[i] < min){\n            min = even[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even = arr.filter(function(item){\n\
    \        return item % 2 === 0;\n    });\n    let smallest = Math.min(...even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    \n    if(even.length === 0){\n        return [];\n    }\n\
    \    \n    let smallest = even[0];\n    let smallestIndex = 0;\n    for(let i\
    \ = 0; i < even.length; i++){\n        if(even[i] < smallest){\n            smallest\
    \ = even[i];\n            smallestIndex = index[i];\n        }\n    }\n    \n\
    \    return [smallest, smallestIndex];\n}\n", "    let minIndex = arr.findIndex(x\
    \ => x % 2 === 0);\n    let minValue = arr[minIndex];\n    let evenIndex = arr.findIndex(x\
    \ => x % 2 === 1);\n    let evenValue = arr[evenIndex];\n    return [minValue,\
    \ evenIndex];\n}\n", "    let even = arr.filter(function(val){\n        return\
    \ val%2 === 0;\n    });\n    let smallestIndex = even.indexOf(Math.min(...even));\n\
    \    return even[smallestIndex];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n \
    \   let minValue = arr[minIndex];\n    let minIndexes = [];\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] === minValue){\n            minIndexes.push(i);\n\
    \        }\n    }\n    return minIndexes;\n}\n", "    let evenNodes = [];\n  \
    \  let smallestValue = 0;\n    let smallestIndex = 0;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestValue){\n                smallestValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    for(let i = 0; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] < smallestValue){\n            smallestValue\
    \ = evenNodes[i];\n            smallestIndex = i;\n        }\n    }\n    return\
    \ [smallestValue, smallestIndex];\n}\n", "    let even = [];\n    let index =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    let smallest = Math.min(...even);\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < even.length; i++){\n     \
    \   if(even[i] === smallest){\n            smallestIndex = index[i];\n       \
    \ }\n    }\n    return [smallest, smallestIndex];\n}\n", "    let even = arr.filter(x\
    \ => x % 2 === 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = arr.findIndex(item =>\
    \ item % 2 === 0);\n    let minValue = arr[minIndex];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(arr[i] < minValue){\n                minValue = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for\
    \ (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n     \
    \       minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "    let even = arr.filter(function(el){\n    \
    \    return el%2 === 0;\n    });\n    let index = even.indexOf(Math.min(...even));\n\
    \    return even.filter(function(el,i){\n        return i === index;\n    }).sort((a,b)=>a-b).pop();\n\
    }\n", "    let min = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] < min){\n            min = arr[i];\n  \
    \          minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n",
  "    let even = arr.filter(x => x % 2 === 0);\n    let smallest = even.sort((a,b)\
    \ => a - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let minIndex = arr.findIndex(node => node.value % 2 ===\
    \ 0);\n    let minValue = arr[minIndex];\n    let evenIndex = arr.findIndex(node\
    \ => node.value % 2 === 1);\n    let evenValue = arr[evenIndex];\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(x){return x%2===0});\n\
    \    let min = even.map(function(x){return x}).sort((a,b)=>a-b).pop();\n    let\
    \ index = even.map(function(x){return x}).indexOf(min);\n    return [min, index];\n\
    }\n", "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    \n    if(even.length === 0){\n \
    \       return [];\n    }\n    \n    let min = even[0];\n    let minIndex = 0;\n\
    \    for(let i = 0; i < even.length; i++){\n        if(even[i] === min){\n   \
    \         minIndex = index[i];\n        }\n    }\n    return [min, minIndex];\n\
    }\n", "    let minIndex = arr.findIndex((item, index) => item % 2 === 0);\n  \
    \  let minValue = arr[minIndex];\n    let result = [];\n    arr.forEach((item,\
    \ index) => {\n        if(item % 2 === 0 && item < minValue){\n            result.push([item,\
    \ index]);\n        }\n    });\n    if(result.length === 0){\n        return [];\n\
    \    }\n    if(result.length === 1){\n        return [result[0][0], result[0][1]];\n\
    \    }\n    let minIndex2 = result.findIndex((item, index) => item[0] % 2 ===\
    \ 0);\n    let minValue2 = result[minIndex2][0];\n    let result2 = [];\n    result.forEach((item,\
    \ index) => {\n        if(item[0] % 2 === 0 && item[0] < minValue2){\n       \
    \     result2.push([item[0], index]);\n        }\n    });\n    if(result2.length\
    \ === 0){\n        return [];\n    }\n    if(result2.length === 1){\n        return\
    \ [result2[0][0], result2[0][1]];\n    }\n    let minIndex3 = result2.findIndex((item,\
    \ index) => item[0] % 2 === 0);\n    let minValue3 = result2[minIndex3][0];\n\
    \    let result3 = [];\n    result2.forEach((item, index) => {\n        if(item[0]\
    \ % 2 === 0 && item[0] < minValue3){\n            result3.push([item[0], index]);\n\
    \        }\n    });\n    if(result3.length === 0){\n        return [];\n    }\n\
    \    if(result3.length === 1){\n        return [result3[0][0], result3[0][1]];\n\
    \    }\n    let minIndex4 = result3.findIndex((item, index) => item[0] % 2 ===\
    \ 0);\n    let minValue4 = result3[minIndex4][0];\n    let result4 = [];\n   \
    \ result3.forEach((item, index) => {\n        if(item[0] % 2 === 0 && item[0]\
    \ < minValue4){\n            result4.push([item[0], index]);\n        }\n    });\n\
    \    if(result4.length === 0){\n        return [];\n    }\n    if(result4.length\
    \ === 1){\n        return [result4[0][0], result4[0][1]];\n    }\n    let minIndex5\
    \ = result4.findIndex((item, index) => item[0] % 2 === 0);\n    let minValue5\
    \ = result4[minIndex5][0];\n    let result5 = [];\n    result4.forEach((item,\
    \ index) => {\n        if(item[0] % 2 === 0 && item[0] < minValue5){\n       \
    \     result5.push([item[0], index]);\n        }\n    });\n    if(result5.length\
    \ === 0){\n        return [];\n    }\n    if(result5.length === 1){\n        return\
    \ [result5[0][0], result5[0][1]];\n    }\n    let minIndex6 = result5.findIndex((item,\
    \ index) => item[0] % 2 === 0);", "    let evenNodes = []\n    let smallestIndex\
    \ = 0\n    let smallestValue = 0\n    for(let i = 0; i < arr.length; i++){\n \
    \       if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i])\n          \
    \  if(smallestValue === 0){\n                smallestValue = arr[i]\n        \
    \        smallestIndex = i\n            }else if(arr[i] < smallestValue){\n  \
    \              smallestValue = arr[i]\n                smallestIndex = i\n   \
    \         }\n        }\n    }\n    if(evenNodes.length === 0){\n        return\
    \ []\n    }\n    let smallestEvenValue = evenNodes[smallestIndex]\n    for(let\
    \ i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] !== smallestEvenValue){\n\
    \            smallestEvenValue = evenNodes[i]\n            smallestIndex = i\n\
    \        }\n    }\n    return [smallestEvenValue, smallestIndex]\n}\n", "    let\
    \ min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(arr[i] < min){\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    return [min, minIndex];\n}\n", " \
    \   let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    if(minIndex\
    \ === -1){\n        return [];\n    }\n    let minValue = arr[minIndex].value;\n\
    \    let minIndexes = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value\
    \ === minValue){\n            minIndexes.push(i);\n        }\n    }\n    if(minIndexes.length\
    \ === 0){\n        return [];\n    }\n    let minIndexesSorted = minIndexes.sort((a,b)\
    \ => a - b);\n    let minIndexesSorted = minIndexesSorted.filter(i => i !== minIndex);\n\
    \    return minIndexesSorted;\n}\n", "    let even = arr.filter(x => x % 2 ===\
    \ 0);\n    let smallest = even.sort((a,b) => a - b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let even = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let evenNodes\
    \ = [];\n    let smallestEven = arr[0];\n    let smallestIndex = 0;\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestEven){\n                smallestEven = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ [smallestEven, smallestIndex];\n}\n", "    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    let smallest = even.sort((a,b) => a-b).pop();\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n  \
    \          min = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [min, minIndex];\n}\n", "    let minIndex = arr.findIndex(node => node.value\
    \ % 2 === 0);\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0 && arr[i].value\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    result.push(minValue, minIndex);\n    return result;\n}\n",
  "    let even = arr.filter(function(num){\n        return num%2 === 0;\n    });\n\
    \    let smallest = even.sort((a,b) => a-b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let evenArr = [];\n    let evenIndex\
    \ = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            evenIndex.push(i);\n            if(arr[i] < minValue){\n        \
    \        minValue = arr[i];\n                minIndex = i;\n            }\n  \
    \      }\n    }\n    if(evenArr.length === 0){\n        return [];\n    }\n  \
    \  for(let i = 0; i < evenArr.length; i++){\n        if(evenArr[i] === minValue){\n\
    \            return evenIndex.map(function(i){\n                return arr[i];\n\
    \            });\n        }\n    }\n}\n", "    let even = [];\n    let index =\
    \ [];\n    let min = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n        }\n        if(arr[i] <\
    \ min){\n            min = arr[i];\n        }\n    }\n    for(let i = 0; i < even.length;\
    \ i++){\n        if(even[i] === min){\n            index.push(i);\n        }\n\
    \    }\n    if(even.length === 0){\n        return [];\n    }\n    if(even.length\
    \ === 1){\n        return [even[0], index[0]];\n    }\n    let minIndex = index[0];\n\
    \    for(let i = 1; i < even.length; i++){\n        if(even[i] === min){\n   \
    \         minIndex = index[i];\n        }\n    }\n    return [even[minIndex],\
    \ minIndex];\n}\n", "    let evenNodes = [];\n    let smallestIndex = 0;\n   \
    \ let smallestValue = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenNodes.push(arr[i]);\n            if(arr[i] < smallestValue){\n\
    \                smallestValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if(evenNodes.length === 0){\n        return\
    \ [];\n    }\n    for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i]\
    \ < smallestValue){\n            smallestValue = evenNodes[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndex];\n}\n", " \
    \   let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i] < min){\n      \
    \          min = arr[i];\n                minIndex = i;\n            }\n     \
    \   }\n    }\n    return [min, minIndex];\n}\n", "    let evens = arr.filter(n\
    \ => n % 2 === 0);\n    let smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenValues = arr.filter(n => n % 2 === 0);\n    if(evenValues.length\
    \ === 0) return [];\n    let smallestEvenValue = evenValues[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 1; i < evenValues.length; i++){\n        if(evenValues[i]\
    \ < smallestEvenValue){\n            smallestEvenValue = evenValues[i];\n    \
    \        smallestIndex = i;\n        }\n    }\n    return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "    let even = arr.filter(function(val){\n        return\
    \ val%2 === 0;\n    });\n    let smallest = Math.min.apply(null, even);\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ even = arr.filter(x => x % 2 === 0);\n    let smallest = Math.min(...even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let even = arr.filter(function(n){\n        return n % 2 === 0;\n    });\n\
    \    let min = even.sort((a,b) => a - b)[0];\n    let index = even.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evenArr = [];\n    let evenIndex = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evenArr.push(arr[i]);\n            evenIndex.push(i);\n        }\n \
    \   }\n    evenArr.sort((a,b) => a - b);\n    let smallestEven = evenArr[0];\n\
    \    let smallestIndex = evenIndex[0];\n    for(let i = 0; i < evenArr.length;\
    \ i++){\n        if(evenArr[i] === smallestEven){\n            smallestEven =\
    \ evenArr[i];\n            smallestIndex = evenIndex[i];\n        }\n    }\n \
    \   return [smallestEven, smallestIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n", "    let even = arr.filter(x => x % 2 === 0);\n    if(even.length\
    \ < 1){\n        return [];\n    }\n    let min = even[0];\n    let minIndex =\
    \ 0;\n    for(let i = 1; i < even.length; i++){\n        if(even[i] < min){\n\
    \            min = even[i];\n            minIndex = i;\n        }\n    }\n   \
    \ return [min, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    let smallest = even.sort((a,b) => a-b).pop();\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ even.sort((a,b) => a - b);\n    let smallest = even[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i] === smallest\
    \ && i === 0){\n            smallestIndex = index[i];\n        }\n    }\n    return\
    \ [smallest, smallestIndex];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(minValue > arr[i]){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n", "    let evenNodes = [];\n    let evenNodesIndex\
    \ = [];\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n   \
    \     if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n           \
    \ evenNodesIndex.push(i);\n        }\n        if(evenNodes.length === 0){\n  \
    \          minIndex = i;\n            break;\n        }\n        if(arr[i] < evenNodes[evenNodes.length-1]){\n\
    \            minIndex = i;\n            break;\n        }\n    }\n    return [evenNodes[evenNodesIndex[evenNodesIndex.length-1]],\
    \ minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            min = Math.min(min, arr[i]);\n            minIndex = i;\n       \
    \ }\n    }\n    return [min, minIndex];\n}\n", "    let evenValues = arr.filter(n\
    \ => n % 2 === 0);\n    if(evenValues.length === 0) return [];\n    let smallestEvenValue\
    \ = evenValues[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < evenValues.length;\
    \ i++){\n        if(evenValues[i] < smallestEvenValue){\n            smallestEvenValue\
    \ = evenValues[i];\n            smallestIndex = i;\n        }\n    }\n    return\
    \ [smallestEvenValue, smallestIndex];\n}\n", "    let even = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let\
    \ minValue = arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i].value % 2 === 0){\n            if(arr[i].value < minValue){\n\
    \                minValue = arr[i].value;\n                minIndex = i;\n   \
    \         }\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let\
    \ even = arr.filter(function(val){\n        return val%2 === 0;\n    });\n   \
    \ if(even.length === 0){\n        return [];\n    }\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }", "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    \n    if(even.length === 0){\n \
    \       return [];\n    }\n    \n    let smallest = Math.min.apply(null, even);\n\
    \    let index = even.indexOf(smallest);\n    \n    return [smallest, index];\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(min\
    \ > arr[i]){\n                min = arr[i];\n                minIndex = i;\n \
    \           }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    let smalest_value;\n    let smallest_index;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n            index.push(i);\n        }\n    }\n \
    \   smalest_value = even[0];\n    smallest_index = 0;\n    for(let i = 0; i <\
    \ even.length; i++){\n        if(even[i] < smalest_value){\n            smalest_value\
    \ = even[i];\n            smallest_index = index[i];\n        }\n    }\n    return\
    \ [smalest_value, smallest_index];\n}\n", "    let even = [];\n    let index =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    let smallest = Math.min(...even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let min\
    \ = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] < min){\n            min = arr[i];\n            minIndex =\
    \ i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even = [];\n\
    \    let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let\
    \ smallest = even[0];\n    let smallest_index = index[0];\n    for(let i = 1;\
    \ i < even.length; i++){\n        if(smallest > even[i]){\n            smallest\
    \ = even[i];\n            smallest_index = index[i];\n        }\n    }\n    return\
    \ [smallest, smallest_index];\n}\n", "    let even = []\n    let index = []\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i])\n            index.push(i)\n        }\n    }\n   \
    \ even.sort((a,b) => a-b)\n    let smallest = even[0]\n    let smallestIndex =\
    \ 0\n    for(let i = 0; i < even.length; i++){\n        if(even[i] === smallest\
    \ && i !== 0){\n            smallestIndex = index[i]\n        }\n    }\n    return\
    \ [smallest, smallestIndex]\n}\n", "    let minValue = arr[0];\n    let minIndex\
    \ = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(min > arr[i]){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n", "    let even = [];\n    let index = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    let smallest = Math.min(...even);\n    let index\
    \ = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n     \
    \   if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    \n    if(even.length === 0){\n        return [];\n    }\n\
    \    \n    let smallest = even[0];\n    let smallest_index = 0;\n    for(let i\
    \ = 0; i < even.length; i++){\n        if(even[i] < smallest){\n            smallest\
    \ = even[i];\n            smallest_index = index[i];\n        }\n    }\n    \n\
    \    return [smallest, smallest_index];\n}\n", "    let minIndex = -1;\n    let\
    \ minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = [];\n\
    \    let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    even.sort();\n    let smallest = even[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i] === smallest\
    \ && i !== smallestIndex){\n            smallest = even[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallest, smallestIndex];\n}\n", "    let\
    \ minValue = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let evens = arr.filter(n => n % 2 === 0);\n    let smallest = Math.min(...evens);\n\
    \    let index = evens.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let minValue\
    \ = arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i].value % 2 === 0 && arr[i].value < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenNodes = arr.filter(node => node % 2 === 0);\n\
    \    if(evenNodes.length === 0){\n        return [];\n    }\n    let minIndex\
    \ = evenNodes.reduce((acc, curr, index) => {\n        if(curr < acc){\n      \
    \      return curr;\n        }\n        return index;\n    }, Number.MAX_SAFE_INTEGER);\n\
    \    let minValue = evenNodes[minIndex];\n    let result = [minValue, minIndex];\n\
    \    return evenNodes.reduce((acc, curr, index) => {\n        if(curr === minValue){\n\
    \            result.push(index);\n        }\n        return acc;\n    }, []);\n\
    }\n", "    let even = arr.filter(v=>v%2===0).sort((a,b)=>a-b).pop();\n    let\
    \ index = arr.indexOf(even);\n    return [even,index];\n}", "    let minIndex\
    \ = arr.findIndex(node => node % 2 === 0);\n    if(minIndex === -1){\n       \
    \ return [];\n    }\n    let minValue = arr[minIndex];\n    let evenIndex = arr.findIndex(node\
    \ => node % 2 === 1);\n    if(evenIndex === -1){\n        return [minValue, minIndex];\n\
    \    }\n    let evenValue = arr[evenIndex];\n    let index = minIndex;\n    while(index\
    \ > 0 && arr[index - 1] % 2 === 0){\n        index--;\n    }\n    return [minValue,\
    \ index];\n}\n", "    let minIndex = arr.findIndex(item => item % 2 === 0);\n\
    \    let minValue = arr[minIndex];\n    let result = [];\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    let smallestIndex = even.indexOf( Math.min.apply(null,\
    \ even) );\n    return even[smallestIndex];\n}\n", "    let evenNodes = [];\n\
    \    let smallestEven = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestEven){\n                smallestEven = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b) => a - b).filter(node => node === smallestEven);\n}\n",
  "    let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let minValue\
    \ = arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i].value % 2 === 0 && arr[i].value < minValue){\n            result.push([arr[i].value,\
    \ i]);\n            minValue = arr[i];\n            minIndex = i;\n        }\n\
    \    }\n    if(minIndex === arr.length){\n        return [];\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "    let evenNodes = arr.filter(node => node.value\
    \ % 2 === 0);\n    let smallestEvenValue = evenNodes.reduce((prev, curr) => Math.min(prev,\
    \ curr.value), Infinity);\n    let smallestIndex = 0;\n    evenNodes.forEach((node,\
    \ index) => {\n        if(node.value === smallestEvenValue){\n            smallestIndex\
    \ = index;\n        }\n    });\n    return [smallestEvenValue, smallestIndex];\n\
    }\n", "    let even = arr.filter(function(val){\n        return val%2 === 0;\n\
    \    });\n    let smallest = even.sort((a,b) => a-b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = arr.findIndex(node =>\
    \ node % 2 === 0);\n    let minValue = arr[minIndex];\n    let evenIndexes = arr.filter(node\
    \ => node % 2 === 0);\n    if(evenIndexes.length === 0){\n        return [];\n\
    \    }\n    let evenMinIndex = evenIndexes.findIndex(node => node === minValue);\n\
    \    return [minValue, evenMinIndex];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n    let minValue = arr[minIndex];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(arr[i] < minValue){\n                minValue = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(x){\n        return x\
    \ % 2 === 0;\n    });\n    let smallest = even.sort((a,b)=>a-b).pop();\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ even = arr.filter(x => x % 2 === 0);\n    let index = even.indexOf(Math.min.apply(null,\
    \ even));\n    return even.indexOf(Math.min.apply(null, even), index);\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(function(v){\n        return v%2 === 0;\n    });\n  \
    \  if(even.length === 0) return [];\n    let min = even.sort((a,b)=>a-b).pop();\n\
    \    let index = even.indexOf(min);\n    return [min, index];\n}\n", "    let\
    \ evenNodes = arr.filter(node => node.value % 2 === 0);\n    let smallestEvenNode\
    \ = evenNodes.reduce((prev, curr) => {\n        return prev < curr.value ? prev\
    \ : curr.value;\n    });\n    let smallestEvenIndex = evenNodes.findIndex(node\
    \ => node.value === smallestEvenNode);\n    return evenNodes.filter(node => node.value\
    \ === smallestEvenNode)\n        .sort((a, b) => a.value - b.value)\n        .map(node\
    \ => [node.value, node.index])\n        .sort((a, b) => a[0] - b[0])[0];\n}\n",
  "    let even = arr.filter(function(x){\n        return x % 2 === 0;\n    });\n\
    \    let smallest = Math.min.apply(null, even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let even = [];\n    let index = [];\n\
    \    let smallest;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    smallest = even[0];\n    for(let i = 0; i < even.length;\
    \ i++){\n        if(smallest > even[i]){\n            smallest = even[i];\n  \
    \      }\n    }\n    return [smallest, index];\n}\n", "    let minIndex = -1;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    let min = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \   }\n        else{\n            min = Math.min(min, arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ else if(even.length === 1){\n        return [even[0], index[0]];\n    }\n  \
    \  else{\n        let min = even[0];\n        let minIndex = index[0];\n     \
    \   for(let i = 1; i < even.length; i++){\n            if(even[i] === min){\n\
    \                min = even[i];\n                minIndex = index[i];\n      \
    \      }\n        }\n        return [min, minIndex];\n    }\n}\n", "    let min\
    \ = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] < min){\n            min = arr[i];\n            minIndex =\
    \ i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even = arr.filter(function(num){\n\
    \        return num%2 === 0;\n    });\n    let smallest = Math.min(...even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let minValue\
    \ = arr[minIndex];\n    let result = [];\n    arr.forEach((node, index) => {\n\
    \        if (node.value % 2 === 0) {\n            result.push([node.value, index]);\n\
    \        }\n    });\n    return result.sort((a, b) => a[0] - b[0]).pop();\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    let result =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            if(arr[i] < min){\n                min = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n    }\n    return [min, minIndex];\n\
    }\n", "    let even = arr.filter(n => n % 2 === 0);\n    let smallest = even.sort((a,b)\
    \ => a - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evenNodes = [];\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 ===\
    \ 0){\n            evenNodes.push(arr[i]);\n            if(minValue < arr[i]){\n\
    \                minValue = arr[i];\n                minIndex = i;\n         \
    \   }\n        }\n    }\n    return evenNodes.map(node => [node, minIndex]);\n\
    }\n", "    let even = arr.filter(item => item % 2 === 0);\n    let min = even.sort((a,b)\
    \ => a-b)[0];\n    let index = even.indexOf(min);\n    return [min, index];\n\
    }\n", "    let evenNodes = arr.filter(node => node % 2 === 0);\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    let minIndex = evenNodes.reduce((acc,\
    \ cur, index) => {\n        if(cur < acc){\n            return cur;\n        }\n\
    \        if(cur === acc){\n            return index;\n        }\n        return\
    \ acc;\n    }, Number.MAX_SAFE_INTEGER);\n    let minValue = evenNodes[minIndex];\n\
    \    let result = [minValue, minIndex];\n    evenNodes.splice(minIndex, 1);\n\
    \    return evenNodes.reduce((acc, cur, index) => {\n        if(cur < acc){\n\
    \            return cur;\n        }\n        if(cur === acc){\n            return\
    \ index;\n        }\n        return acc;\n    }, Number.MAX_SAFE_INTEGER);\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let evenArr = [];\n    let indexArr = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n  \
    \          indexArr.push(i);\n        }\n    }\n    let smallest = Math.min(...evenArr);\n\
    \    let smallestIndex = indexArr.indexOf(evenArr.indexOf(smallest));\n    return\
    \ [smallest, smallestIndex];\n}\n", "    let even = []\n    let index = []\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n    \
    \        even.push(arr[i])\n            index.push(i)\n        }\n    }\n    \n\
    \    if(even.length === 0){\n        return [];\n    }\n    \n    let min = even[0];\n\
    \    let minIndex = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < min){\n            min = even[i];\n            minIndex = index[i];\n    \
    \    }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes = [];\n \
    \   let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n            if(evenNodes.length\
    \ === 1){\n                smallestIndex = i;\n            }\n        }\n    }\n\
    \    if(evenNodes.length === 0){\n        return [];\n    }\n    if(evenNodes.length\
    \ === 1){\n        return [evenNodes[0], smallestIndex];\n    }\n    let smallestValue\
    \ = evenNodes[0];\n    let smallestIndexValue = 0;\n    for(let i = 0; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] < smallestValue){\n            smallestValue\
    \ = evenNodes[i];\n            smallestIndexValue = i;\n        }\n    }\n   \
    \ return [smallestValue, smallestIndexValue];\n}\n", "    let evenNodes = [];\n\
    \    let evenNodesIndex = [];\n    for(let i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n            evenNodesIndex.push(i);\n\
    \        }\n    }\n    if(evenNodes.length === 0){\n        return [];\n    }\n\
    \    let smallestEvenValue = evenNodes[0];\n    let smallestEvenIndex = 0;\n \
    \   for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestEvenValue){\n\
    \            smallestEvenValue = evenNodes[i];\n            smallestEvenIndex\
    \ = i;\n        }\n    }\n    return [smallestEvenValue, evenNodesIndex[smallestEvenIndex]];\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n\
    \            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [min, minIndex];\n}\n", "    let minIndex = -1;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let even = arr.filter(n => n % 2\
    \ === 0);\n    let smallestEven = even.sort((a,b) => a - b)[0];\n    let index\
    \ = even.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "  \
    \  let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = [];\n    let index = [];\n    let smallest;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \        }\n        else{\n            smallest = even.sort((a,b) => a - b)[0];\n\
    \            index.push(smallest);\n            even.splice(even.indexOf(smallest),\
    \ 1);\n        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n\
    \    else if(even.length === 1){\n        return [even[0], index[0]];\n    }\n\
    \    else{\n        return [even[0], index[0]];\n    }\n}\n", "    let minIndex\
    \ = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = arr.findIndex((item) => item % 2 === 0);\n    if(minIndex === -1){\n     \
    \   return [];\n    }\n    let minValue = arr[minIndex];\n    let result = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === minValue){\n\
    \            result.push([arr[i], i]);\n        }\n    }\n    if(result.length\
    \ === 0){\n        return [];\n    }\n    result.sort((a,b) => a[0] - b[0]);\n\
    \    return result[0][1];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let smallest = Math.min(...evens);\n    let index = evens.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n", "    let evenArr = [];\n\
    \    let evenIndex = [];\n    let minIndex = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n  \
    \          evenIndex.push(i);\n        }\n        if(arr[i] < minIndex){\n   \
    \         minIndex = arr[i];\n        }\n    }\n    if(evenArr.length === 0){\n\
    \        return [];\n    }\n    let minValue = evenArr[evenArr.length-1];\n  \
    \  for(let i = 0; i < evenArr.length; i++){\n        if(evenArr[i] === minValue){\n\
    \            minIndex = evenIndex[i];\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = [];\n    let index = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    \n    if(even.length === 0){\n\
    \        return [];\n    }\n    \n    let smallest = Math.min(...even);\n    let\
    \ smallestIndex = index.indexOf(even.indexOf(smallest));\n    \n    return [smallest,\
    \ smallestIndex];\n}\n", "    let even = arr.filter(x => x % 2 === 0);\n    let\
    \ smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n   \
    \ return [smallest, index];\n}\n", "    let evenNodes = [];\n    let evenNodesIndex\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNodes.push(arr[i]);\n            evenNodesIndex.push(i);\n  \
    \      }\n    }\n    if(evenNodes.length === 0){\n        return [];\n    }\n\
    \    let smallestEvenValue = evenNodes[0];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestEvenValue){\n\
    \            smallestEvenValue = evenNodes[i];\n            smallestIndex = evenNodesIndex[i];\n\
    \        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n", "   \
    \ let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let minValue\
    \ = arr[minIndex];\n    let evenValues = arr.filter(node => node.value % 2 ===\
    \ 0);\n    if(evenValues.length === 0){\n        return [];\n    }\n    evenValues.sort((a,b)\
    \ => a.value - b.value);\n    let smallestEvenValue = evenValues[0];\n    let\
    \ smallestEvenIndex = minIndex;\n    for(let i = 1; i < evenValues.length; i++){\n\
    \        if(evenValues[i].value === smallestEvenValue.value){\n            smallestEvenIndex\
    \ = i;\n        }\n    }\n    return [smallestEvenValue, smallestEvenIndex];\n\
    }\n", "    let evenArr = [];\n    let indexArr = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n  \
    \          indexArr.push(i);\n        }\n    }\n    \n    if(evenArr.length ===\
    \ 0){\n        return [];\n    }\n    \n    let minIndex = evenArr.reduce((prev,\
    \ curr)=>{\n        if(prev < curr){\n            return prev;\n        }\n  \
    \      return curr;\n    });\n    \n    let minValue = evenArr[minIndex];\n  \
    \  \n    let minIndexArr = [];\n    for(let i = 0; i < indexArr.length; i++){\n\
    \        if(indexArr[i] === minIndex){\n            minIndexArr.push(i);\n   \
    \     }\n    }\n    \n    if(minIndexArr.length === 0){\n        return [];\n\
    \    }\n    \n    let minIndexValue = evenArr[minIndexArr[0]];\n    \n    return\
    \ [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n    let minIndex =\
    \ 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(v){\n\
    \        return v%2 === 0;\n    });\n    let smallest = Math.min.apply(null, even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let even = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    \n    let smallest = Math.min(...even);\n    let smallestIndex\
    \ = index.indexOf(even.indexOf(smallest));\n    \n    return [smallest, smallestIndex];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = arr.findIndex(node => node.value % 2 ===\
    \ 0);\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n          \
    \  if(arr[i].value < minValue){\n                minValue = arr[i].value;\n  \
    \              minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenValues = arr.filter(function(n){\n        return\
    \ n % 2 === 0;\n    });\n    let smallestEvenValue = evenValues[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < evenValues.length; i++){\n        if(evenValues[i]\
    \ < smallestEvenValue){\n            smallestEvenValue = evenValues[i];\n    \
    \        smallestIndex = i;\n        }\n    }\n    return [smallestEvenValue,\
    \ smallestIndex];\n}\n", "    let even = [];\n    let index = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    \n    if(even.length === 0){\n\
    \        return [];\n    }\n    \n    let smallest = even[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i] === smallest\
    \ && i !== 0){\n            smallestIndex = index[i];\n        }\n    }\n    \n\
    \    return [smallest, smallestIndex];\n}\n", "    let evenNodes = [];\n    let\
    \ minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < minValue){\n                minValue = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    let smallestEvenValue = evenNodes[0];\n\
    \    let smallestIndex = evenNodes.indexOf(minValue);\n    for(let i = 1; i <\
    \ evenNodes.length; i++){\n        if(evenNodes[i] < smallestEvenValue){\n   \
    \         smallestEvenValue = evenNodes[i];\n            smallestIndex = i;\n\
    \        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n", "   \
    \ let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = []\n    let index = []\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n            index.push(i)\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ let smallest = Math.min.apply(null, even)\n    let smallestIndex = index.indexOf(even.indexOf(smallest))\n\
    \    return [smallest, smallestIndex]\n}\n", "    let minValue = arr[0];\n   \
    \ let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = [];\n\
    \    let index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    \n    if(even.length === 0){\n        return [];\n    }\n\
    \    \n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    \n    return [smallest, index];\n}\n", "    let evenNodes = [];\n    let\
    \ smallestIndex = 0;\n    let smallestEvenValue = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestEvenValue){\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n            }\n        }\n  \
    \  }\n    if(evenNodes.length === 0){\n        return [];\n    }\n    for(let\
    \ i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestEvenValue){\n\
    \            smallestEvenValue = evenNodes[i];\n            smallestIndex = i;\n\
    \        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n", "   \
    \ let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return\
    \ [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let i=1;i<even.length;i++){\n\
    \        if(even[i]<min){\n            min = even[i];\n            minIndex =\
    \ i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes\
    \ = [];\n    let smallestValue = 0;\n    let smallestIndex = 0;\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(arr[i] < smallestValue){\n                smallestValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b) => a-b).map(n => [n, smallestIndex]);\n}\n", "    let evenNodes\
    \ = arr.filter(node => node.value % 2 === 0);\n    let smallestEven = evenNodes.reduce((prev,\
    \ curr) => prev < curr.value ? prev : curr.value, 0);\n    let smallestIndex =\
    \ evenNodes.reduce((prev, curr) => prev < curr.value ? prev : curr.index, 0);\n\
    \    return [smallestEven, smallestIndex];\n}\n", "    let minIndex = -1;\n  \
    \  let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let evenNodes =\
    \ [];\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(evenNodes.length === 1){\n                smallestIndex = i;\n       \
    \     }\n        }\n    }\n    return evenNodes.sort((a,b) => a - b).map(x =>\
    \ [x, smallestIndex]);\n}\n", "    let minValue = arr[0];\n    let minIndex =\
    \ 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let even = arr.filter(v=>v%2===0);\n\
    \    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let evenNodes = [];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNodes.push(arr[i]);\n            if(evenNodes.length === 1){\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b) => a - b).map(x => [x, smallestIndex]);\n}\n", "    let\
    \ even = arr.filter(function(x){\n        return x % 2 === 0;\n    });\n    let\
    \ smallest = Math.min.apply(null, even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(minValue > arr[i]){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n", "    let even = arr.filter(v=>v%2===0);\n\
    \    let index = even.indexOf( Math.min.apply(null, even) );\n    return [even[index],\
    \ index];\n}\n", "    let evenNodes = [];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(evenNodes.length > 0){\n                smallestIndex = i;\n \
    \           }\n        }\n    }\n    if(evenNodes.length === 0){\n        return\
    \ [];\n    }\n    if(evenNodes.length === 1){\n        return [evenNodes[0], smallestIndex];\n\
    \    }\n    let smallestValue = evenNodes[0];\n    for(let i = 1; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] < smallestValue){\n            smallestValue\
    \ = evenNodes[i];\n            smallestIndex = i;\n        }\n    }\n    return\
    \ [smallestValue, smallestIndex];\n}\n", "    let minIndex = arr.findIndex(item\
    \ => item % 2 === 0);\n    let minValue = arr[minIndex];\n    let result = [];\n\
    \    arr.forEach((item, index) => {\n        if(item % 2 === 0 && item < minValue){\n\
    \            result.push([item, index]);\n        }\n    });\n    if(result.length\
    \ === 0){\n        return [];\n    }\n    if(result.length === 1){\n        return\
    \ [result[0][0], result[0][1]];\n    }\n    let minIndex2 = result.findIndex(item\
    \ => item[0] === minValue);\n    return [result[0][0], result[0][1], result[minIndex2][1]];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = arr.findIndex(node => node.value % 2 ===\
    \ 0);\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n          \
    \  if(arr[i].value < minValue){\n                minValue = arr[i].value;\n  \
    \              minIndex = i;\n            }\n        }\n    }\n    result.push(minValue,\
    \ minIndex);\n    return result;\n}\n", "    let evenNodes = arr.filter(node =>\
    \ node.value % 2 === 0);\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    let minIndex = evenNodes.reduce((prev, curr) => Math.min(prev, curr.value),\
    \ Infinity);\n    let minValue = evenNodes.find(node => node.value === minIndex);\n\
    \    return [minValue, minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(val){\n        return\
    \ val%2 === 0;\n    });\n    let smallest = Math.min.apply(null, even);\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let evenNodes = [];\n    let evenNodesIndex = [];\n    let minIndex = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evenNodes.push(arr[i]);\n            evenNodesIndex.push(i);\n     \
    \   }\n        if(evenNodes.length === 0){\n            break;\n        }\n  \
    \  }\n    if(evenNodes.length === 0){\n        return [];\n    }\n    for(let\
    \ i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < evenNodes[minIndex]){\n\
    \            minIndex = i;\n        }\n    }\n    return [evenNodes[minIndex],\
    \ evenNodesIndex[minIndex]];\n}\n", "    let even = [];\n    let index = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n            index.push(i);\n        }\n    }\n \
    \   if(even.length === 0){\n        return [];\n    }\n    even.sort((a,b) =>\
    \ a - b);\n    let smallest = even[0];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(even[i] === smallest && i === even.length\
    \ - 1 && even.length !== 0){\n            smallestIndex = index[i];\n        }\n\
    \    }\n    return [smallest, smallestIndex];\n}\n", "    let even = arr.filter(x\
    \ => x % 2 === 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evenNodes = arr.filter(node =>\
    \ node.value % 2 === 0);\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    let minIndex = evenNodes.reduce((acc, cur, index) => {\n        if(cur.value\
    \ < acc){\n            return cur.value;\n        }\n        if(cur.value ===\
    \ acc){\n            return index;\n        }\n        return acc;\n    }, Number.MAX_SAFE_INTEGER);\n\
    \    let minValue = evenNodes[minIndex];\n    let minIndexes = [];\n    for(let\
    \ i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i].value === minValue.value){\n\
    \            minIndexes.push(i);\n        }\n    }\n    return minIndexes;\n}\n",
  "    let evenNodes = arr.filter(node => node % 2 === 0);\n    let smallestEven =\
    \ evenNodes.reduce((prev, curr) => prev < curr ? prev : curr, 0);\n    let smallestIndex\
    \ = evenNodes.indexOf(smallestEven);\n    return evenNodes.filter(node => node\
    \ === smallestEven).map(node => [node, smallestIndex]);\n}\n", "    let even =\
    \ arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return [];\n    }\n\
    \    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let even = [];\n    let index =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    \n    if(even.length === 0){\n        return [];\n    }\n    \n    let min\
    \ = even[0];\n    let minIndex = 0;\n    for(let i = 0; i < even.length; i++){\n\
    \        if(even[i] === min){\n            minIndex = index[i];\n        }\n \
    \   }\n    \n    return [min, minIndex];\n}\n", "    let minIndex = 0;\n    let\
    \ minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(item){\n\
    \        return item % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for\
    \ (let i = 1; i < arr.length; i++) {\n        if (arr[i] < minValue) {\n     \
    \       minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(item){\n\
    \        return item % 2 === 0;\n    });\n    let smallestIndex = even.indexOf(Math.min(...even));\n\
    \    return even[smallestIndex];\n}\n", "    let even = arr.filter(x => x % 2\
    \ === 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <\
    \ minValue) {\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    return [minValue, minIndex];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
