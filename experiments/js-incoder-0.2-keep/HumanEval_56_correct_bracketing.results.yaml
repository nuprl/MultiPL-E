name: HumanEval_56_correct_bracketing
language: js
results:
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tvar opening_brackets = [];\n\tvar closing_brackets\
    \ = [];\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] ==\
    \ \"<\"){\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ \">\"){\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn (opening_brackets.length\
    \ == closing_brackets.length);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbb62ku7y.js:36:10)\n    at Object.<anonymous> (/tmp/tmpbb62ku7y.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g);\n    });\n    var all_closing_brackets_set\
    \ = closing_brackets.filter(function(closing_bracket){\n        return closing_bracket.match(/\\\
    >+/g);\n    });\n    return all_opening_brackets_set.length == all_closing_brackets_set.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqg6v6evu.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqg6v6evu.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    for(var i = 0; i < opening_brackets.length; i++){\n\
    \        if(closing_brackets[i] != opening_brackets[i]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmptcnn_gtd.js:27:10)\n    at Object.<anonymous> (/tmp/tmptcnn_gtd.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    var opening_brackets = [];\n    var\
    \ closing_brackets = [];\n    for(var i = 0; i < brackets.length; i++){\n    \
    \    if(brackets[i] == \"<\"){\n            opening_brackets.push(brackets[i]);\n\
    \        }\n        if(brackets[i] == \">\"){\n            closing_brackets.push(brackets[i]);\n\
    \        }\n    }\n    for(var i = 0; i < opening_brackets.length; i++){\n   \
    \     if(closing_brackets.indexOf(opening_brackets[i]) == -1){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpt7e21yfr.js:36:10)\n    at Object.<anonymous> (/tmp/tmpt7e21yfr.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    opening_brackets.forEach(function(opening_bracket){\n        if(opening_bracket==\"\
    <\"){\n            closing_brackets.push(\"</\"+opening_bracket+\">\");\n    \
    \    }\n        else if(opening_bracket==\">\"){\n            closing_brackets.push(\"\
    <\"+opening_bracket+\">\");\n        }\n    });\n    return closing_brackets.every(function(closing_bracket){\n\
    \        return brackets.indexOf(closing_bracket)!=-1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp40353u7p.js:32:10)\n    at Object.<anonymous> (/tmp/tmp40353u7p.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp6jitousu.js:29:10)\n    at Object.<anonymous> (/tmp/tmp6jitousu.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_brackets[(i +\
    \ 1) % opening_brackets.length];\n        if(opening_bracket != closing_bracket){\n\
    \            closing_brackets.push(closing_bracket);\n        }\n    }\n    return\
    \ closing_brackets.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_auxrkqi.js:29:10)\n    at Object.<anonymous> (/tmp/tmp_auxrkqi.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\");\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] == \"/\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else if(opening_brackets[i] == \"!\"){\n          \
    \  closing_brackets.push(\"/>\");\n        }\n        else if(opening_brackets[i]\
    \ == \"?\"){\n            closing_brackets.push(\"/>\");\n        }\n        else\
    \ if(opening_brackets[i] == \"%\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] == \"&\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else if(opening_brackets[i] == \"'\"){\n          \
    \  closing_brackets.push(\"/>\");\n        }\n        else if(opening_brackets[i]\
    \ == \"#\"){\n            closing_brackets.push(\"/>\");\n        }\n        else\
    \ if(opening_brackets[i] == \"*\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] == \"(\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else if(opening_brackets[i] == \")\"){\n          \
    \  closing_brackets.push(\"/>\");\n        }\n        else if(opening_brackets[i]\
    \ == \":\"){\n            closing_brackets.push(\"/>\");\n        }\n        else\
    \ if(opening_brackets[i] == \";\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] == \",\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else if(opening_brackets[i] == \"/\"){\n          \
    \  closing_brackets.push(\"/>\");\n        }\n        else if(opening_brackets[i]\
    \ == \"[\"){\n            closing_brackets.push(\"/>\");\n        }\n        else\
    \ if(opening_brackets[i] == \"]\"){\n            closing_brackets.push(\"/>\"\
    );\n        }\n        else if(opening_brackets[i] == \"{\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else if(opening_brackets[i] == \"}\"){\n          \
    \  closing_b\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpscy1npcv.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = false;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5tojsvdf.js:28:10)\n    at Object.<anonymous> (/tmp/tmp5tojsvdf.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4xcylaxh.js:27:10)\n    at Object.<anonymous> (/tmp/tmp4xcylaxh.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ == \"<\"){\n\t\t\tclosing_brackets.push(\"</\" + opening_brackets[i + 2] + \"\
    >\");\n\t\t}\n\t\telse if(opening_brackets[i] == \">\"){\n\t\t\tclosing_brackets.push(\"\
    <\" + opening_brackets[i + 2] + \">\");\n\t\t}\n\t}\n\treturn closing_brackets.length\
    \ == opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvpvynmhq.js:34:10)\n    at Object.<anonymous> (/tmp/tmpvpvynmhq.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"<\");\n  var closing_brackets = brackets.split(\"\
    >\");\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i].length\
    \ > closing_brackets[i].length){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpc5pd4p_q.js:27:10)\n    at Object.<anonymous> (/tmp/tmpc5pd4p_q.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    return opening_brackets.length == closing_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdjv7gxbj.js:26:10)\n    at Object.<anonymous> (/tmp/tmpdjv7gxbj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  return opening_brackets && closing_brackets && opening_brackets.length\
    \ === closing_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyw73svjz.js:26:10)\n    at Object.<anonymous> (/tmp/tmpyw73svjz.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"<\");\n  var closing_brackets = brackets.split(\"\
    >\");\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpl5opg68g.js:27:10)\n    at Object.<anonymous> (/tmp/tmpl5opg68g.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \  return all_opening_brackets.every(function(opening_bracket){\n    return opening_bracket.match(/\\\
    <+/g).length === opening_bracket.match(/\\<+/g).length + 1;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyncqtdoi.js:25:10)\n    at Object.<anonymous> (/tmp/tmpyncqtdoi.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i=0; i<opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpsgwwpev6.js:27:10)\n    at Object.<anonymous> (/tmp/tmpsgwwpev6.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp9dl6pp0y.js:27:10)\n    at Object.<anonymous> (/tmp/tmp9dl6pp0y.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  var opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n  var closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n  return opening_brackets_count === closing_brackets_count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwa3v0vo4.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwa3v0vo4.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tvar opening = brackets[i];\n\t\tvar closing = brackets[(i+1)%brackets.length];\n\
    \t\tif(opening === closing){\n\t\t\tbrackets.splice(i,1);\n\t\t}\n\t}\n\treturn\
    \ brackets.join(\"\") === \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpf0zrx34u.js:28:10)\n    at Object.<anonymous> (/tmp/tmpf0zrx34u.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_bracket;\n    if(opening_bracket == \"<\"){\n\
    \      closing_bracket = \">\";\n    }\n    else if(opening_bracket == \">\"){\n\
    \      closing_bracket = \"<\";\n    }\n    else if(opening_bracket == \"<>\"\
    ){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket == \"\
    <<>\"){\n      closing_bracket = \"<>>\";\n    }\n    else if(opening_bracket\
    \ == \"<><>\"){\n      closing_bracket = \"<>><>>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>>\"){\n      closing_bracket = \"<>><>>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><>>\"){\n      closing_bracket = \"<>><>><>>\";\n    }\n    else\
    \ if(opening_bracket == \"<<><>><>><>>\"){\n      closing_bracket = \"<>><>><>><>>\"\
    ;\n    }\n    else if(opening_bracket == \"<<><>><>><>><>>\"){\n      closing_bracket\
    \ = \"<>><>><>><>><>>\";\n    }\n    else if(opening_bracket == \"<<><>><>><>><>><>>\"\
    ){\n      closing_bracket = \"<>><>><>><>><>><>>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><>><>><>><>><>>\"){\n      closing_bracket = \"<>><>><>><>><>><>><>>\"\
    ;\n    }\n    else if(opening_bracket == \"<<><>><>><>><>><>><>><>>\"){\n    \
    \  closing_bracket = \"<>><>><>><>><>><>><>><>>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><>><>><>><>><>><>><>>\"){\n      closing_bracket = \"<>><>><>><>><>><>><>><>><>>\"\
    ;\n    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpobjz_8tp.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = false;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] ===\
    \ closing_brackets[i]){\n            correct_bracketing = true;\n        }\n \
    \   }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5dygl120.js:28:10)\n    at Object.<anonymous> (/tmp/tmp5dygl120.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  opening_brackets.forEach(function(opening_bracket){\n    closing_brackets.push(opening_bracket);\n\
    \    closing_brackets.push(\"</\"+opening_bracket+\">\");\n  });\n  return closing_brackets.join(\"\
    \") === brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpr7uk8nix.js:26:10)\n    at Object.<anonymous> (/tmp/tmpr7uk8nix.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar all_opening_brackets_closed = [];\n\t\n\tfor(var i=0; i<opening_brackets.length;\
    \ i++){\n\t\tfor(var j=0; j<closing_brackets.length; j++){\n\t\t\tif(opening_brackets[i]\
    \ == closing_brackets[j]){\n\t\t\t\tall_opening_brackets_closed.push(opening_brackets[i]);\n\
    \t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\tclosing_brackets.splice(j, 1);\n\
    \t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn all_opening_brackets_closed.length\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfttfvh9k.js:36:10)\n    at Object.<anonymous> (/tmp/tmpfttfvh9k.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    \n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(closing_brackets[i] != opening_brackets[i]){\n           \
    \ return false;\n        }\n    }\n    \n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpaerq_0n7.js:29:10)\n    at Object.<anonymous> (/tmp/tmpaerq_0n7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar all_opening_brackets_are_closing_brackets = true;\n\tfor\
    \ (var i = 0; i < opening_brackets.length; i++){\n\t\tif (closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\tall_opening_brackets_are_closing_brackets =\
    \ false;\n\t\t}\n\t}\n\treturn all_opening_brackets_are_closing_brackets;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpsrymxj0b.js:28:10)\n    at Object.<anonymous> (/tmp/tmpsrymxj0b.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i=0; i<opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        if(opening_bracket == \"<\"){\n            closing_brackets.push(\"\
    </\");\n        }\n        else if(opening_bracket == \">\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else{\n            closing_brackets.push(opening_bracket);\n\
    \        }\n    }\n    return closing_brackets.join(\"\") == brackets;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpjn37r0qb.js:34:10)\n    at Object.<anonymous> (/tmp/tmpjn37r0qb.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_brackets_count = opening_brackets_count\
    \ - closing_brackets_count;\n    return correct_brackets_count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9n24xfjj.js:29:10)\n    at Object.<anonymous> (/tmp/tmp9n24xfjj.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = false;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] ===\
    \ closing_brackets[i]){\n            correct_bracketing = true;\n        }\n \
    \   }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpwfr4mzdh.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwfr4mzdh.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  opening_brackets.forEach(function(opening_bracket, i){\n   \
    \ if(opening_bracket != closing_brackets[i]){\n      return false;\n    }\n  });\n\
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp54j7frqt.js:31:10)\n    at Object.<anonymous> (/tmp/tmp54j7frqt.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(elem){\n\
    \        return elem != \"\";\n    });\n    return all_opening_brackets_set.length\
    \ == all_opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5cegeqkx.js:30:10)\n    at Object.<anonymous> (/tmp/tmp5cegeqkx.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tif(brackets[i+2]\
    \ === \">\"){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpjptffmj4.js:30:10)\n    at Object.<anonymous> (/tmp/tmpjptffmj4.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse().join(\"\");\n  return opening_brackets.every(function(opening_bracket,\
    \ index){\n    return closing_brackets.indexOf(opening_bracket) !== -1;\n  });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp80au_z0o.js:28:10)\n    at Object.<anonymous> (/tmp/tmp80au_z0o.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets == null || closing_brackets == null){\n    return\
    \ false;\n  }\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpx5slpqf2.js:30:10)\n    at Object.<anonymous> (/tmp/tmpx5slpqf2.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = false;\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ == \"<\"){\n\t\t\tvar next_opening_bracket = opening_brackets[i+1];\n\t\t\t\
    if(!next_opening_bracket){\n\t\t\t\tcorrect_bracketing = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\tif(next_opening_bracket == \"<\"){\n\t\t\t\tcorrect_bracketing\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0h6cz35w.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0h6cz35w.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tvar opening = brackets[i];\n\t\tvar closing = brackets[(i + 1) % brackets.length];\n\
    \t\tif(opening === closing){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp1hrj072j.js:29:10)\n    at Object.<anonymous> (/tmp/tmp1hrj072j.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if (opening_brackets[i] != closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpq25c35cg.js:29:10)\n    at Object.<anonymous> (/tmp/tmpq25c35cg.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = true;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3sov3f19.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3sov3f19.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  var opening_brackets_count = opening_brackets.length;\n  var\
    \ closing_brackets_count = closing_brackets.length;\n  \n  for(var i = 0; i <\
    \ opening_brackets_count; i++){\n    if(opening_brackets[i] !== closing_brackets[i]){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp6n5jwv83.js:30:10)\n    at Object.<anonymous> (/tmp/tmp6n5jwv83.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = false;\n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n\
    \            correct_bracketing = true;\n        }\n    }\n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5sstr2es.js:28:10)\n    at Object.<anonymous> (/tmp/tmp5sstr2es.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket){\n        return\
    \ opening_brackets.indexOf(opening_bracket) >= 0;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpf51t3o8s.js:25:10)\n    at Object.<anonymous> (/tmp/tmpf51t3o8s.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tif(brackets[i+2]\
    \ === \"<\"){\n\t\t\t\t\tif(brackets[i+3] === \"<\"){\n\t\t\t\t\t\treturn false;\n\
    \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxdak1glg.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxdak1glg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ === closing_brackets[i]){\n      opening_brackets.splice(i, 1);\n      closing_brackets.splice(i,\
    \ 1);\n    }\n  }\n  return opening_brackets.length === 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpo50tjucq.js:28:10)\n    at Object.<anonymous> (/tmp/tmpo50tjucq.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor(var i=0; i<opening_brackets.length; i++){\n\t\tif(opening_brackets[i] ===\
    \ \"<\"){\n\t\t\tvar next_opening_bracket = opening_brackets[i+1];\n\t\t\tif(!next_opening_bracket){\n\
    \t\t\t\tcorrect_bracketing = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(next_opening_bracket\
    \ === \"<\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphgw637up.js:36:10)\n    at Object.<anonymous> (/tmp/tmphgw637up.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\</g);\n\tvar closing_brackets = brackets.match(/\\\
    >/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \t\treturn opening_bracket.match(/\\>/g);\n\t});\n\treturn all_opening_brackets_set.length\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpm28vy4n7.js:26:10)\n    at Object.<anonymous> (/tmp/tmpm28vy4n7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpwzy_an8l.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwzy_an8l.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp543cq8v3.js:29:10)\n    at Object.<anonymous> (/tmp/tmp543cq8v3.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] !== closing_brackets[i]){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzq8zmwis.js:29:10)\n    at Object.<anonymous> (/tmp/tmpzq8zmwis.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets == null || closing_brackets == null){\n    return\
    \ false;\n  }\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmptpb6mea7.js:30:10)\n    at Object.<anonymous> (/tmp/tmptpb6mea7.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp46y69ya3.js:29:10)\n    at Object.<anonymous> (/tmp/tmp46y69ya3.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t\tclosing_brackets.push(opening_brackets[i+1]);\n\t}\n\treturn closing_brackets.join(\"\
    \") === brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp29hcv5fd.js:26:10)\n    at Object.<anonymous> (/tmp/tmp29hcv5fd.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_closing_brackets = closing_brackets.concat(opening_brackets);\n \
    \   return all_opening_brackets.length === all_closing_brackets.length;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpatny08ri.js:28:10)\n    at Object.<anonymous> (/tmp/tmpatny08ri.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp56g848c2.js:29:10)\n    at Object.<anonymous> (/tmp/tmp56g848c2.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp64h0s5ur.js:33:10)\n    at Object.<anonymous> (/tmp/tmp64h0s5ur.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if(opening_brackets[i] !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp24uhpmm_.js:28:10)\n    at Object.<anonymous> (/tmp/tmp24uhpmm_.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var opening_brackets_length = opening_brackets.length;\n    for(var\
    \ i = 0; i < opening_brackets_length; i++){\n        var opening_bracket = opening_brackets[i];\n\
    \        var closing_bracket = opening_bracket;\n        if(opening_bracket ==\
    \ \"<\"){\n            closing_bracket = \">\";\n        }\n        else if(opening_bracket\
    \ == \">\"){\n            closing_bracket = \"<\";\n        }\n        closing_brackets.push(closing_bracket);\n\
    \    }\n    var opening_brackets_length = closing_brackets.length;\n    for(var\
    \ i = 0; i < opening_brackets_length; i++){\n        var opening_bracket = opening_brackets[i];\n\
    \        var closing_bracket = closing_brackets[i];\n        if(opening_bracket\
    \ != closing_bracket){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4qr2ie5k.js:42:10)\n    at Object.<anonymous> (/tmp/tmp4qr2ie5k.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpagf__6dl.js:28:10)\n    at Object.<anonymous> (/tmp/tmpagf__6dl.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpa81b1l0c.js:29:10)\n    at Object.<anonymous> (/tmp/tmpa81b1l0c.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i+1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmplx5ubd73.js:34:10)\n    at Object.<anonymous> (/tmp/tmplx5ubd73.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t\tif(opening_brackets[i+1] == \"<\"){\n\t\t\tclosing_brackets.push(\"</\" +\
    \ opening_brackets[i] + \">\");\n\t\t}\n\t}\n\t\n\treturn closing_brackets.join(\"\
    \") == brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmplim8e8t8.js:31:10)\n    at Object.<anonymous> (/tmp/tmplim8e8t8.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    return opening_brackets.length == closing_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9803bizw.js:26:10)\n    at Object.<anonymous> (/tmp/tmp9803bizw.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \">\"){\n            correct_bracketing\
    \ = false;\n            break;\n        }\n    }\n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7c3yz0gy.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7c3yz0gy.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = true;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpromef8s6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpromef8s6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g).length === opening_bracket.match(/\\\
    >+/g).length;\n    });\n    return all_opening_brackets_set.length === 0;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8h5xetnd.js:16\n        return opening_bracket.match(/\\<+/g).length\
    \ === opening_bracket.match(/\\>+/g).length;\n                               \
    \                                                      ^\n\nTypeError: Cannot\
    \ read property 'length' of null\n    at /tmp/tmp8h5xetnd.js:16:86\n    at Array.filter\
    \ (<anonymous>)\n    at correct_bracketing (/tmp/tmp8h5xetnd.js:15:57)\n    at\
    \ test (/tmp/tmp8h5xetnd.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8h5xetnd.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var brackets_array = brackets.split(\"\");\n  var correct_bracketing = false;\n\
    \  for (var i = 0; i < brackets_array.length; i++){\n    if (brackets_array[i]\
    \ === \"<\"){\n      if (brackets_array[i+1] === \"<\"){\n        correct_bracketing\
    \ = true;\n      }\n    }\n    if (brackets_array[i] === \">\"){\n      if (brackets_array[i+1]\
    \ === \">\"){\n        correct_bracketing = true;\n      }\n    }\n  }\n  return\
    \ correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpswgay66z.js:34:10)\n    at Object.<anonymous> (/tmp/tmpswgay66z.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = false;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp2yecdqf1.js:28:10)\n    at Object.<anonymous> (/tmp/tmp2yecdqf1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \">\"){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjskyovyn.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjskyovyn.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse if(brackets[i] === \">\"){\n\t\t\tif(brackets[i-1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpsbzepetu.js:34:10)\n    at Object.<anonymous> (/tmp/tmpsbzepetu.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    return opening_brackets_count === closing_brackets_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkh4zabtf.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkh4zabtf.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !=\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpam1f3j1y.js:29:10)\n    at Object.<anonymous> (/tmp/tmpam1f3j1y.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  opening_brackets.forEach(function(opening_bracket){\n    closing_brackets.push(opening_bracket);\n\
    \    closing_brackets.push(\"</\"+opening_bracket+\">\");\n  });\n  return closing_brackets.every(function(closing_bracket){\n\
    \    return brackets.indexOf(closing_bracket) !== -1;\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqjlsgorr.js:28:10)\n    at Object.<anonymous> (/tmp/tmpqjlsgorr.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i] +\
    \ \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n       \
    \     closing_brackets.push(\"<\" + opening_brackets[i] + \">\");\n        }\n\
    \    }\n    return closing_brackets.join(\"\") == brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpq5hoscaq.js:30:10)\n    at Object.<anonymous> (/tmp/tmpq5hoscaq.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        if(opening_bracket == \"<\"){\n            closing_brackets.push(\"\
    </\" + opening_bracket);\n        }\n        else if(opening_bracket == \">\"\
    ){\n            closing_brackets.push(opening_bracket);\n        }\n        else{\n\
    \            closing_brackets.push(opening_bracket);\n        }\n    }\n    return\
    \ closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqtanpi6d.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqtanpi6d.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ == \"<\"){\n\t\t\tclosing_brackets.push(\"</\");\n\t\t}\n\t\telse if(opening_brackets[i]\
    \ == \">\"){\n\t\t\tclosing_brackets.push(\"/>\");\n\t\t}\n\t\telse{\n\t\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t\t}\n\t}\n\treturn closing_brackets.join(\"\") == brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4fzdjkmm.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4fzdjkmm.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7g4mru0b.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7g4mru0b.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpo6zkvkda.js:29:10)\n    at Object.<anonymous> (/tmp/tmpo6zkvkda.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    \n    for(var\
    \ i = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i] !=\
    \ closing_brackets[closing_brackets_length-i-1]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmhom0v0m.js:34:10)\n    at Object.<anonymous> (/tmp/tmpmhom0v0m.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpg7akf4wf.js:32:10)\n    at Object.<anonymous> (/tmp/tmpg7akf4wf.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  var correct_bracketing = false;\n  for(var i=0; i<opening_brackets.length;\
    \ i++){\n    if(opening_brackets[i] === closing_brackets[i]){\n      correct_bracketing\
    \ = true;\n    }\n  }\n  return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp486rusze.js:28:10)\n    at Object.<anonymous> (/tmp/tmp486rusze.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\t\n\tvar correct_bracketing = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfaomhok6.js:31:10)\n    at Object.<anonymous> (/tmp/tmpfaomhok6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i+1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpoa5qvm6b.js:34:10)\n    at Object.<anonymous> (/tmp/tmpoa5qvm6b.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ !== \"<\"){\n            correct_bracketing = false;\n            break;\n \
    \       }\n    }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphzknfjam.js:28:10)\n    at Object.<anonymous> (/tmp/tmphzknfjam.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i] +\
    \ \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n       \
    \     closing_brackets.push(opening_brackets[i] + \"<\");\n        }\n    }\n\
    \    return closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqdt5qnni.js:30:10)\n    at Object.<anonymous> (/tmp/tmpqdt5qnni.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var correct_brackets = opening_brackets.every(function(opening_bracket){\n\
    \        return closing_brackets.indexOf(opening_bracket) !== -1;\n    });\n \
    \   return correct_brackets;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpuux4s537.js:25:10)\n    at Object.<anonymous> (/tmp/tmpuux4s537.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tvar opening = brackets[i+1];\n\t\t\tvar\
    \ closing = brackets[i+2];\n\t\t\tif(brackets[i+3] === \">\"){\n\t\t\t\tbrackets[i+3]\
    \ = opening;\n\t\t\t\tbrackets[i+2] = closing;\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn brackets.join(\"\") === brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpdfokqigh.js:32:10)\n    at Object.<anonymous> (/tmp/tmpdfokqigh.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var all_opening_brackets_count = opening_brackets_count\
    \ + closing_brackets_count;\n    var correct_bracketing = false;\n    \n    if(opening_brackets_count\
    \ === all_opening_brackets_count){\n        correct_bracketing = true;\n    }\n\
    \    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpd6tokdo5.js:31:10)\n    at Object.<anonymous> (/tmp/tmpd6tokdo5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_bracket;\n   \
    \     if(opening_bracket == \"<\"){\n            closing_bracket = \">\";\n  \
    \      }\n        else if(opening_bracket == \">\"){\n            closing_bracket\
    \ = \"<\";\n        }\n        closing_brackets.push(closing_bracket);\n    }\n\
    \    return closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp9vciutrs.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9vciutrs.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse().join(\"\");\n    var correct_bracketing = false;\n\
    \    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === closing_brackets[i]){\n            correct_bracketing = true;\n        }\n\
    \    }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpf74dxuf3.js:28:10)\n    at Object.<anonymous> (/tmp/tmpf74dxuf3.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"<\");\n  var closing_brackets = brackets.split(\"\
    >\");\n  \n  for(var i = 0; i < opening_brackets.length; i++){\n    if(closing_brackets[i]\
    \ != opening_brackets[i]){\n      return false;\n    }\n  }\n  \n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp422ki3l4.js:29:10)\n    at Object.<anonymous> (/tmp/tmp422ki3l4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var correct_bracketing = false;\n    \n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] ===\
    \ closing_brackets[i]){\n            correct_bracketing = true;\n        }\n \
    \   }\n    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8rtxtf_c.js:30:10)\n    at Object.<anonymous> (/tmp/tmp8rtxtf_c.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    \n    for(var\
    \ i = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i] ===\
    \ closing_brackets[i]){\n            continue;\n        }\n        \n        if(opening_brackets[i]\
    \ !== opening_brackets[opening_brackets_length-1]){\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpxtje760d.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxtje760d.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i]\
    \ === closing_brackets[opening_brackets_length - i]){\n            correct_bracketing\
    \ = true;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp2tesw5ok.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2tesw5ok.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        if(opening_bracket == \"<\"){\n            closing_brackets.push(\"\
    </\" + opening_bracket.substring(1) + \">\");\n        }\n        else if(opening_bracket\
    \ == \">\"){\n            closing_brackets.push(opening_bracket.substring(1));\n\
    \        }\n    }\n    return closing_brackets.join(\"|\") == \"|</|\";\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpkm1qylmb.js:31:10)\n    at Object.<anonymous> (/tmp/tmpkm1qylmb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !=\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7wqljd6t.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7wqljd6t.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpujiz5yxu.js:27:10)\n    at Object.<anonymous> (/tmp/tmpujiz5yxu.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tif(brackets[i+2]\
    \ === \">\"){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqcrwy07o.js:30:10)\n    at Object.<anonymous> (/tmp/tmpqcrwy07o.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets.length; i++){\n\t\tif(all_opening_brackets[i]\
    \ !== all_opening_brackets[all_opening_brackets.length - 1 - i]){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpt0ygcl0a.js:30:10)\n    at Object.<anonymous> (/tmp/tmpt0ygcl0a.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var i;\n    var\
    \ j;\n    var k;\n    var l;\n    var found;\n    var found2;\n    var found3;\n\
    \    var found4;\n    var found5;\n    var found6;\n    var found7;\n    var found8;\n\
    \    var found9;\n    var found10;\n    var found11;\n    var found12;\n    var\
    \ found13;\n    var found14;\n    var found15;\n    var found16;\n    var found17;\n\
    \    var found18;\n    var found19;\n    var found20;\n    var found21;\n    var\
    \ found22;\n    var found23;\n    var found24;\n    var found25;\n    var found26;\n\
    \    var found27;\n    var found28;\n    var found29;\n    var found30;\n    var\
    \ found31;\n    var found32;\n    var found33;\n    var found34;\n    var found35;\n\
    \    var found36;\n    var found37;\n    var found38;\n    var found39;\n    var\
    \ found40;\n    var found41;\n    var found42;\n    var found43;\n    var found44;\n\
    \    var found45;\n    var found46;\n    var found47;\n    var found48;\n    var\
    \ found49;\n    var found50;\n    var found51;\n    var found52;\n    var found53;\n\
    \    var found54;\n    var found55;\n    var found56;\n    var found57;\n    var\
    \ found58;\n    var found59;\n    var found60;\n    var found61;\n    var found62;\n\
    \    var found63;\n    var found64;\n    var found65;\n    var found66;\n    var\
    \ found67;\n    var found68;\n    var found69;\n    var found70;\n    var found71;\n\
    \    var found72;\n    var found73;\n    var found74;\n    var found75;\n    var\
    \ found76;\n    var found77;\n    var found78;\n    var found79;\n    var found80;\n\
    \    var found81;\n    var found82;\n    var found83;\n    var found84;\n    var\
    \ found85;\n    var found86;\n    var found87;\n    var found88;\n    var found89;\n\
    \    var found90;\n    var found91;\n    var found92;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzz8b0c61.js:132\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ \"\";\n    var i;\n    for(i = 0; i < opening_brackets.length; i++){\n     \
    \   if(opening_brackets[i] === \"<\"){\n            closing_brackets += \"</\"\
    \ + opening_brackets[i] + \">\";\n        }\n        else if(opening_brackets[i]\
    \ === \"<\" && closing_brackets[closing_brackets.length-1] !== \"/\" + opening_brackets[i]){\n\
    \            closing_brackets += \"</\" + opening_brackets[i] + \">\";\n     \
    \   }\n        else if(opening_brackets[i] === \"<\" && closing_brackets[closing_brackets.length-1]\
    \ === \"</\" + opening_brackets[i]+\">\"){\n            closing_brackets += \"\
    </\" + opening_brackets[i] + \">\";\n        }\n        else if(opening_brackets[i]\
    \ === \"<\" && closing_brackets[closing_brackets.length-1] === \"</\" + opening_brackets[i]+\"\
    >\" && opening_brackets[i+1] !== \"<\"){\n            closing_brackets += \"</\"\
    \ + opening_brackets[i] + \">\";\n        }\n        else if(opening_brackets[i]\
    \ === \"<\" && closing_brackets[closing_brackets.length-1] === \"</\" + opening_brackets[i]+\"\
    >\" && opening_brackets[i+1] === \"<\"){\n            closing_brackets += \"</\"\
    \ + opening_brackets[i] + \">\";\n        }\n        else if(opening_brackets[i]\
    \ === \"<\" && closing_brackets[closing_brackets.length-1] === \"</\" + opening_brackets[i]+\"\
    >\" && opening_brackets[i+1] === \"<\" && opening_brackets[i+2] === \"<\"){\n\
    \            closing_brackets += \"</\" + opening_brackets[i] + \">\";\n     \
    \   }\n        else if(opening_brackets[i] === \"<\" && closing_brackets[closing_brackets.length-1]\
    \ === \"</\" + opening_brackets[i]+\">\" && opening_brackets[i+1] === \"<\" &&\
    \ opening_brackets[i+2] === \"<\" && opening_brackets[i+3] === \"<\"){\n     \
    \       closing_brackets += \"</\" + opening_brackets[i] + \">\";\n        }\n\
    \        else if(opening_brackets[i] === \"<\" && closing_brackets[closing_brackets.length-1]\
    \ === \"</\" + opening_bracket\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpni20f1ug.js:38\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i=0; i<brackets.length; i++){\n\t\
    \tif(brackets[i] == \"<\"){\n\t\t\tif(brackets[i+1] == \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] == \">\"){\n\t\t\tif(brackets[i+1]\
    \ == \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqfh9o5c_.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqfh9o5c_.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_brackets[(i+1)%opening_brackets.length];\n\
    \    if(opening_bracket != closing_bracket){\n      closing_brackets.push(closing_bracket);\n\
    \    }\n  }\n  return closing_brackets.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyux53hwh.js:29:10)\n    at Object.<anonymous> (/tmp/tmpyux53hwh.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] === \"<\"){\n            if(brackets[i+1] ===\
    \ \"<\"){\n                if(brackets[i+2] === \"<\"){\n                    if(brackets[i+3]\
    \ === \"<\"){\n                        return false;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpztw5t_t3.js:36:10)\n    at Object.<anonymous> (/tmp/tmpztw5t_t3.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpc3ukbkku.js:27:10)\n    at Object.<anonymous> (/tmp/tmpc3ukbkku.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var opening_brackets_length = opening_brackets.length;\n    for(var\
    \ i = 0; i < opening_brackets_length; i++){\n        var opening_bracket = opening_brackets[i];\n\
    \        var closing_bracket = opening_brackets[(i + 1) % opening_brackets_length];\n\
    \        if(opening_bracket != closing_bracket){\n            closing_brackets.push(closing_bracket);\n\
    \        }\n    }\n    return closing_brackets.length == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpmh8gfvxq.js:30:10)\n    at Object.<anonymous> (/tmp/tmpmh8gfvxq.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i-1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8oxqc0lq.js:34:10)\n    at Object.<anonymous> (/tmp/tmp8oxqc0lq.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        if(opening_bracket == \"<\"){\n            closing_brackets.push(\"\
    </\");\n        }\n        else if(opening_bracket == \">\"){\n            closing_brackets.push(\"\
    />\");\n        }\n        else{\n            closing_brackets.push(opening_bracket);\n\
    \        }\n    }\n    return closing_brackets.join(\"\") == brackets;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpumk1fp9w.js:34:10)\n    at Object.<anonymous> (/tmp/tmpumk1fp9w.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \  if(all_opening_brackets.length == 0){\n    return false;\n  }\n  for(var i\
    \ = 0; i < all_opening_brackets.length; i++){\n    var opening_bracket = all_opening_brackets[i];\n\
    \    var closing_bracket = all_opening_brackets[i+1];\n    if(opening_bracket\
    \ != closing_bracket){\n      return false;\n    }\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmph705ryjz.js:33:10)\n    at Object.<anonymous> (/tmp/tmph705ryjz.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_bracket;\n    for(var j=i+1; j<opening_brackets.length;\
    \ j++){\n      closing_bracket = closing_bracket+opening_brackets[j];\n      if(closing_brackets.indexOf(closing_bracket)==-1){\n\
    \        closing_brackets.push(closing_bracket);\n      }\n    }\n  }\n  return\
    \ closing_brackets.length==0;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp27q8c69h.js:32:10)\n    at Object.<anonymous> (/tmp/tmp27q8c69h.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    var opening_brackets = brackets.filter(function(bracket){\n\
    \        return bracket == \"<\";\n    });\n    var closing_brackets = brackets.filter(function(bracket){\n\
    \        return bracket == \">\";\n    });\n    return opening_brackets.length\
    \ == closing_brackets.length;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy42obo03.js:32:10)\n    at Object.<anonymous> (/tmp/tmpy42obo03.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = true;\n    for(var i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = false;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpv2uinokl.js:28:10)\n    at Object.<anonymous> (/tmp/tmpv2uinokl.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse().join(\"\");\n  return opening_brackets.every(function(opening_bracket,\
    \ i){\n    return closing_brackets.indexOf(opening_bracket) === i;\n  });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7hby4ucw.js:24:10)\n    at Object.<anonymous> (/tmp/tmp7hby4ucw.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    var i;\n    for(i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpqvt5zq72.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqvt5zq72.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_brackets[(i +\
    \ 1) % opening_brackets.length];\n        if(opening_bracket != closing_bracket){\n\
    \            closing_brackets.push(closing_bracket);\n        }\n    }\n    return\
    \ closing_brackets.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpl_xc5jm9.js:29:10)\n    at Object.<anonymous> (/tmp/tmpl_xc5jm9.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  opening_brackets.forEach(function(opening_bracket){\n    closing_brackets.push(opening_bracket);\n\
    \    closing_brackets.push(\"</\"+opening_bracket+\">\");\n  });\n  return closing_brackets.every(function(closing_bracket){\n\
    \    return opening_brackets.indexOf(closing_bracket) == -1;\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7ypkwmox.js:28:10)\n    at Object.<anonymous> (/tmp/tmp7ypkwmox.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar correct = true;\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\tcorrect =\
    \ false;\n\t\t}\n\t}\n\treturn correct;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp6r_h4wtr.js:29:10)\n    at Object.<anonymous> (/tmp/tmp6r_h4wtr.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tvar opening = brackets[i+1];\n\t\t\tvar\
    \ closing = brackets[i+2];\n\t\t\tif((opening === \"<\" && closing === \">\")\
    \ || (opening === \">\" && closing === \"<\")){\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpsvoslto9.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsvoslto9.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] === \"<\"){\n            if(brackets[i+1] ===\
    \ \">\"){\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwzrnd_j6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpwzrnd_j6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var correct_bracketing = false;\n    \n\
    \    if(opening_brackets_count === closing_brackets_count){\n        correct_bracketing\
    \ = true;\n    }\n    \n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc5_ra_da.js:34:10)\n    at Object.<anonymous> (/tmp/tmpc5_ra_da.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket){\n        return\
    \ closing_brackets.indexOf(opening_bracket) == -1;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphlb7s3fp.js:25:10)\n    at Object.<anonymous> (/tmp/tmphlb7s3fp.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\tif (opening_bracket\
    \ == \"<\"){\n\t\t\tclosing_bracket = \">\";\n\t\t}\n\t\telse if (opening_bracket\
    \ == \">\"){\n\t\t\tclosing_bracket = \"<\";\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\treturn (opening_brackets.length == closing_brackets.length);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm71j6td5.js:37:10)\n    at Object.<anonymous> (/tmp/tmpm71j6td5.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = false;\n    for(var i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = true;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpw6l8nijk.js:32:10)\n    at Object.<anonymous> (/tmp/tmpw6l8nijk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i+1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpbvk2e9qp.js:34:10)\n    at Object.<anonymous> (/tmp/tmpbvk2e9qp.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\</g);\n\tvar closing_brackets = brackets.match(/\\\
    >/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets\
    \ = brackets.match(/\\>/g);\n\tvar all_closing_brackets_length = all_closing_brackets.length;\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\n\tvar all_opening_brackets_length = all_opening_brackets.length;\n\
    \tvar all_closing_brackets_length = all_closing_brackets.length;\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets.length;\n\tvar all_closing_brackets_length = all_closing_brackets.length;\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\n\tvar all_opening_brackets_length = all_opening_brackets.length;\n\
    \tvar all_closing_brackets_length = all_closing_brackets.length;\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets.length;\n\tvar all_closing_brackets_length = all_closing_brackets.length;\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\n\tvar all_opening_brackets_length = all_opening_brackets.length;\n\
    \tvar all_closing_brackets_length = all_closing_brackets.length;\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets.length;\n\tvar all_closing_brackets_length = all_closing_brackets.length;\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\n\tvar all_opening_brackets_length = all_opening_brackets.length;\n\
    \tvar all_closing_brackets_length = all_closing_brackets.length;\n\tvar all_opening_brackets_length\
    \ = all_opening_brackets.length;\n\tvar all_closing_brackets_length = all_closing_brackets.length;\n\
    \tvar all_opening_brackets_length = all_opening_brackets.length;\n\tvar all_closing_brackets_length\
    \ = all_closing_brackets.length;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgkkued5r.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i = 0; i < opening_brackets.length; i++){\n    var opening_bracket\
    \ = opening_brackets[i];\n    var closing_bracket = opening_brackets[(i + 1) %\
    \ opening_brackets.length];\n    if(opening_bracket != closing_bracket){\n   \
    \   closing_brackets.push(closing_bracket);\n    }\n  }\n  return closing_brackets.length\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzlqw6r91.js:29:10)\n    at Object.<anonymous> (/tmp/tmpzlqw6r91.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\"+opening_brackets[i]+\"\
    >\");\n        }\n        else if(opening_brackets[i] == \">\"){\n           \
    \ closing_brackets.push(opening_brackets[i]+\"</\");\n        }\n    }\n    return\
    \ closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpgnf0q4wm.js:30:10)\n    at Object.<anonymous> (/tmp/tmpgnf0q4wm.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets == null || closing_brackets == null){\n    return\
    \ false;\n  }\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_gweh3qt.js:30:10)\n    at Object.<anonymous> (/tmp/tmp_gweh3qt.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    opening_brackets.forEach(function(opening_bracket){\n        if(opening_bracket\
    \ == \"<\"){\n            closing_brackets.push(\"</\");\n        }\n        else\
    \ if(opening_bracket == \">\"){\n            closing_brackets.push(\"/>\");\n\
    \        }\n        else if(opening_bracket == \"<>\"){\n            closing_brackets.push(\"\
    />\");\n            closing_brackets.push(\"</\");\n        }\n    });\n    return\
    \ closing_brackets.every(function(closing_bracket){\n        return brackets.indexOf(closing_bracket)\
    \ == -1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpljuirdq1.js:40:10)\n    at Object.<anonymous> (/tmp/tmpljuirdq1.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar opening_brackets_count = opening_brackets ? opening_brackets.length\
    \ : 0;\n\tvar closing_brackets_count = closing_brackets ? closing_brackets.length\
    \ : 0;\n\tvar all_opening_brackets_count = opening_brackets_count + closing_brackets_count;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_opening_brackets_count_correct = all_opening_brackets_count === 0;\n\
    \tvar all_closing_bra\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpghbjcte0.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse().join(\"\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\
    \t\tif(opening_brackets[i] !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpw2fpcy_6.js:28:10)\n    at Object.<anonymous> (/tmp/tmpw2fpcy_6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i] +\
    \ \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n       \
    \     closing_brackets.push(opening_brackets[i] + \"</\" + opening_brackets[i]\
    \ + \">\");\n        }\n    }\n    return closing_brackets.join(\"\") == brackets;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3kzt9k_t.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3kzt9k_t.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    var opening_brackets = [];\n    var\
    \ closing_brackets = [];\n    for(var i = 0; i < brackets.length; i++){\n    \
    \    if(brackets[i] == \"<\"){\n            opening_brackets.push(i);\n      \
    \  }\n        if(brackets[i] == \">\"){\n            closing_brackets.push(i);\n\
    \        }\n    }\n    for(var i = 0; i < opening_brackets.length; i++){\n   \
    \     if(closing_brackets.indexOf(opening_brackets[i]) == -1){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmppenmzyox.js:36:10)\n    at Object.<anonymous> (/tmp/tmppenmzyox.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === \"<\"){\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(opening_brackets[i] === \">\"){\n\t\t\topening_brackets.splice(i,\
    \ 1);\n\t\t\tcorrect_bracketing = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx4cf311v.js:40:10)\n    at Object.<anonymous> (/tmp/tmpx4cf311v.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    var correct_bracketing = false;\n    for(var i=0;\
    \ i<opening_brackets.length; i++){\n        if(closing_brackets[i] != opening_brackets[i]){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5ekcq0bq.js:29:10)\n    at Object.<anonymous> (/tmp/tmp5ekcq0bq.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i-1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzwv9ljna.js:34:10)\n    at Object.<anonymous> (/tmp/tmpzwv9ljna.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    var opening_brackets_length = opening_brackets.length;\n\
    \    var closing_brackets_length = closing_brackets.length;\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < opening_brackets_length; i++){\n        if(opening_brackets[i]\
    \ === closing_brackets[i]){\n            correct_bracketing = true;\n        }\n\
    \    }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzjql3_kl.js:30:10)\n    at Object.<anonymous> (/tmp/tmpzjql3_kl.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ != closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmps1dgxzr9.js:27:10)\n    at Object.<anonymous> (/tmp/tmps1dgxzr9.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4b61plja.js:27:10)\n    at Object.<anonymous> (/tmp/tmp4b61plja.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    return opening_brackets_count === closing_brackets_count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvfg03jgg.js:28:10)\n    at Object.<anonymous> (/tmp/tmpvfg03jgg.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    var correct_bracketing = false;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(closing_brackets[i] != opening_brackets[i]){\n\
    \            correct_bracketing = false;\n        }\n        else{\n         \
    \   correct_bracketing = true;\n        }\n    }\n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp33sekqtm.js:31:10)\n    at Object.<anonymous> (/tmp/tmp33sekqtm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] !== closing_brackets[i]){\n\
    \            correct_bracketing = false;\n            break;\n        }\n    }\n\
    \    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7z8h18wt.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7z8h18wt.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n          \
    \  continue;\n        }\n        if(opening_brackets[i] === \"<\"){\n        \
    \    if(closing_brackets[i] !== \"<\"){\n                return false;\n     \
    \       }\n        }\n        else if(opening_brackets[i] === \">\"){\n      \
    \      if(closing_brackets[i] !== \"<\"){\n                return false;\n   \
    \         }\n        }\n        else{\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp73ki8g4z.js:40:10)\n    at Object.<anonymous> (/tmp/tmp73ki8g4z.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \">\"){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxtigko5u.js:32:10)\n    at Object.<anonymous> (/tmp/tmpxtigko5u.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket =\
    \ opening_brackets[i];\n\t\tvar closing_bracket = opening_brackets[(i + 1) % opening_brackets.length];\n\
    \t\tif(opening_bracket != closing_bracket){\n\t\t\tclosing_brackets.push(closing_bracket);\n\
    \t\t}\n\t}\n\treturn closing_brackets.length == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpk_q1pals.js:29:10)\n    at Object.<anonymous> (/tmp/tmpk_q1pals.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  opening_brackets.forEach(function(opening_bracket){\n    if(opening_bracket\
    \ == \"<\"){\n      closing_brackets.push(\"</\");\n    }\n    if(opening_bracket\
    \ == \">\"){\n      closing_brackets.push(\"/>\");\n    }\n  });\n  return closing_brackets.every(function(closing_bracket){\n\
    \    return brackets.indexOf(closing_bracket) == 0;\n  });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpvzht1tnl.js:32:10)\n    at Object.<anonymous> (/tmp/tmpvzht1tnl.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5cgiwpy6.js:29:10)\n    at Object.<anonymous> (/tmp/tmp5cgiwpy6.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \">\"){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxy40qdxc.js:32:10)\n    at Object.<anonymous> (/tmp/tmpxy40qdxc.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var correct_bracketing\
    \ = false;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \"<\"){\n            opening_brackets.splice(i, 1);\n            correct_bracketing\
    \ = true;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf0947ip_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf0947ip_.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = false;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] ===\
    \ closing_brackets[i]){\n            correct_bracketing = true;\n        }\n \
    \   }\n    return correct_bracketing;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpl_m88n0f.js:28:10)\n    at Object.<anonymous> (/tmp/tmpl_m88n0f.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var correct = true;\n    for(var i = 0; i <\
    \ opening_brackets.length; i++){\n        if(opening_brackets[i] !== closing_brackets[i]){\n\
    \            correct = false;\n        }\n    }\n    return correct;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp178nhlov.js:28:10)\n    at Object.<anonymous> (/tmp/tmp178nhlov.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  for(var i=0; i<opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ === closing_brackets[i]){\n      opening_brackets.splice(i, 1);\n      closing_brackets.splice(i,\
    \ 1);\n    }\n  }\n  return opening_brackets.length === 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpq3zs6k_b.js:28:10)\n    at Object.<anonymous> (/tmp/tmpq3zs6k_b.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing = false;\n\
    \tfor (var i = 0; i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i]\
    \ == \"<\"){\n\t\t\tif (opening_brackets[i+1] == \"<\"){\n\t\t\t\tcorrect_bracketing\
    \ = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp86qwmltj.js:29:10)\n    at Object.<anonymous> (/tmp/tmp86qwmltj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar all_opening_brackets_are_closing_brackets = true;\n\tfor(var\
    \ i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\tall_opening_brackets_are_closing_brackets = false;\n\t\t}\n\t}\n\treturn\
    \ all_opening_brackets_are_closing_brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp12q2xd_0.js:28:10)\n    at Object.<anonymous> (/tmp/tmp12q2xd_0.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(x){return\
    \ x!==undefined;});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\<+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\>+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\<+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\>+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\<+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\>+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(x){return\
    \ x.replace(/\\<+/g,'');});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(x){return\
    \ x!=='';});\n\tvar all_opening_bra\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuwuts81a.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \">\"){\n\t\t\tif(brackets[i+1]\
    \ === \">\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp83kho2_z.js:34:10)\n    at Object.<anonymous> (/tmp/tmp83kho2_z.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var i;\n    for(i = 0; i < opening_brackets.length; i++){\n       \
    \ if(opening_brackets[i] === \"<\"){\n            closing_brackets.push(\"</\"\
    \ + opening_brackets.slice(i).join(\"\") + \">\");\n        }\n    }\n    return\
    \ closing_brackets.join(\"\") === brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpi6wltjmu.js:28:10)\n    at Object.<anonymous> (/tmp/tmpi6wltjmu.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g).length === opening_bracket.match(/\\\
    >+/g).length;\n    });\n    return all_opening_brackets_set.length === 0;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphfwdhkqt.js:16\n        return opening_bracket.match(/\\<+/g).length\
    \ === opening_bracket.match(/\\>+/g).length;\n                               \
    \                                                      ^\n\nTypeError: Cannot\
    \ read property 'length' of null\n    at /tmp/tmphfwdhkqt.js:16:86\n    at Array.filter\
    \ (<anonymous>)\n    at correct_bracketing (/tmp/tmphfwdhkqt.js:15:57)\n    at\
    \ test (/tmp/tmphfwdhkqt.js:26:20)\n    at Object.<anonymous> (/tmp/tmphfwdhkqt.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = false;\n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n\
    \            correct_bracketing = true;\n        }\n    }\n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpkr8lvjnf.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkr8lvjnf.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i] +\
    \ \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n       \
    \     closing_brackets.push(\"<\" + opening_brackets[i] + \">\");\n        }\n\
    \    }\n    return closing_brackets.join(\"\") == brackets;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3lhrp43p.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3lhrp43p.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i=0; i<brackets.length; i++){\n\t\
    \tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tbrackets.splice(i+2,\
    \ 0, \"<\");\n\t\t\t\tbrackets.splice(i+1, 0, \">\");\n\t\t\t\tbrackets.splice(i+2,\
    \ 0, \">\");\n\t\t\t\tbrackets.splice(i+1, 0, \"<\");\n\t\t\t\tbrackets.splice(i+2,\
    \ 0, \"<\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn brackets.join(\"\"\
    ) === brackets;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3b1q_8b5.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3b1q_8b5.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n    var closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n    var result = opening_brackets_count ===\
    \ closing_brackets_count;\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf4d92xx8.js:29:10)\n    at Object.<anonymous> (/tmp/tmpf4d92xx8.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    \n    var correct_bracketing = false;\n    \n\
    \    for(var i = 0; i < opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = closing_brackets[i];\n\
    \        \n        if(opening_bracket === closing_bracket){\n            correct_bracketing\
    \ = true;\n        }\n    }\n    \n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4_2uob57.js:34:10)\n    at Object.<anonymous> (/tmp/tmp4_2uob57.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tvar opening_brackets = [];\n\tvar closing_brackets\
    \ = [];\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] ==\
    \ \"<\"){\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ \">\"){\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn (opening_brackets.length\
    \ == closing_brackets.length);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8e1rakj6.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8e1rakj6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket =\
    \ opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\tif(opening_bracket\
    \ == \"<\"){\n\t\t\tclosing_bracket = \">\";\n\t\t}\n\t\telse if(opening_bracket\
    \ == \">\"){\n\t\t\tclosing_bracket = \"<\";\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\treturn closing_brackets.join(\"\") == brackets;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpvdvvcoat.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvdvvcoat.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\
    \t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_brackets[(i + 1) %\
    \ opening_brackets.length];\n\t\t\n\t\tif(opening_bracket == closing_bracket){\n\
    \t\t\tclosing_brackets.push(opening_bracket);\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\t\n\treturn closing_brackets.length == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcha8xk4u.js:35:10)\n    at Object.<anonymous> (/tmp/tmpcha8xk4u.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    var opening_brackets = [];\n    var\
    \ closing_brackets = [];\n    for(var i = 0; i < brackets.length; i++){\n    \
    \    if(brackets[i] == \"<\"){\n            opening_brackets.push(i);\n      \
    \  }\n        if(brackets[i] == \">\"){\n            closing_brackets.push(i);\n\
    \        }\n    }\n    for(var i = 0; i < opening_brackets.length; i++){\n   \
    \     if(opening_brackets[i] != closing_brackets[i]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpgp3l7owp.js:36:10)\n    at Object.<anonymous> (/tmp/tmpgp3l7owp.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  opening_brackets.forEach(function(opening_bracket, i){\n   \
    \ if(opening_bracket != closing_brackets[i]){\n      return false;\n    }\n  });\n\
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_hd0hauy.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_hd0hauy.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.match(/\\<+/g);\n  var closing_brackets = brackets.match(/\\\
    >+/g);\n  if(opening_brackets && closing_brackets){\n    var opening_brackets_length\
    \ = opening_brackets.length;\n    var closing_brackets_length = closing_brackets.length;\n\
    \    for(var i = 0; i < opening_brackets_length; i++){\n      if(opening_brackets[i]\
    \ != closing_brackets[i]){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfg215kgo.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfg215kgo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    var correct_bracketing = true;\n    for(var i =\
    \ 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmptdzqmfgw.js:29:10)\n    at Object.<anonymous> (/tmp/tmptdzqmfgw.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ \"\";\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets += \"</\";\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets += \"</\";\n\
    \        }\n        else if(opening_brackets[i] == \"<\"){\n            closing_brackets\
    \ += \"</\";\n        }\n        else if(opening_brackets[i] == \">\"){\n    \
    \        closing_brackets += \"</\";\n        }\n        else if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets += \"</\";\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets += \"</\";\n\
    \        }\n        else if(opening_brackets[i] == \"<\"){\n            closing_brackets\
    \ += \"</\";\n        }\n        else if(opening_brackets[i] == \">\"){\n    \
    \        closing_brackets += \"</\";\n        }\n        else if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets += \"</\";\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets += \"</\";\n\
    \        }\n        else if(opening_brackets[i] == \"<\"){\n            closing_brackets\
    \ += \"</\";\n        }\n        else if(opening_brackets[i] == \">\"){\n    \
    \        closing_brackets += \"</\";\n        }\n        else if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets += \"</\";\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets += \"</\";\n\
    \        }\n        else if(opening_brackets[i] == \"<\"){\n            closing_brackets\
    \ += \"</\";\n        }\n        else if(opening_brackets[i] == \">\"){\n    \
    \        closing_brackets += \"</\";\n        }\n        else if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets += \"</\";\n        }\n        else\
    \ if(opening_brackets[i] == \">\"){\n            closing_brackets += \"</\";\n\
    \        }\n        else if(opening_brackets[i] == \"<\"){\n            closing_brackets\
    \ += \"</\";\n        }\n        else if(opening_bra\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm3gzux2n.js:73\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\tif(brackets[i+2]\
    \ === \">\"){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_gc9s_4s.js:30:10)\n    at Object.<anonymous> (/tmp/tmp_gc9s_4s.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if(opening_brackets[i] !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpodfsh2sa.js:28:10)\n    at Object.<anonymous> (/tmp/tmpodfsh2sa.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar closing_brackets_length\
    \ = closing_brackets.length;\n\tvar i;\n\tvar j;\n\t\n\tfor(i = 0; i < opening_brackets_length;\
    \ i++){\n\t\tfor(j = 0; j < closing_brackets_length; j++){\n\t\t\tif(opening_brackets[i]\
    \ == closing_brackets[j]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpil76ntth.js:38:10)\n    at Object.<anonymous> (/tmp/tmpil76ntth.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var result = false;\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n          \
    \  result = true;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmprkfs5wen.js:28:10)\n    at Object.<anonymous> (/tmp/tmprkfs5wen.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\
    \").reverse();\n  var correct_bracketing = true;\n  for(var i = 0; i < opening_brackets.length;\
    \ i++){\n    if(opening_brackets[i] != closing_brackets[i]){\n      correct_bracketing\
    \ = false;\n      break;\n    }\n  }\n  return correct_bracketing;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfrdkx87d.js:29:10)\n    at Object.<anonymous> (/tmp/tmpfrdkx87d.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket){\n        return\
    \ opening_bracket.match(/\\<+/g).length === opening_bracket.match(/\\<+/g).length\
    \ + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfnsuupzl.js:25:10)\n    at Object.<anonymous> (/tmp/tmpfnsuupzl.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzamt2h2z.js:29:10)\n    at Object.<anonymous> (/tmp/tmpzamt2h2z.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\tvar opening_brackets_length = opening_brackets.length;\n\tvar\
    \ closing_brackets_length = closing_brackets.length;\n\t\n\tfor (var i = 0; i\
    \ < opening_brackets_length; i++){\n\t\tif (opening_brackets[i] != closing_brackets[closing_brackets_length\
    \ - i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpc1lhja4s.js:30:10)\n    at Object.<anonymous> (/tmp/tmpc1lhja4s.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(x){return\
    \ x!==\"\"});\n\treturn all_opening_brackets_set.length===all_opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqgirlc66.js:28:10)\n    at Object.<anonymous> (/tmp/tmpqgirlc66.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = brackets.split(\"\
    \").reverse();\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\t\
    if(opening_brackets[i] !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0ol42qzk.js:28:10)\n    at Object.<anonymous> (/tmp/tmp0ol42qzk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    brackets = brackets.split(\"\");\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] === \"<\"){\n            if(brackets[i+1] ===\
    \ \">\"){\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp43ps2oru.js:32:10)\n    at Object.<anonymous> (/tmp/tmp43ps2oru.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"<\");\n    var closing_brackets =\
    \ brackets.split(\">\");\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(e){\n\
    \        return e != \"\";\n    });\n    return all_opening_brackets_set.length\
    \ == all_opening_brackets.length;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpubtztd9x.js:26:10)\n    at Object.<anonymous> (/tmp/tmpubtztd9x.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !=\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpafz1wh2v.js:29:10)\n    at Object.<anonymous> (/tmp/tmpafz1wh2v.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tvar opening = brackets[i+1];\n\t\t\tvar\
    \ closing = brackets[i+2];\n\t\t\tif(opening === \">\" && closing === \"<\"){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0v8gz44k.js:31:10)\n    at Object.<anonymous> (/tmp/tmp0v8gz44k.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var correct_bracketing = false;\n    \n    for(var\
    \ i=0; i<opening_brackets.length; i++){\n        if(opening_brackets[i] != closing_brackets[i]){\n\
    \            correct_bracketing = false;\n        }\n        else{\n         \
    \   correct_bracketing = true;\n        }\n    }\n    \n    return correct_bracketing;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp25imscu7.js:33:10)\n    at Object.<anonymous> (/tmp/tmp25imscu7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar opening_brackets = brackets.match(/\\<+/g);\n\tvar closing_brackets = brackets.match(/\\\
    >+/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(item){\n\
    \t\treturn item != null;\n\t});\n\treturn all_opening_brackets_set.length == all_opening_brackets.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl9nvk_nd.js:30:10)\n    at Object.<anonymous> (/tmp/tmpl9nvk_nd.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g).length === opening_bracket.match(/\\\
    >+/g).length;\n    });\n    return all_opening_brackets_set.length === 0;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8xg6v3fn.js:16\n        return opening_bracket.match(/\\<+/g).length\
    \ === opening_bracket.match(/\\>+/g).length;\n                               \
    \                                                      ^\n\nTypeError: Cannot\
    \ read property 'length' of null\n    at /tmp/tmp8xg6v3fn.js:16:86\n    at Array.filter\
    \ (<anonymous>)\n    at correct_bracketing (/tmp/tmp8xg6v3fn.js:15:57)\n    at\
    \ test (/tmp/tmp8xg6v3fn.js:26:20)\n    at Object.<anonymous> (/tmp/tmp8xg6v3fn.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tvar opening_brackets = [];\n\tvar closing_brackets\
    \ = [];\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] ==\
    \ \"<\"){\n\t\t\topening_brackets.push(i);\n\t\t}\n\t\telse if (brackets[i] ==\
    \ \">\"){\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\treturn (opening_brackets.length\
    \ == closing_brackets.length);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe1t5w37m.js:36:10)\n    at Object.<anonymous> (/tmp/tmpe1t5w37m.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var result = true;\n    for(var i = 0;\
    \ i < opening_brackets.length; i++){\n        if(opening_brackets[i] !== closing_brackets[i]){\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7k_k5xgl.js:29:10)\n    at Object.<anonymous> (/tmp/tmp7k_k5xgl.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i] === \"<\"){\n\t\t\tif(brackets[i+1] === \">\"){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpum85kroo.js:32:10)\n    at Object.<anonymous> (/tmp/tmpum85kroo.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_bracket;\n    if(opening_bracket == \"<\"){\n\
    \      closing_bracket = \">\";\n    }\n    else if(opening_bracket == \">\"){\n\
    \      closing_bracket = \"<\";\n    }\n    else if(opening_bracket == \"<>\"\
    ){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket == \"\
    <<\"){\n      closing_bracket = \">>\";\n    }\n    else if(opening_bracket ==\
    \ \">>\"){\n      closing_bracket = \"<<\";\n    }\n    else if(opening_bracket\
    \ == \"<><>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><><>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><><><>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><><><><>\"){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket\
    \ == \"<<><>><><><><><>\"){\n      closing_bracket = \"<>\";\n    }\n    else\
    \ if(opening_bracket == \"<<><>><><><><><><>\"){\n      closing_bracket = \"<>\"\
    ;\n    }\n    else if(opening_bracket == \"<<><>><><><><><><><>\"){\n      closing_bracket\
    \ = \"<>\";\n    }\n    else if(opening_bracket == \"<<><>><><><><><><><><>\"\
    ){\n      closing_bracket = \"<>\";\n    }\n    else if(opening_bracket == \"\
    <<><>><><><><><><><><><>\"){\n      closing_bracket = \"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc1j7ano5.js:66\n      closing_bracket = \"\n                  \
    \      ^\n\nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(elem,\
    \ index, self){\n        return self.indexOf(elem) == index;\n    });\n    return\
    \ all_opening_brackets_set.length == all_opening_brackets.length;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpa2bjpv2a.js:28:10)\n    at Object.<anonymous> (/tmp/tmpa2bjpv2a.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g).length === opening_bracket.match(/\\\
    >+/g).length;\n    });\n    return all_opening_brackets_set.length === 0;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt98u9c73.js:16\n        return opening_bracket.match(/\\<+/g).length\
    \ === opening_bracket.match(/\\>+/g).length;\n                               \
    \                                                      ^\n\nTypeError: Cannot\
    \ read property 'length' of null\n    at /tmp/tmpt98u9c73.js:16:86\n    at Array.filter\
    \ (<anonymous>)\n    at correct_bracketing (/tmp/tmpt98u9c73.js:15:57)\n    at\
    \ test (/tmp/tmpt98u9c73.js:26:20)\n    at Object.<anonymous> (/tmp/tmpt98u9c73.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: Exception
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tbrackets = brackets.split(\"\");\n\tfor(var i = 0; i < brackets.length; i++){\n\
    \t\tvar opening = brackets[i];\n\t\tvar closing = brackets[(i + 1) % brackets.length];\n\
    \t\tif(opening !== closing){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqez5o385.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqez5o385.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ brackets.split(\"\").reverse();\n    var correct_bracketing = true;\n    for(var\
    \ i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n            correct_bracketing = false;\n           \
    \ break;\n        }\n    }\n    return correct_bracketing;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyrbmmb05.js:29:10)\n    at Object.<anonymous> (/tmp/tmpyrbmmb05.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var opening_brackets = brackets.split(\"\");\n  var closing_brackets = [];\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    var opening_bracket = opening_brackets[i];\n\
    \    var closing_bracket = opening_bracket;\n    if(opening_bracket == \"<\"){\n\
    \      closing_bracket = \">\";\n    }\n    else if(opening_bracket == \">\"){\n\
    \      closing_bracket = \"<\";\n    }\n    closing_brackets.push(closing_bracket);\n\
    \  }\n  return opening_brackets.length == closing_brackets.length;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2qefasny.js:37:10)\n    at Object.<anonymous> (/tmp/tmp2qefasny.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    \n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    \n    var all_opening_brackets_set = all_opening_brackets.filter(function(opening_bracket){\n\
    \        return opening_bracket.match(/\\<+/g);\n    });\n    \n    var all_opening_brackets_set\
    \ = all_opening_brackets_set.filter(function(opening_bracket){\n        return\
    \ opening_bracket.match(/\\>+/g);\n    });\n    \n    return all_opening_brackets_set.length\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1jrj_vhp.js:37:10)\n    at Object.<anonymous> (/tmp/tmp1jrj_vhp.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ === \">\"){\n            closing_brackets.push(opening_brackets[i]);\n     \
    \   }\n    }\n    return closing_brackets.join(\"\") === brackets;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpjd4teanu.js:27:10)\n    at Object.<anonymous> (/tmp/tmpjd4teanu.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"<\"){\n            closing_brackets.push(\"</\" + opening_brackets[i +\
    \ 2] + \">\");\n        }\n        else if(opening_brackets[i] == \">\"){\n  \
    \          closing_brackets.push(\"<\" + opening_brackets[i - 2] + \">\");\n \
    \       }\n    }\n    return closing_brackets.join(\"\") == brackets;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3ed86wgn.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3ed86wgn.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.split(\"\");\n    var closing_brackets =\
    \ [];\n    var opening_brackets_length = opening_brackets.length;\n    var i;\n\
    \    for(i = 0; i < opening_brackets_length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        var closing_bracket = opening_brackets[(i+1)%opening_brackets_length];\n\
    \        if(opening_bracket === closing_bracket){\n            closing_brackets.push(opening_bracket);\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    if(opening_brackets_length\
    \ === closing_brackets.length){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpm_9z14kf.js:39:10)\n    at Object.<anonymous> (/tmp/tmpm_9z14kf.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
    <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var opening_brackets = brackets.match(/\\<+/g);\n    var closing_brackets\
    \ = brackets.match(/\\>+/g);\n    var result = true;\n    opening_brackets.forEach(function(opening_bracket){\n\
    \        closing_brackets.forEach(function(closing_bracket){\n            if(opening_bracket\
    \ !== closing_bracket){\n                result = false;\n            }\n    \
    \    });\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpezhv5oo6.js:30:10)\n    at Object.<anonymous> (/tmp/tmpezhv5oo6.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
