name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["\tvar smallest_difference = Number.MAX_VALUE;\n\tvar closest_elements\
    \ = [];\n\tvar closest_elements_index = 0;\n\tvar i;\n\tvar current_difference;\n\
    \tvar current_element;\n\t\n\tfor(i = 0; i < numbers.length; i++){\n\t\tcurrent_element\
    \ = numbers[i];\n\t\tcurrent_difference = Math.abs(current_element - numbers[closest_elements_index]);\n\
    \t\t\n\t\tif(current_difference < smallest_difference){\n\t\t\tsmallest_difference\
    \ = current_difference;\n\t\t\tclosest_elements_index = i;\n\t\t}\n\t}\n\t\n\t\
    closest_elements.push(numbers[closest_elements_index]);\n\tclosest_elements.push(numbers[closest_elements_index]);\n\
    \t\n\treturn closest_elements;\n}\n", "  var smallest = numbers[0];\n  var largest\
    \ = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n\
    \      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar closest_numbers = numbers;\n\tvar closest_numbers_index = 0;\n\tvar smallest_difference\
    \ = Number.MAX_VALUE;\n\tvar second_smallest_difference = Number.MAX_VALUE;\n\t\
    var smallest_difference_index = -1;\n\tvar second_smallest_difference_index =\
    \ -1;\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar difference = numbers[i]\
    \ - smallest_number;\n\t\tif(difference < smallest_difference){\n\t\t\tsmallest_difference\
    \ = difference;\n\t\t\tsmallest_difference_index = i;\n\t\t}\n\t\tdifference =\
    \ numbers[i] - second_smallest_number;\n\t\tif(difference < second_smallest_difference){\n\
    \t\t\tsecond_smallest_difference = difference;\n\t\t\tsecond_smallest_difference_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers = [smallest_number, second_smallest_number];\n\
    \tclosest_numbers_index = 1;\n\tif(smallest_difference < second_smallest_difference){\n\
    \t\tclosest_numbers = closest_numbers.concat(numbers.slice(smallest_difference_index\
    \ + 1, second_smallest_difference_index));\n\t\tclosest_numbers_index = closest_numbers.length\
    \ - 1;\n\t}\n\treturn closest_numbers;\n}\n", "  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\
    \tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n     \
    \       smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tnumbers = numbers.slice();\n\tnumbers.sort(function(a, b){\n\t\treturn\
    \ Math.abs(a) - Math.abs(b);\n\t});\n\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar results = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ == smallest){\n\t\t\tresults.push([smallest, numbers[i]]);\n\t\t}else if(numbers[i]\
    \ == largest){\n\t\t\tresults.push([largest, numbers[i]]);\n\t\t}else{\n\t\t\t\
    var difference = Math.abs(numbers[i] - smallest);\n\t\t\tvar difference2 = Math.abs(numbers[i]\
    \ - largest);\n\t\t\tif(difference < difference2){\n\t\t\t\tresults.push([smallest,\
    \ numbers[i]]);\n\t\t\t}else{\n\t\t\t\tresults.push([largest, numbers[i]]);\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn results;\n}\n", "    var smallest_number = numbers[0];\n\
    \    var largest_number = numbers[0];\n    var smallest_index = -1;\n    var largest_index\
    \ = -1;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] <\
    \ smallest_number){\n            smallest_number = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest_number){\n           \
    \ largest_number = numbers[i];\n            largest_index = i;\n        }\n  \
    \  }\n    return [smallest_number, largest_number];\n}\n", "    var smallest_number\
    \ = numbers[0];\n    var second_smallest_number = numbers[0];\n    var smallest_index\
    \ = 0;\n    var second_smallest_index = 0;\n    var smallest_difference = Number.MAX_VALUE;\n\
    \    var second_smallest_difference = Number.MAX_VALUE;\n    for(var i = 1; i\
    \ < numbers.length; i++){\n        var current_number = numbers[i];\n        var\
    \ current_difference = Math.abs(current_number - smallest_number);\n        if(current_difference\
    \ < smallest_difference){\n            smallest_difference = current_difference;\n\
    \            smallest_index = i;\n        }\n        current_difference = Math.abs(current_number\
    \ - second_smallest_number);\n        if(current_difference < second_smallest_difference){\n\
    \            second_smallest_difference = current_difference;\n            second_smallest_index\
    \ = i;\n        }\n    }\n    return [smallest_number, numbers[smallest_index]];\n\
    }\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n     \
    \       smallest = numbers[i];\n        }\n        else if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tvar closest_elements = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_elements.push(smallest_number);\n\tclosest_elements.push(largest_number);\n\
    \treturn closest_elements;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tlet smallest_number = numbers[0];\n\tlet biggest_number = numbers[0];\n\tfor\
    \ (let i = 1; i < numbers.length; i++){\n\t\tif (numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif (numbers[i] > biggest_number){\n\
    \t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar smallest_difference = numbers[1] - smallest_number;\n\tvar second_smallest_difference\
    \ = numbers[1] - second_smallest_number;\n\t\n\tfor(var i = 2; i < numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_difference = current_number\
    \ - smallest_number;\n\t\t\n\t\tif(current_difference < smallest_difference){\n\
    \t\t\tsmallest_difference = current_difference;\n\t\t\tsecond_smallest_difference\
    \ = smallest_difference;\n\t\t\tsecond_smallest_number = current_number;\n\t\t\
    }\n\t\telse if(current_difference > second_smallest_difference){\n\t\t\tsecond_smallest_difference\
    \ = current_difference;\n\t\t\tsecond_smallest_number = current_number;\n\t\t\
    }\n\t}\n\t\n\treturn [smallest_number, second_smallest_number];\n}\n", "\tvar\
    \ smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\t\
    var smallest_index = 0;\n\tvar second_smallest_index = 0;\n\tfor(var i = 1; i\
    \ < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number\
    \ = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\telse if(numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = numbers[i];\n\t\t\tsecond_smallest_index = i;\n\
    \t\t}\n\t}\n\treturn [smallest_number, second_smallest_number];\n}\n", "\tnumbers\
    \ = numbers.slice();\n\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest){\n\t\t\t\
    largest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar\
    \ smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tresult.push(i);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tlet smallest_number = numbers[0];\n\tlet\
    \ biggest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\t\
    \tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif (numbers[i] > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "    var smallest\
    \ = numbers[0];\n    var largest = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest){\n            smallest = numbers[i];\n\
    \        }\n        if(numbers[i] > largest){\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "  var smallest = Math.min(numbers);\n\
    \  var largest = Math.max(numbers);\n  var closest_numbers = [];\n  var closest_number\
    \ = smallest;\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] <\
    \ smallest){\n      closest_number = smallest;\n    }\n    else if(numbers[i]\
    \ > largest){\n      closest_number = largest;\n    }\n    else{\n      closest_numbers.push(closest_number);\n\
    \      closest_number = numbers[i];\n    }\n  }\n  closest_numbers.push(closest_number);\n\
    \  return closest_numbers;\n}\n", "    var smallest = numbers[0];\n    var largest\
    \ = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < smallest){\n            smallest = numbers[i];\n        }\n        else if(numbers[i]\
    \ > largest){\n            largest = numbers[i];\n        }\n    }\n    return\
    \ [smallest, largest];\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar smallest_distance\
    \ = Number.MAX_VALUE;\n\tvar closest_numbers = [];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[i - 1];\n\t\tif(distance < smallest_distance){\n\
    \t\t\tsmallest_distance = distance;\n\t\t\tclosest_numbers = [numbers[i - 1]];\n\
    \t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(numbers[i - 1]);\n\t\t}\n\t}\n\t\
    return closest_numbers;\n}\n", "\tvar closest_pair = numbers[0];\n\tvar closest_distance\
    \ = numbers[1];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance\
    \ = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\t\t\tclosest_pair\
    \ = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\treturn [closest_pair,\
    \ closest_distance];\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[1];\n\tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\
    \tvar smallest_distance = Math.abs(smallest_number - second_smallest_number);\n\
    \t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = Math.abs(current_number - second_smallest_number);\n\
    \t\t\n\t\tif(current_distance < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\
    \t\t\tsecond_smallest_number = current_number;\n\t\t\tclosest_numbers_index =\
    \ i;\n\t\t\tsmallest_distance = current_distance;\n\t\t}\n\t\telse if(current_distance\
    \ == smallest_distance){\n\t\t\tif(current_number < second_smallest_number){\n\
    \t\t\t\tclosest_numbers_index = i;\n\t\t\t\tsecond_smallest_number = current_number;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(second_smallest_number);\n\
    \t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\tvar current_distance_square\
    \ = current_distance * current_distance;\n\t\tsmallest_number = current_number;\n\
    \t\tfor(var j = 0; j < closest_numbers.length; j++){\n\t\t\tvar closest_number\
    \ = closest_numbers[j];\n\t\t\tvar closest_distance_square = closest_number *\
    \ closest_number;\n\t\t\tvar closest_distance = Math.sqrt(current_distance_square\
    \ + closest_distance_square);\n\t\t\tif(closest_distance < closest_distances[j]){\n\
    \t\t\t\tclosest_distances[j] = closest_distance;\n\t\t\t\tclosest_numbers[j] =\
    \ closest_number;\n\t\t\t}\n\t\t}\n\t}\n\tclosest_numbers.sort(function(a, b){\n\
    \t\treturn b - a;\n\t});\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "  var smallest_distance = Number.MAX_VALUE;\n  var closest_numbers\
    \ = [];\n  var closest_numbers_index = 0;\n  var i;\n  for(i = 0; i < numbers.length;\
    \ i++){\n    var distance = numbers[i] - numbers[closest_numbers_index];\n   \
    \ if(distance < smallest_distance){\n      smallest_distance = distance;\n   \
    \   closest_numbers_index = i;\n    }\n  }\n  closest_numbers.push(numbers[closest_numbers_index]);\n\
    \  closest_numbers.push(numbers[closest_numbers_index + 1]);\n  return closest_numbers;\n\
    }\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n     \
    \       smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar closest_numbers = [smallest_number];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar difference = Math.abs(current_number - smallest_number);\n\t\tif(difference\
    \ < closest_numbers[0]){\n\t\t\tclosest_numbers = [difference, current_number];\n\
    \t\t}\n\t\telse{\n\t\t\tclosest_numbers[1] = current_number;\n\t\t}\n\t\tsmallest_number\
    \ = current_number;\n\t}\n\treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math,\
    \ numbers);\n  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n\
    \  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] === smallest){\n\
    \      result.push(smallest);\n    }\n    else if(numbers[i] === largest){\n \
    \     result.push(largest);\n    }\n    else{\n      result.push([numbers[i],\
    \ numbers[i]]);\n    }\n  }\n  return result;\n}\n", "\tvar smallest = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result\
    \ = [smallest, largest];\n\tfor(var i = 2; i < numbers.length; i++){\n\t\tvar\
    \ current = numbers[i];\n\t\tif(current < smallest){\n\t\t\tsmallest = current;\n\
    \t\t}\n\t\telse if(current > largest){\n\t\t\tlargest = current;\n\t\t}\n\t}\n\
    \tresult.push(smallest);\n\tresult.push(largest);\n\treturn result;\n}\n", "\t\
    var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "\tvar smallest_number = numbers[0];\n\t\
    var second_smallest_number = numbers[1];\n\tvar smallest_index = 0;\n\tvar second_smallest_index\
    \ = 1;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\t\n\t\
    \tif(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number = numbers[i];\n\
    \t\t\tsecond_smallest_index = i;\n\t\t}\n\t}\n\t\n\treturn [smallest_number, second_smallest_number];\n\
    }\n", "    var smallest = Math.min(numbers[0], numbers[1]);\n    var largest =\
    \ Math.max(numbers[0], numbers[1]);\n    var result = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        if(numbers[i] < smallest || numbers[i] >\
    \ largest){\n            continue;\n        }\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] >\
    \ largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\tvar smallest_difference\
    \ = Number.MAX_VALUE;\n\tvar second_smallest_difference = Number.MAX_VALUE;\n\t\
    \n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_difference = Math.abs(current_number - smallest_number);\n\t\t\
    \n\t\tif(current_difference < smallest_difference){\n\t\t\tsmallest_difference\
    \ = current_difference;\n\t\t\tclosest_numbers_index = i;\n\t\t\tsmallest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tcurrent_difference = Math.abs(current_number\
    \ - second_smallest_number);\n\t\t\n\t\tif(current_difference < second_smallest_difference){\n\
    \t\t\tsecond_smallest_difference = current_difference;\n\t\t\tsecond_smallest_number\
    \ = current_number;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(second_smallest_number);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest_distance = Number.MAX_VALUE;\n\
    \tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\t\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i] - numbers[i\
    \ - 1];\n\t\tif(current_distance < smallest_distance){\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_numbers_index]);\n\
    \tclosest_numbers.push(numbers[closest_numbers_index - 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i = smallest; i <= largest; i++){\n\
    \    result.push(i);\n  }\n  return result;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar closest_numbers = [];\n\tvar closest_number = smallest_number;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t\tclosest_number = smallest_number;\n\t\t\
    }\n\t\telse if(numbers[i] > smallest_number){\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t\tclosest_number = numbers[i];\n\t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t\tclosest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tsmallest_number = smallest_number\
    \ + 0.000000000000001;\n\tlargest_number = largest_number - 0.000000000000001;\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = smallest_number\
    \ - numbers[i];\n\t\tif(Math.abs(distance) < Math.abs(closest_distances[i-1])){\n\
    \t\t\tclosest_numbers[i] = smallest_number;\n\t\t\tclosest_distances[i] = distance;\n\
    \t\t}else{\n\t\t\tclosest_numbers[i] = numbers[i];\n\t\t\tclosest_distances[i]\
    \ = closest_distances[i-1];\n\t\t}\n\t}\n\tclosest_numbers.sort(function(a, b){\n\
    \t\treturn a - b;\n\t});\n\tclosest_distances.sort(function(a, b){\n\t\treturn\
    \ a - b;\n\t});\n\treturn [closest_numbers[closest_distances.length-1], closest_numbers[0]];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tvar smallest_index\
    \ = -1;\n\tvar largest_index = -1;\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t\tsmallest_index\
    \ = i;\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t\
    \tlargest_index = i;\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar\
    \ smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar results = [];\n\tfor(var\
    \ i=0;i<numbers.length;i++){\n\t\tif(numbers[i] == smallest){\n\t\t\tresults.push([smallest,\
    \ numbers[i]]);\n\t\t}else if(numbers[i] == largest){\n\t\t\tresults.push([largest,\
    \ numbers[i]]);\n\t\t}else{\n\t\t\tresults.push([numbers[i], numbers[i]]);\n\t\
    \t}\n\t}\n\treturn results;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar\
    \ second_smallest_number = numbers[1];\n\tvar smallest_index = 0;\n\tvar second_smallest_index\
    \ = 1;\n\tvar smallest_difference = numbers[1] - numbers[0];\n\tvar second_smallest_difference\
    \ = numbers[1] - numbers[2];\n\tvar smallest_difference_index = 0;\n\tvar second_smallest_difference_index\
    \ = 1;\n\t\n\twhile(smallest_difference > second_smallest_difference){\n\t\tsmallest_difference\
    \ = numbers[smallest_index] - numbers[smallest_difference_index];\n\t\tsmallest_difference_index\
    \ = smallest_difference_index + 1;\n\t\tsmallest_index = smallest_index + 1;\n\
    \t}\n\t\n\twhile(second_smallest_difference > smallest_difference){\n\t\tsecond_smallest_difference\
    \ = numbers[second_smallest_index] - numbers[second_smallest_difference_index];\n\
    \t\tsecond_smallest_difference_index = second_smallest_difference_index + 1;\n\
    \t\tsecond_smallest_index = second_smallest_index + 1;\n\t}\n\t\n\treturn [numbers[smallest_index],\
    \ numbers[second_smallest_index]];\n}\n", "  var smallest = Math.min(numbers);\n\
    \  var largest = Math.max(numbers);\n  var closest_numbers = [];\n  for(var i\
    \ = smallest; i <= largest; i++){\n    for(var j = smallest; j <= largest; j++){\n\
    \      if(i == j){\n        continue;\n      }\n      var difference = Math.abs(i\
    \ - j);\n      if(difference < smallest){\n        smallest = difference;\n  \
    \    }\n      if(difference > largest){\n        largest = difference;\n     \
    \ }\n    }\n    closest_numbers.push(smallest);\n    smallest = Math.min(numbers);\n\
    \  }\n  return closest_numbers;\n}\n", "  var smallest = numbers[0];\n  var largest\
    \ = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n\
    \      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "\tvar smallest_number = numbers[0];\n\tvar closest_numbers = [];\n\tvar closest_numbers_index\
    \ = 0;\n\tvar smallest_difference = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar difference = Math.abs(numbers[i] - smallest_number);\n\t\tif(difference\
    \ < smallest_difference){\n\t\t\tsmallest_difference = difference;\n\t\t\tclosest_numbers_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(numbers[closest_numbers_index]);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest_number = numbers[0];\n\tvar biggest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > biggest_number){\n\
    \t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n\
    }\n", "\tvar closest_pair = null;\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[i - 1];\n\t\tif(distance < closest_distance){\n\t\t\tclosest_pair\
    \ = [numbers[i - 1], numbers[i]];\n\t\t\tclosest_distance = distance;\n\t\t}\n\
    \t}\n\t\n\treturn closest_pair;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tvar i = numbers.length;\n\twhile (i--){\n\t\tif (numbers[i] === smallest){\n\
    \t\t\tresult.push(smallest);\n\t\t} else if (numbers[i] === largest){\n\t\t\t\
    result.push(largest);\n\t\t} else {\n\t\t\tvar diff = Math.abs(numbers[i] - smallest);\n\
    \t\t\tif (diff < Math.abs(numbers[i] - largest)){\n\t\t\t\tresult.push(smallest);\n\
    \t\t\t} else {\n\t\t\t\tresult.push(largest);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tlet smallest = Math.min(...numbers);\n\tlet largest = Math.max(...numbers);\n\
    \tlet closest = [];\n\tfor (let i = 0; i < numbers.length; i++){\n\t\tif (numbers[i]\
    \ < smallest || numbers[i] > largest){\n\t\t\tcontinue;\n\t\t}\n\t\tclosest.push(numbers[i]);\n\
    \t}\n\treturn closest;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tvar i, diff;\n\tfor(i = 0; i < numbers.length; i++){\n\t\
    \tdiff = largest - numbers[i];\n\t\tif(diff === 0){\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}else if(diff < smallest){\n\t\t\tresult.push(smallest);\n\t\t}else{\n\t\t\
    \tresult.push(largest);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var smallest =\
    \ Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n\
    \  }\n  return result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "  var smallest_number\
    \ = numbers[0];\n  var second_smallest_number = numbers[1];\n  var smallest_index\
    \ = 0;\n  var second_smallest_index = 1;\n  var smallest_diff;\n  var second_smallest_diff;\n\
    \  var i;\n\n  for(i = 0; i < numbers.length; i++){\n    smallest_diff = numbers[i]\
    \ - smallest_number;\n    second_smallest_diff = numbers[i] - second_smallest_number;\n\
    \    if(smallest_diff < second_smallest_diff){\n      smallest_number = numbers[i];\n\
    \      smallest_index = i;\n    }\n    if(smallest_diff > second_smallest_diff){\n\
    \      second_smallest_number = numbers[i];\n      second_smallest_index = i;\n\
    \    }\n  }\n\n  return [smallest_number, second_smallest_number];\n}\n", "\t\
    var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "    var smallest = Math.min.apply(Math,\
    \ numbers);\n    var largest = Math.max.apply(Math, numbers);\n    var result\
    \ = [];\n    for(var i=0;i<numbers.length;i++){\n        if(numbers[i] == smallest\
    \ || numbers[i] == largest){\n            result.push(numbers[i]);\n        }\n\
    \    }\n    return result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] >\
    \ largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    var smallest_difference\
    \ = numbers[0];\n    var second_smallest_difference = numbers[0];\n    var smallest_number\
    \ = numbers[0];\n    var second_smallest_number = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        var difference = numbers[i] - smallest_number;\n\
    \        if(difference < smallest_difference){\n            second_smallest_difference\
    \ = smallest_difference;\n            second_smallest_number = smallest_number;\n\
    \            smallest_difference = difference;\n            smallest_number =\
    \ numbers[i];\n        }else if(difference > second_smallest_difference){\n  \
    \          second_smallest_difference = difference;\n            second_smallest_number\
    \ = numbers[i];\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \tvar closest_index = 0;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    var current_distance = numbers[i] - numbers[closest_index];\n\t\t\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_distance = current_distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index\
    \ + 1]);\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_pair = numbers[0];\n\
    \tvar closest_distance = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t\
    }\n\treturn [closest_pair, closest_distance];\n}\n", "    var smallest = numbers[0];\n\
    \    var largest = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < smallest){\n            smallest = numbers[i];\n    \
    \    }\n        if(numbers[i] > largest){\n            largest = numbers[i];\n\
    \        }\n    }\n    return [smallest, largest];\n}\n", "\tvar smallest = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result\
    \ = [];\n\tfor(var i = 2; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest\
    \ || numbers[i] > largest){\n\t\t\tbreak;\n\t\t}\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "\tnumbers = numbers.slice();\n\tvar smallest = Math.min.apply(null,\
    \ numbers);\n\tvar largest = Math.max.apply(null, numbers);\n\tvar closest_numbers\
    \ = [];\n\tvar closest_numbers_index = 0;\n\tfor(var i = numbers.length - 1; i\
    \ >= 0; i--){\n\t\tif(numbers[i] === smallest){\n\t\t\tclosest_numbers.push(smallest);\n\
    \t\t\tclosest_numbers_index = i;\n\t\t}\n\t\telse if(numbers[i] === largest){\n\
    \t\t\tclosest_numbers.push(largest);\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\
    \t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn closest_numbers.reverse();\n}\n",
  "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "    var smallest_difference = Number.MAX_VALUE;\n    var smallest_difference_index\
    \ = 0;\n    var smallest_number = numbers[0];\n    var second_smallest_number\
    \ = numbers[1];\n    for(var i = 1; i < numbers.length; i++){\n        var difference\
    \ = numbers[i] - smallest_number;\n        if(Math.abs(difference) < smallest_difference){\n\
    \            smallest_difference = difference;\n            smallest_difference_index\
    \ = i;\n            smallest_number = numbers[i];\n        }\n        else if(difference\
    \ < 0){\n            second_smallest_number = numbers[i];\n        }\n    }\n\
    \    return [smallest_number, second_smallest_number];\n}\n", "\tvar closest_pair\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t\
    }\n\treturn [closest_pair, closest_distance];\n}\n", "\tvar closest_pair = numbers[0];\n\
    \tvar closest_distance = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t\
    }\n\treturn [closest_pair, closest_distance];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] == smallest || numbers[i]\
    \ == largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest || numbers[i]\
    \ > largest){\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(numbers[i]);\n\t}\n\treturn\
    \ result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[i - 1];\n\t\t\n\t\tif(closest_distances.indexOf(distance) == -1){\n\
    \t\t\tclosest_distances.push(distance);\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(biggest_number < numbers[i]){\n\
    \t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar closest_numbers = [];\n\tfor(var i = smallest; i <= largest;\
    \ i++){\n\t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tclosest_numbers.push(index);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tlet smallest_number = numbers[0];\n\
    \tlet largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\
    \t\tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif (numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "  var smallest\
    \ = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null, numbers);\n\
    \  var results = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest || numbers[i] == largest){\n      results.push(numbers[i]);\n  \
    \  }\n  }\n  return results;\n}\n", "\tvar closest_pair = numbers[0];\n\tvar closest_distance\
    \ = numbers[1];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance\
    \ = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\t\t\tclosest_pair\
    \ = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\treturn [closest_pair,\
    \ closest_distance];\n}\n", "\tlet min_diff = Number.MAX_VALUE;\n\tlet min_diff_index\
    \ = 0;\n\tlet min_number = numbers[0];\n\tlet min_number_index = -1;\n\tlet max_number\
    \ = numbers[0];\n\tlet max_number_index = -1;\n\tfor(let i = 1; i < numbers.length;\
    \ i++){\n\t\tlet diff = numbers[i] - min_number;\n\t\tif(diff < 0){\n\t\t\tdiff\
    \ = diff * -1;\n\t\t}\n\t\tif(diff < min_diff){\n\t\t\tmin_diff = diff;\n\t\t\t\
    min_number_index = i;\n\t\t}\n\t\tif(diff > max_diff){\n\t\t\tmax_diff = diff;\n\
    \t\t\tmax_number_index = i;\n\t\t}\n\t}\n\treturn [min_number, max_number];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    var smallest = numbers[0];\n\
    \    var largest = numbers[0];\n    var smallest_index = -1;\n    var largest_index\
    \ = -1;\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] <\
    \ smallest){\n            smallest = numbers[i];\n            smallest_index =\
    \ i;\n        }\n        if(numbers[i] > largest){\n            largest = numbers[i];\n\
    \            largest_index = i;\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "  var closest_numbers = numbers.slice(0);\n  var closest_index = 0;\n \
    \ var closest_distance = Math.abs(numbers[0]);\n  var closest_number = numbers[0];\n\
    \  var closest_index2 = 0;\n  var closest_distance2 = Math.abs(numbers[0]);\n\
    \  var closest_number2 = numbers[0];\n  var closest_index3 = 0;\n  var closest_distance3\
    \ = Math.abs(numbers[0]);\n  var closest_number3 = numbers[0];\n  var closest_index4\
    \ = 0;\n  var closest_distance4 = Math.abs(numbers[0]);\n  var closest_number4\
    \ = numbers[0];\n  var closest_index5 = 0;\n  var closest_distance5 = Math.abs(numbers[0]);\n\
    \  var closest_number5 = numbers[0];\n  var closest_index6 = 0;\n  var closest_distance6\
    \ = Math.abs(numbers[0]);\n  var closest_number6 = numbers[0];\n  var closest_index7\
    \ = 0;\n  var closest_distance7 = Math.abs(numbers[0]);\n  var closest_number7\
    \ = numbers[0];\n  var closest_index8 = 0;\n  var closest_distance8 = Math.abs(numbers[0]);\n\
    \  var closest_number8 = numbers[0];\n  var closest_index9 = 0;\n  var closest_distance9\
    \ = Math.abs(numbers[0]);\n  var closest_number9 = numbers[0];\n  var closest_index10\
    \ = 0;\n  var closest_distance10 = Math.abs(numbers[0]);\n  var closest_number10\
    \ = numbers[0];\n  var closest_index11 = 0;\n  var closest_distance11 = Math.abs(numbers[0]);\n\
    \  var closest_number11 = numbers[0];\n  var closest_index12 = 0;\n  var closest_distance12\
    \ = Math.abs(numbers[0]);\n  var closest_number12 = numbers[0];\n  var closest_index13\
    \ = 0;\n  var closest_distance13 = Math.abs(numbers[0]);\n  var closest_number13\
    \ = numbers[0];\n  var closest_index14 = 0;\n  var closest_distance14 = Math.abs(numbers[0]);\n\
    \  var closest_number14 = numbers[0];\n  var closest_index15 = 0;\n  var closest_distance15\
    \ = Math.abs(numbers[0]);\n  var closest_number15 = numbers[0];\n  var closest_index16\
    \ = 0;\n  var closest_distance16 = Math.abs(numbers[0]);\n  var closest_number16\
    \ = numbers[0];\n  var closest_index17 = 0;\n  var closest_distance17 = Math.abs(numbers[0]);\n\
    \  var closest_number17 = numbers[0];\n  var closest_index18 = 0;\n  var closest_distance18\
    \ = Math.abs(numbers[0]);\n  var closest_number18 = numbers[0];\n  var closest_index19\
    \ = 0;\n  var closest_distance19 = Math.abs(numbers[0]);\n  var closest_number19\
    \ = numbers[0];\n  var closest_index20 = 0;\n  var closest_distance20 = Math.abs(numbers[0]);\n\
    \  var closest_number20 = numbers[0];\n  var closest_index21 = 0;\n  var closest_distance21\
    \ = Math.abs(numbers[0]);\n  var closest_number21 = numbers[0];\n  var closest_index22\
    \ = 0;\n  var closest_distance22 = Math.abs(numbers[0]);\n  var closest_number22\
    \ = numbers[0];\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(biggest_number\
    \ < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,\
    \ biggest_number];\n}\n", "\tvar smallest_difference = Number.MAX_VALUE;\n\tvar\
    \ closest_elements = [];\n\tvar closest_elements_index = 0;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar diff;\n\tvar smallest_difference_index;\n\tvar smallest_difference_index2;\n\
    \tvar smallest_difference_index3;\n\tvar smallest_difference_index4;\n\tvar smallest_difference_index5;\n\
    \tvar smallest_difference_index6;\n\tvar smallest_difference_index7;\n\tvar smallest_difference_index8;\n\
    \tvar smallest_difference_index9;\n\tvar smallest_difference_index10;\n\tvar smallest_difference_index11;\n\
    \tvar smallest_difference_index12;\n\tvar smallest_difference_index13;\n\tvar\
    \ smallest_difference_index14;\n\tvar smallest_difference_index15;\n\tvar smallest_difference_index16;\n\
    \tvar smallest_difference_index17;\n\tvar smallest_difference_index18;\n\tvar\
    \ smallest_difference_index19;\n\tvar smallest_difference_index20;\n\tvar smallest_difference_index21;\n\
    \tvar smallest_difference_index22;\n\tvar smallest_difference_index23;\n\tvar\
    \ smallest_difference_index24;\n\tvar smallest_difference_index25;\n\tvar smallest_difference_index26;\n\
    \tvar smallest_difference_index27;\n\tvar smallest_difference_index28;\n\tvar\
    \ smallest_difference_index29;\n\tvar smallest_difference_index30;\n\tvar smallest_difference_index31;\n\
    \tvar smallest_difference_index32;\n\tvar smallest_difference_index33;\n\tvar\
    \ smallest_difference_index34;\n\tvar smallest_difference_index35;\n\tvar smallest_difference_index36;\n\
    \tvar smallest_difference_index37;\n\tvar smallest_difference_index38;\n\tvar\
    \ smallest_difference_index39;\n\tvar smallest_difference_index40;\n\tvar smallest_difference_index41;\n\
    \tvar smallest_difference_index42;\n\tvar smallest_difference_index43;\n\tvar\
    \ smallest_difference_index44;\n\tvar smallest_difference_index45;\n\tvar smallest_difference_index46;\n\
    \tvar smallest_difference_index47;\n\tvar smallest_difference_index48;\n\tvar\
    \ smallest_difference_index49;\n\tvar smallest_difference_index50;\n\tvar smallest_difference_index51;\n\
    \tvar smallest_difference_index52;\n\tvar smallest_difference_index53;\n\tvar\
    \ smallest_difference_index54;\n\tvar smallest_difference_index55;\n\tvar smallest_difference_index56;\n\
    \tvar smallest_difference_index57;\n\tvar smallest_difference_index58;\n\tvar\
    \ smallest_difference_index59;\n\tvar smallest_difference_index60;\n\tvar smallest_difference_index61;\n\
    \tvar smallest_difference_index62;\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i = 1; i\
    \ < numbers.length; i++){\n\t\tif (numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif (numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t\
    }\n\treturn [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var results = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest){\n      results.push(smallest);\n    }\n    else if(numbers[i]\
    \ == largest){\n      results.push(largest);\n    }\n    else{\n      results.push(numbers[i]);\n\
    \    }\n  }\n  return results;\n}\n", "\tvar closest_pair = numbers[0];\n\tvar\
    \ closest_dist = numbers[1];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    var dist = numbers[i] - closest_pair;\n\t\tif(dist < closest_dist){\n\t\t\tclosest_pair\
    \ = numbers[i];\n\t\t\tclosest_dist = dist;\n\t\t}\n\t}\n\treturn [closest_pair,\
    \ closest_dist];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i] - numbers[i - 1];\n\t\tif(current_distance < closest_distance){\n\
    \t\t\tclosest_index = i;\n\t\t\tclosest_distance = current_distance;\n\t\t}\n\t\
    }\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index\
    \ - 1]);\n\t\n\treturn closest_numbers;\n}\n", "\tlet smallest_number = numbers[0];\n\
    \tlet largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\
    \t\tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif (numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\tvar current_distance_square = current_distance * current_distance;\n\
    \t\tsmallest_number = current_number;\n\t\t\n\t\tfor(var j = 0; j < closest_numbers.length;\
    \ j++){\n\t\t\tvar closest_number = closest_numbers[j];\n\t\t\tvar closest_distance_square\
    \ = closest_number * closest_number;\n\t\t\tvar current_distance_square = current_distance\
    \ * current_distance;\n\t\t\tvar closest_distance = Math.sqrt(closest_distance_square\
    \ + current_distance_square);\n\t\t\t\n\t\t\tif(closest_distance < closest_distances[j]){\n\
    \t\t\t\tclosest_numbers[j] = closest_number;\n\t\t\t\tclosest_distances[j] = closest_distance;\n\
    \t\t\t}\n\t\t}\n\t\t\n\t\tfor(var j = 0; j < closest_numbers.length; j++){\n\t\
    \t\tvar closest_number = closest_numbers[j];\n\t\t\tvar closest_distance_square\
    \ = closest_number * closest_number;\n\t\t\tvar current_distance_square = current_distance\
    \ * current_distance;\n\t\t\tvar closest_distance = Math.sqrt(closest_distance_square\
    \ + current_distance_square);\n\t\t\t\n\t\t\tif(closest_distance < closest_distance){\n\
    \t\t\t\tclosest_numbers[j] = closest_number;\n\t\t\t\tclosest_distances[j] = closest_distance;\n\
    \t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t",
  "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[closest_index];\n\t\tif(distance\
    \ < closest_distance){\n\t\t\tclosest_index = i;\n\t\t\tclosest_distance = distance;\n\
    \t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index\
    \ + 1]);\n\t\n\treturn closest_numbers;\n}\n", "\tvar smallest = numbers[0];\n\
    \tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[1];\n\tvar smallest_index = 0;\n\tvar second_smallest_index = 1;\n\
    \tfor(var i = 2; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\telse\
    \ if(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number = numbers[i];\n\
    \t\t\tsecond_smallest_index = i;\n\t\t}\n\t}\n\treturn [smallest_number, second_smallest_number];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar closest_numbers = numbers;\n\
    \tvar closest_number = numbers[0];\n\tvar smallest_difference = Number.MAX_VALUE;\n\
    \tvar closest_difference = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar difference = Math.abs(closest_numbers[i] - closest_number);\n\
    \t\tif(difference < smallest_difference){\n\t\t\tsmallest_difference = difference;\n\
    \t\t\tclosest_numbers = closest_number;\n\t\t\tclosest_number = closest_numbers[i];\n\
    \t\t}else{\n\t\t\tif(difference < closest_difference){\n\t\t\t\tclosest_difference\
    \ = difference;\n\t\t\t\tclosest_numbers = closest_number;\n\t\t\t\tclosest_number\
    \ = closest_numbers[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn [closest_numbers, closest_number];\n\
    }\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\tfor (let i\
    \ = 1; i < numbers.length; i++){\n\t\tif (numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] === smallest){\n\
    \t\t\tresult.push(smallest);\n\t\t}\n\t\telse if(numbers[i] === largest){\n\t\t\
    \tresult.push(largest);\n\t\t}\n\t\telse{\n\t\t\tvar diff = Math.abs(largest -\
    \ smallest);\n\t\t\tvar mid = Math.floor(diff / 2);\n\t\t\tif(numbers[i] < smallest\
    \ + mid){\n\t\t\t\tresult.push(smallest + mid);\n\t\t\t}\n\t\t\telse if(numbers[i]\
    \ > largest - mid){\n\t\t\t\tresult.push(largest - mid);\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tresult.push(numbers[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n",
  "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tvar i, diff;\n\tfor(i = 0; i < numbers.length;\
    \ i++){\n\t\tdiff = largest - numbers[i];\n\t\tif(diff < smallest){\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  var smallest_number = numbers[0];\n  var\
    \ second_smallest_number = numbers[1];\n  var closest_numbers = [];\n  var closest_numbers_index\
    \ = 0;\n  var smallest_difference = Number.MAX_VALUE;\n  var second_smallest_difference\
    \ = Number.MAX_VALUE;\n  for(var i = 1; i < numbers.length; i++){\n    var current_difference\
    \ = Math.abs(numbers[i] - smallest_number);\n    if(current_difference < smallest_difference){\n\
    \      smallest_difference = current_difference;\n      closest_numbers_index\
    \ = i;\n      smallest_number = numbers[i];\n    }\n    else if(current_difference\
    \ < second_smallest_difference){\n      second_smallest_difference = current_difference;\n\
    \      second_smallest_number = numbers[i];\n    }\n  }\n  closest_numbers.push(smallest_number);\n\
    \  closest_numbers.push(second_smallest_number);\n  return closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) !== -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tlet smallest = numbers[0];\n\tlet largest = numbers[0];\n\t\
    for (let i = 1; i < numbers.length; i++){\n\t\tif (numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif (numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar closest_pair\
    \ = numbers[0];\n\tvar closest_distance = numbers[1];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_pair;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t\
    }\n\treturn [closest_pair, closest_distance];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\
    \t\tif(index != -1){\n\t\t\tresult.push([i, numbers[index]]);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "\tvar smallest_distance = Number.MAX_VALUE;\n\tvar closest_numbers\
    \ = [];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[i - 1];\n\t\tif(distance < smallest_distance){\n\t\t\tsmallest_distance\
    \ = distance;\n\t\t\tclosest_numbers = [numbers[i - 1]];\n\t\t}\n\t\telse{\n\t\
    \t\tclosest_numbers.push(numbers[i - 1]);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  var closest_numbers = [smallest_number, second_smallest_number];\n  for(var\
    \ i = 2; i < numbers.length; i++){\n    var current_number = numbers[i];\n   \
    \ if(Math.abs(smallest_number - current_number) < Math.abs(second_smallest_number\
    \ - current_number)){\n      smallest_number = current_number;\n      closest_numbers[0]\
    \ = smallest_number;\n    }\n    else{\n      second_smallest_number = current_number;\n\
    \      closest_numbers[1] = second_smallest_number;\n    }\n  }\n  return closest_numbers;\n\
    }\n", "\tnumbers = numbers.slice();\n\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\tif(current_distance > largest_distance){\n\t\
    \t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(smallest_distance);\n\tclosest_distances.push(largest_distance);\n\
    \treturn [closest_numbers, closest_distances];\n}\n", "\tvar closest_numbers =\
    \ [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i];\n\t\tvar current_number = numbers[i];\n\
    \t\t\n\t\tfor(var j = 0; j < numbers.length; j++){\n\t\t\tif(j != i){\n\t\t\t\t\
    var distance = numbers[j] - current_number;\n\t\t\t\tif(distance < current_distance){\n\
    \t\t\t\t\tcurrent_number = numbers[j];\n\t\t\t\t\tcurrent_distance = distance;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\t\
    \tclosest_distances.push(current_distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "\tvar smallest_distance = Number.MAX_VALUE;\n\tvar closest_numbers\
    \ = [];\n\tvar closest_number = null;\n\tvar i;\n\tvar j;\n\tfor(i = 0; i < numbers.length;\
    \ i++){\n\t\tfor(j = 0; j < numbers.length; j++){\n\t\t\tif(i != j){\n\t\t\t\t\
    var distance = numbers[i] - numbers[j];\n\t\t\t\tif(distance < smallest_distance){\n\
    \t\t\t\t\tsmallest_distance = distance;\n\t\t\t\t\tclosest_numbers = [numbers[i],\
    \ numbers[j]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_numbers;\n}\n",
  "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) === -1) continue;\n\t\tresult.push(i);\n\t}\n\treturn\
    \ result;\n}\n", "    var smallest = Math.min(numbers);\n    var largest = Math.max(numbers);\n\
    \    var closest_numbers = [];\n    var closest_number = null;\n    for(var i\
    \ = 0; i < numbers.length; i++){\n        if(numbers[i] === smallest){\n     \
    \       closest_number = smallest;\n            closest_numbers.push(smallest);\n\
    \        }\n        else if(numbers[i] === largest){\n            closest_number\
    \ = largest;\n            closest_numbers.push(largest);\n        }\n        else{\n\
    \            var difference = Math.abs(numbers[i] - closest_number);\n       \
    \     if(difference < Math.abs(smallest - closest_number)){\n                closest_number\
    \ = numbers[i];\n                closest_numbers.push(numbers[i]);\n         \
    \   }\n            else if(difference < Math.abs(largest - closest_number)){\n\
    \                closest_number = numbers[i];\n                closest_numbers.push(numbers[i]);\n\
    \            }\n        }\n    }\n    return closest_numbers;\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest){\n\t\t\t\
    largest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar\
    \ closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return result;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) !== -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "    var smallest = Math.min(numbers[0], numbers[1]);\n    var\
    \ largest = Math.max(numbers[0], numbers[1]);\n    var result = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] < smallest || numbers[i]\
    \ > largest){\n            continue;\n        }\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tvar i =\
    \ numbers.length;\n\twhile (i--){\n\t\tif (numbers[i] === smallest){\n\t\t\tresult.push(smallest);\n\
    \t\t} else if (numbers[i] === largest){\n\t\t\tresult.push(largest);\n\t\t} else\
    \ {\n\t\t\tvar diff = Math.abs(largest - smallest);\n\t\t\tvar mid = Math.floor((largest\
    \ - smallest)/2) + smallest;\n\t\t\tif (numbers[i] < mid){\n\t\t\t\tresult.push(smallest);\n\
    \t\t\t} else {\n\t\t\t\tresult.push(largest);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar closest_pair = numbers[0];\n\
    \tvar closest_distance = numbers[1];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar current_distance = numbers[i] - closest_pair;\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance\
    \ = current_distance;\n\t\t}\n\t}\n\treturn [closest_pair, closest_distance];\n\
    }\n", "  var smallest_difference = Number.MAX_VALUE;\n  var smallest_difference_index\
    \ = -1;\n  var second_smallest_difference = Number.MAX_VALUE;\n  var second_smallest_difference_index\
    \ = -1;\n  for (var i = 0; i < numbers.length; i++){\n    var difference = Math.abs(numbers[i]\
    \ - numbers[smallest_difference_index]);\n    if (difference < smallest_difference){\n\
    \      smallest_difference = difference;\n      smallest_difference_index = i;\n\
    \    }\n    if (difference < second_smallest_difference){\n      second_smallest_difference\
    \ = difference;\n      second_smallest_difference_index = i;\n    }\n  }\n  return\
    \ [numbers[smallest_difference_index], numbers[second_smallest_difference_index]];\n\
    }\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n     \
    \       smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tnumbers = numbers.slice();\n\tnumbers.sort(function(a, b){\n\t\treturn\
    \ Math.abs(a - b);\n\t});\n\treturn numbers[numbers.length / 2 | 0];\n}\n", "\t\
    var smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tlet smallest_number = numbers[0];\n\tlet second_smallest_number = numbers[0];\n\
    \tfor (let i = 1; i < numbers.length; i++){\n\t\tif (numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif (numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,\
    \ second_smallest_number];\n}\n", "\tvar smallest_number = numbers[0];\n\tvar\
    \ biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(biggest_number < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\t\
    \t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "  var smallest_diff;\n\
    \  var smallest_diff_index;\n  var i;\n  var j;\n  var diff;\n  var diff_index;\n\
    \  var result = [];\n  for(i = 0; i < numbers.length; i++){\n    smallest_diff\
    \ = Number.MAX_VALUE;\n    smallest_diff_index = -1;\n    for(j = 0; j < numbers.length;\
    \ j++){\n      diff = numbers[j] - numbers[i];\n      if(diff < smallest_diff){\n\
    \        smallest_diff = diff;\n        smallest_diff_index = j;\n      }\n  \
    \  }\n    result.push(numbers[smallest_diff_index]);\n  }\n  return result;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest || numbers[i] == largest){\n      result.push(numbers[i]);\n   \
    \ }\n  }\n  return result;\n}\n", "\tvar closest_pair = numbers[0];\n\tvar closest_distance\
    \ = numbers[1];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i] - closest_pair;\n\t\tif(current_distance < closest_distance){\n\
    \t\t\tclosest_pair = numbers[i];\n\t\t\tclosest_distance = current_distance;\n\
    \t\t}\n\t}\n\treturn [closest_pair, closest_distance];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  \
    \  var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n         \
    \   smallest = numbers[i];\n        }\n        else if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tvar smallest_diff, smallest_number, largest_diff, largest_number;\n\t\
    smallest_diff = Math.abs(numbers[0] - numbers[1]);\n\tsmallest_number = numbers[0];\n\
    \tlargest_diff = Math.abs(numbers[0] - numbers[1]);\n\tlargest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar diff = Math.abs(numbers[i]\
    \ - numbers[i - 1]);\n\t\tif(diff < smallest_diff){\n\t\t\tsmallest_diff = diff;\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(diff > largest_diff){\n\t\t\
    \tlargest_diff = diff;\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, largest_number];\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tvar smallest\
    \ = Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\
    \tvar results = [];\n\tfor(var i = 2; i < numbers.length; i++){\n\t\tvar number\
    \ = numbers[i];\n\t\tif(number < smallest || number > largest){\n\t\t\tbreak;\n\
    \t\t}\n\t\tresults.push(number);\n\t}\n\treturn results;\n}\n", "    var smallest_number\
    \ = numbers[0];\n    var second_smallest_number = numbers[0];\n    var smallest_index\
    \ = -1;\n    var second_smallest_index = -1;\n    var smallest_difference = Number.MAX_VALUE;\n\
    \    var second_smallest_difference = Number.MAX_VALUE;\n    for(var i = 0; i\
    \ < numbers.length; i++){\n        var current_number = numbers[i];\n        if(current_number\
    \ < smallest_number){\n            smallest_number = current_number;\n       \
    \     smallest_index = i;\n        }\n        else if(current_number > second_smallest_number){\n\
    \            second_smallest_number = current_number;\n            second_smallest_index\
    \ = i;\n        }\n        var current_difference = Math.abs(smallest_number -\
    \ current_number);\n        if(current_difference < smallest_difference){\n  \
    \          smallest_difference = current_difference;\n            smallest_index\
    \ = i;\n        }\n        else if(current_difference > second_smallest_difference){\n\
    \            second_smallest_difference = current_difference;\n            second_smallest_index\
    \ = i;\n        }\n    }\n    return [smallest_number, second_smallest_number];\n\
    }\n", "    var smallest_number = numbers[0];\n    var largest_number = numbers[0];\n\
    \    var smallest_index = -1;\n    var largest_index = -1;\n    for(var i = 1;\
    \ i < numbers.length; i++){\n        if(numbers[i] < smallest_number){\n     \
    \       smallest_number = numbers[i];\n            smallest_index = i;\n     \
    \   }\n        else if(numbers[i] > largest_number){\n            largest_number\
    \ = numbers[i];\n            largest_index = i;\n        }\n    }\n    return\
    \ [smallest_number, largest_number];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) !== -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i)\
    \ > -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "    var smallest_difference = Number.MAX_VALUE;\n\
    \    var smallest_difference_index = 0;\n    var smallest_number = numbers[0];\n\
    \    var second_smallest_number = numbers[1];\n    var second_smallest_difference\
    \ = Number.MAX_VALUE;\n    var second_smallest_difference_index = 0;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        var current_difference = Math.abs(numbers[i]\
    \ - smallest_number);\n        if(current_difference < second_smallest_difference){\n\
    \            second_smallest_difference = current_difference;\n            second_smallest_difference_index\
    \ = i;\n        }\n        if(current_difference < smallest_difference){\n   \
    \         smallest_difference = current_difference;\n            smallest_difference_index\
    \ = i;\n            smallest_number = numbers[i];\n        }\n    }\n    return\
    \ [smallest_number, numbers[smallest_difference_index]];\n}\n", "    var smallest\
    \ = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math, numbers);\n\
    \    var results = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ if(numbers[i] === smallest){\n            results.push(smallest);\n        }\n\
    \        else if(numbers[i] === largest){\n            results.push(largest);\n\
    \        }\n        else if(numbers[i] < smallest && numbers[i] > largest){\n\
    \            results.push(smallest);\n        }\n        else if(numbers[i] >\
    \ smallest && numbers[i] < largest){\n            results.push(largest);\n   \
    \     }\n    }\n    return results;\n}\n", "\tvar smallest_diff, smallest_diff_index;\n\
    \t\n\tsmallest_diff = Math.abs(numbers[0] - numbers[1]);\n\tsmallest_diff_index\
    \ = 0;\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar diff = numbers[i]\
    \ - numbers[smallest_diff_index];\n\t\t\n\t\tif(diff < smallest_diff){\n\t\t\t\
    smallest_diff = diff;\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\treturn\
    \ [numbers[smallest_diff_index], numbers[smallest_diff_index + 1]];\n}\n", " \
    \   var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var i =\
    \ 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n         \
    \   smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n   \
    \         largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var i\
    \ = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "    var smallest = Math.min(numbers[0],\
    \ numbers[1]);\n    var largest = Math.max(numbers[0], numbers[1]);\n    var result\
    \ = [];\n    for(var i = 2; i < numbers.length; i++){\n        var current_number\
    \ = numbers[i];\n        if(current_number == smallest || current_number == largest){\n\
    \            result.push(current_number);\n        }\n        else if(current_number\
    \ < smallest && current_number > largest){\n            result.push(smallest);\n\
    \            result.push(current_number);\n        }\n        else if(current_number\
    \ > smallest && current_number < largest){\n            result.push(current_number);\n\
    \        }\n        else if(current_number == smallest){\n            result.push(smallest);\n\
    \        }\n        else if(current_number == largest){\n            result.push(largest);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar smallest = numbers[0];\n\t\
    var largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var i = 1; i <\
    \ numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n\
    \    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n    }\n  }\n\
    \  return [smallest, largest];\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var\
    \ i = smallest; i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\t\t\
    if(index != -1){\n\t\t\tresult.push([i, numbers[index]]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest || numbers[i] == largest){\n\t\t\tresult.push(smallest);\n\
    \t\t\tresult.push(largest);\n\t\t\treturn result;\n\t\t}\n\t}\n\tresult.push(smallest);\n\
    \tresult.push(largest);\n\treturn result;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar smallest_diff,\
    \ smallest_diff_index;\n\t\n\tsmallest_diff = numbers[0];\n\tsmallest_diff_index\
    \ = 0;\n\t\n\tfor (var i = 1; i < numbers.length; i++){\n\t\tvar diff = numbers[i]\
    \ - smallest_diff;\n\t\t\n\t\tif (diff < smallest_diff){\n\t\t\tsmallest_diff\
    \ = diff;\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\treturn [smallest_diff,\
    \ numbers[smallest_diff_index]];\n}\n", "\tlet smallest_number = numbers[0];\n\
    \tlet largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\
    \t\tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif (numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(biggest_number < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar closest_pair = numbers[0];\n\tvar closest_distance\
    \ = numbers[1];\n\tfor (var i = 1; i < numbers.length; i++){\n\t\tvar distance\
    \ = numbers[i] - closest_pair;\n\t\tif (distance < closest_distance){\n\t\t\t\
    closest_pair = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\t\
    return [closest_pair, closest_distance];\n}\n", "\tvar smallest = Math.min(numbers);\n\
    \tvar largest = Math.max(numbers);\n\tvar closest_pair = [smallest, largest];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar next_number = numbers[i+1];\n\t\tvar difference = next_number - current_number;\n\
    \t\tif(Math.abs(difference) < Math.abs(closest_pair[1] - closest_pair[0])){\n\t\
    \t\tclosest_pair[0] = current_number;\n\t\t\tclosest_pair[1] = next_number;\n\t\
    \t}\n\t}\n\treturn closest_pair;\n}\n", "  var smallest_number = numbers[0];\n\
    \  var second_smallest_number = numbers[1];\n  var smallest_index = 0;\n  var\
    \ second_smallest_index = 1;\n  var smallest_difference = numbers[1] - numbers[0];\n\
    \  var second_smallest_difference = numbers[1] - numbers[0];\n  var smallest_square_difference\
    \ = smallest_difference * smallest_difference;\n  var second_smallest_square_difference\
    \ = second_smallest_difference * second_smallest_difference;\n  var smallest_square_distance\
    \ = Number.MAX_VALUE;\n  var second_smallest_square_distance = Number.MAX_VALUE;\n\
    \  var smallest_square_distance_index = 0;\n  var second_smallest_square_distance_index\
    \ = 1;\n  var smallest_square_distance = numbers[1] - numbers[0];\n  var second_smallest_square_distance\
    \ = numbers[1] - numbers[0];\n  var smallest_square_distance_index = 0;\n  var\
    \ second_smallest_square_distance_index = 1;\n  var smallest_square_distance =\
    \ numbers[1] - numbers[0];\n  var second_smallest_square_distance = numbers[1]\
    \ - numbers[0];\n  var smallest_square_distance_index = 0;\n  var second_smallest_square_distance_index\
    \ = 1;\n  var smallest_square_distance = numbers[1] - numbers[0];\n  var second_smallest_square_distance\
    \ = numbers[1] - numbers[0];\n  var smallest_square_distance_index = 0;\n  var\
    \ second_smallest_square_distance_index = 1;\n  var smallest_square_distance =\
    \ numbers[1] - numbers[0];\n  var second_smallest_square_distance = numbers[1]\
    \ - numbers[0];\n  var smallest_square_distance_index = 0;\n  var second_smallest_square_distance_index\
    \ = 1;\n  var smallest_square_distance = numbers[1] - numbers[0];\n  var second_smallest_square_distance\
    \ = numbers[1] - numbers[0];\n  var smallest_square_distance_index = 0;\n  var\
    \ second_smallest_square_distance_index = 1;\n  var smallest_square_distance =\
    \ numbers[1] - numbers[0];\n  var second_smallest_square_distance = numbers[1]\
    \ - numbers[0];\n  var smallest_square_distance_index = 0;\n  var second_smallest_square_distance_index\
    \ = 1;\n  var smallest_square_distance = numbers[1] - numbers[0];\n  var second_smallest_square_distance\
    \ = numbers[1] - numbers[0];\n  var smallest_square_distance_index = 0;\n  var\
    \ second_smallest_square_distance_index = 1;\n  var smallest_square_distance =\
    \ numbers[1] - numbers[0];\n  var second_smallest_square_distance = numbers[1]\
    \ - numbers[0];\n  var smallest_square_distance_index = 0;\n  var second_smallest_square_distance_index\
    \ = 1;\n  var smallest_square_distance = numbers[1] - numbers[0];\n  var second_smallest_square_distance\
    \ = numbers[1] - numbers[0];\n  var smallest_square_distance", "  var smallest\
    \ = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math, numbers);\n\
    \  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i] ==\
    \ smallest || numbers[i] == largest){\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "\tvar smallest_distance = Number.MAX_VALUE;\n\t\
    var smallest_number = numbers[0];\n\tvar second_number = numbers[1];\n\tfor(var\
    \ i=0;i<numbers.length;i++){\n\t\tvar distance = abs(numbers[i]-second_number);\n\
    \t\tif(distance < smallest_distance){\n\t\t\tsmallest_distance = distance;\n\t\
    \t\tsmallest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number,second_number];\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tresult.push([i,\
    \ numbers[index]]);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tvar smallest_distance = Number.MAX_VALUE;\n\
    \tvar largest_distance = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance = distance(current_number,\
    \ smallest_number);\n\t\tif(current_distance < smallest_distance){\n\t\t\tsmallest_number\
    \ = current_number;\n\t\t\tsmallest_distance = current_distance;\n\t\t}\n\t\t\
    if(current_distance > largest_distance){\n\t\t\tlargest_number = current_number;\n\
    \t\t\tlargest_distance = current_distance;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\tclosest_distances.push(smallest_distance);\n\
    \tclosest_distances.push(largest_distance);\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tlet smallest_number = numbers[0];\n\
    \tlet largest_number = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++){\n\
    \t\tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif (numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar smallest_diff,\
    \ smallest_diff_index;\n\t\n\tsmallest_diff = numbers[0];\n\tsmallest_diff_index\
    \ = 0;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(Math.abs(numbers[i]\
    \ - smallest_diff) < Math.abs(smallest_diff - numbers[i])){\n\t\t\tsmallest_diff\
    \ = numbers[i];\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\t\n\treturn [smallest_diff,\
    \ smallest_diff_index];\n}\n", "    var smallest = numbers[0];\n    var largest\
    \ = numbers[0];\n    var smallest_index = -1;\n    var largest_index = -1;\n \
    \   for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n\
    \            smallest = numbers[i];\n            smallest_index = i;\n       \
    \ }\n        if(numbers[i] > largest){\n            largest = numbers[i];\n  \
    \          largest_index = i;\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = [smallest_number, second_smallest_number];\n\t\n\tfor(var\
    \ i = 2; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\t\
    \n\t\tif(current_number < smallest_number){\n\t\t\tsmallest_number = current_number;\n\
    \t\t\tclosest_numbers[0] = smallest_number;\n\t\t}\n\t\t\n\t\tif(current_number\
    \ > second_smallest_number){\n\t\t\tsecond_smallest_number = current_number;\n\
    \t\t\tclosest_numbers[1] = second_smallest_number;\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "  var smallest_diff, smallest_diff_index, largest_diff, largest_diff_index,\
    \ i, diff;\n  smallest_diff = Math.abs(numbers[0] - numbers[1]);\n  smallest_diff_index\
    \ = 0;\n  largest_diff = smallest_diff;\n  largest_diff_index = 1;\n  for(i =\
    \ 2; i < numbers.length; i++){\n    diff = numbers[i] - numbers[smallest_diff_index];\n\
    \    if(diff < smallest_diff){\n      smallest_diff = diff;\n      smallest_diff_index\
    \ = i;\n    }\n    diff = numbers[i] - numbers[largest_diff_index];\n    if(diff\
    \ > largest_diff){\n      largest_diff = diff;\n      largest_diff_index = i;\n\
    \    }\n  }\n  return [numbers[smallest_diff_index], numbers[largest_diff_index]];\n\
    }\n", "    var smallest_number = numbers[0];\n    var second_smallest_number =\
    \ numbers[1];\n    var closest_numbers = [];\n    var closest_numbers_index =\
    \ 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(smallest_number\
    \ > numbers[i]){\n            smallest_number = numbers[i];\n            closest_numbers_index\
    \ = i;\n        }\n        if(second_smallest_number > numbers[i]){\n        \
    \    second_smallest_number = numbers[i];\n        }\n    }\n    closest_numbers.push(smallest_number);\n\
    \    closest_numbers.push(second_smallest_number);\n    return closest_numbers;\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  var smallest_index = 0;\n  var second_smallest_index = 1;\n  var smallest_diff\
    \ = 0;\n  var second_smallest_diff = 0;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    var current_number = numbers[i];\n    var current_diff = Math.abs(current_number\
    \ - smallest_number);\n    if (current_diff < smallest_diff){\n      smallest_number\
    \ = current_number;\n      smallest_index = i;\n      smallest_diff = current_diff;\n\
    \    }\n    if (current_diff < second_smallest_diff){\n      second_smallest_number\
    \ = current_number;\n      second_smallest_index = i;\n      second_smallest_diff\
    \ = current_diff;\n    }\n  }\n  return [smallest_number, second_smallest_number];\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  var closest_numbers = [smallest_number, second_smallest_number];\n  for(var\
    \ i = 2; i < numbers.length; i++){\n    var current_number = numbers[i];\n   \
    \ if(current_number < smallest_number){\n      smallest_number = current_number;\n\
    \      closest_numbers[0] = smallest_number;\n    }\n    else if(current_number\
    \ > second_smallest_number){\n      second_smallest_number = current_number;\n\
    \      closest_numbers[1] = second_smallest_number;\n    }\n  }\n  return closest_numbers;\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\t\tvar index\
    \ = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tresult.push(i);\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar smallest_diff, smallest_diff_index;\n\t\n\
    \tsmallest_diff = numbers[0];\n\tsmallest_diff_index = 0;\n\t\n\tfor(var i = 0;\
    \ i < numbers.length; i++){\n\t\tif(Math.abs(numbers[i] - smallest_diff) < smallest_diff){\n\
    \t\t\tsmallest_diff = numbers[i];\n\t\t\tsmallest_diff_index = i;\n\t\t}\n\t}\n\
    \t\n\treturn [smallest_diff, numbers[smallest_diff_index]];\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tvar smallest\
    \ = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar closest_numbers\
    \ = [];\n\tvar closest_numbers_index = 0;\n\t\n\tfor(var i = 0; i<numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest || numbers[i] > largest){\n\t\t\tcontinue;\n\
    \t\t}\n\t\t\n\t\tif(closest_numbers_index == 0){\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t\tclosest_numbers_index++;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif(Math.abs(numbers[i]\
    \ - closest_numbers[closest_numbers_index-1]) < Math.abs(numbers[i] - closest_numbers[closest_numbers_index])){\n\
    \t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_numbers_index++;\n\t\t\
    }\n\t\telse{\n\t\t\tclosest_numbers[closest_numbers_index-1] = numbers[i];\n\t\
    \t\tclosest_numbers_index++;\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n",
  "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar\
    \ closest_numbers = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t}\n\t\telse if(numbers[i]\
    \ == largest){\n\t\t\tclosest_numbers.push(largest);\n\t\t}\n\t\telse{\n\t\t\t\
    var difference = Math.abs(numbers[i] - smallest);\n\t\t\tvar closest_number =\
    \ (difference < Math.abs(numbers[i] - largest)) ? numbers[i] : largest;\n\t\t\t\
    closest_numbers.push(closest_number);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = [];\n\t\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\t\
    if(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(second_smallest_number);\n\
    \t\n\treturn closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  return [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[0];\n\
    \tvar closest_numbers = [];\n\t\n\tfor (var i = 1; i < numbers.length; i++){\n\
    \t\tif (numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\telse if (numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\t\t\
    closest_numbers.push(second_smallest_number);\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\t\t\tresult.push([i,\
    \ numbers[index]]);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) === -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "    var smallest = numbers[0];\n    var largest = numbers[0];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] < smallest){\n     \
    \       smallest = numbers[i];\n        }\n        if(numbers[i] > largest){\n\
    \            largest = numbers[i];\n        }\n    }\n    return [smallest, largest];\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  for(var i=2; i<numbers.length; i++){\n    var current_number = numbers[i];\n\
    \    if(current_number < smallest_number){\n      smallest_number = current_number;\n\
    \    } else if(current_number > second_smallest_number){\n      second_smallest_number\
    \ = current_number;\n    }\n  }\n  return [smallest_number, second_smallest_number];\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
