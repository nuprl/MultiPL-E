name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested lists,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the list,\n// and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n\
  // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n\
  // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst, x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    var result = [];\n    var row = [];\n    var row_len = 0;\n   \
    \ for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n   \
    \         result.push([i, lst[i].indexOf(x)])\n        }\n        else{\n    \
    \        row.push(lst[i]);\n            row_len++;\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    result.sort(function(a, b){\n\
    \        return b[0] - a[0];\n    });\n    for(var i=0; i<row_len; i++){\n   \
    \     result.push([i, row[i].indexOf(x)])\n    }\n    return result;\n}\n", " \
    \ if(lst.length == 0){\n    return [];\n  }\n  if(lst.length == 1){\n    if(lst[0].length\
    \ == 0){\n      return [];\n    }\n    return [(x, 0)];\n  }\n  var row = [];\n\
    \  var result = [];\n  for(var i=0; i<lst.length; i++){\n    for(var j=0; j<lst[i].length;\
    \ j++){\n      if(lst[i][j] == x){\n        row.push([i, j]);\n      }\n    }\n\
    \  }\n  row.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  row.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  for(var i=0; i<row.length; i++){\n  \
    \  result.push([row[i][0], row[i][1]]);\n  }\n  return result;\n}\n", "    var\
    \ res = [];\n    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n\
    \        for(var j=0; j<row.length; j++){\n            if(row[j] == x){\n    \
    \            res.push([i, row.length-j-1]);\n            }\n        }\n    }\n\
    \    res.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    res.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    return res;\n}\n", "    var row\
    \ = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i][0] == x){\n \
    \           row.push([i, lst[i][1]]);\n        }\n    }\n    row.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    row.sort(function(a, b){\n  \
    \      return a[0] - b[0];\n    });\n    return row;\n}\n", "    var result =\
    \ [];\n    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n     \
    \   var rowLen = row.length;\n        for(var j=0; j<rowLen; j++){\n         \
    \   if(row[j] == x){\n                var tuple = [i, j];\n                result.push(tuple);\n\
    \            }\n        }\n    }\n    result.sort(function(a, b){\n        var\
    \ aRow = a[0];\n        var bRow = b[0];\n        if(aRow == bRow){\n        \
    \    return a[1] - b[1];\n        }\n        return aRow - bRow;\n    });\n  \
    \  result.sort(function(a, b){\n        var aCol = a[1];\n        var bCol = b[1];\n\
    \        if(aCol == bCol){\n            return a[0] - b[0];\n        }\n     \
    \   return aCol - bCol;\n    });\n    return result;\n}\n", "  let result = [];\n\
    \  for(let i = 0; i < lst.length; i++){\n    let row = [];\n    for(let j = 0;\
    \ j < lst[i].length; j++){\n      if(lst[i][j] == x){\n        row.push([i, j]);\n\
    \      }\n    }\n    result.push(row);\n  }\n  result.sort((a,b) => {\n    if(a[0]\
    \ > b[0]) return 1;\n    if(a[0] < b[0]) return -1;\n    if(a[1] > b[1]) return\
    \ 1;\n    if(a[1] < b[1]) return -1;\n    return 0;\n  });\n  result.sort((a,b)\
    \ => {\n    if(a[1] > b[1]) return 1;\n    if(a[1] < b[1]) return -1;\n    return\
    \ 0;\n  });\n  return result;\n}\n", "    var result = [];\n    var row = [];\n\
    \    var row_len = 0;\n    var col_len = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \            row.push(lst[i]);\n            row_len++;\n        }\n    }\n   \
    \ result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    row.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    for(var j = 0; j < row.length;\
    \ j++){\n        col_len = row[j].length;\n        for(var k = 0; k < col_len;\
    \ k++){\n            result.push([(j + 1), (row[j][k])]);\n        }\n    }\n\
    \    return result;\n}\n", "  var result = [];\n  var row = [];\n  for(var i=0;\
    \ i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push(i);\n\
    \    }\n  }\n  if(row.length == 0){\n    return result;\n  }\n  for(var i=0; i<row.length;\
    \ i++){\n    var index = row[i];\n    var columns = [];\n    for(var j=0; j<lst[index].length;\
    \ j++){\n      columns.push(j);\n    }\n    result.push([index, columns]);\n \
    \ }\n  result.sort(function(a, b){\n    var aRow = a[0];\n    var bRow = b[0];\n\
    \    if(aRow == bRow){\n      return a[1] - b[1];\n    }\n    return aRow - bRow;\n\
    \  });\n  result.sort(function(a, b){\n    var aRow = a[0];\n    var bRow = b[0];\n\
    \    if(aRow == bRow){\n      return a[1] - b[1];\n    }\n    return aRow - bRow;\n\
    \  });\n  return result;\n}\n", "  var res = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    var row = lst[i];\n    var rowLen = row.length;\n    var colLen =\
    \ row[x];\n    for(var j=0; j<colLen; j++){\n      res.push([i, x]);\n    }\n\
    \  }\n  res.sort(function(a, b){\n    var aRow = a[0];\n    var bRow = b[0];\n\
    \    if(aRow < bRow) return -1;\n    if(aRow > bRow) return 1;\n    return 0;\n\
    \  });\n  res.sort(function(a, b){\n    var aCol = a[1];\n    var bCol = b[1];\n\
    \    if(aCol < bCol) return -1;\n    if(aCol > bCol) return 1;\n    return 0;\n\
    \  });\n  return res;\n}\n", "    var res = [];\n    var row = [];\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n           \
    \ row.push(i);\n        }\n    }\n    row.sort(function(a, b){\n        return\
    \ b-a;\n    });\n    row.sort(function(a, b){\n        return lst[b].length -\
    \ lst[a].length;\n    });\n    for(var i=0; i<row.length; i++){\n        var coord\
    \ = [row[i], i];\n        res.push(coord);\n    }\n    res.sort(function(a, b){\n\
    \        return a[0] - b[0];\n    });\n    return res;\n}\n", "  if(lst.length\
    \ == 0){\n    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n\
    \  }\n  if(lst.length == 2){\n    if(lst[0].length == x){\n      return [(x, 0)];\n\
    \    }\n    if(lst[1].length == x){\n      return [(x, 1)];\n    }\n  }\n  var\
    \ row = [];\n  var rows = [];\n  for(var i = 0; i<lst.length; i++){\n    var row\
    \ = lst[i];\n    if(row.length == x){\n      rows.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  rows = rows.sort(function(a, b){\n    return b[1] - a[1];\n  });\n\
    \  for(var i = 0; i<rows.length; i++){\n    var row = rows[i];\n    var row2 =\
    \ [];\n    for(var j = 0; j<row.length; j++){\n      row2.push([row[j], (i+j+1)]);\n\
    \    }\n    rows.push(row2);\n  }\n  return rows;\n}\n", "  var result = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    var row = lst[i];\n    var rowLen = row.length;\n\
    \    for(var j=0; j<rowLen; j++){\n      if(row[j] == x){\n        result.push([i,\
    \ j]);\n        break;\n      }\n    }\n  }\n  result.sort(function(a, b){\n \
    \   return b[0] - a[0];\n  });\n  result.sort(function(a, b){\n    return b[1]\
    \ - a[1];\n  });\n  return result;\n}\n", "    var result = [];\n    var row =\
    \ [];\n    var row_len = 0;\n    var col_len = 0;\n    for(var i = 0, len = lst.length;\
    \ i < len; i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push(lst[i]);\n\
    \            row_len++;\n        }\n    }\n    for(var i = 0, len = row.length;\
    \ i < len; i++){\n        col_len = 0;\n        for(var j = 0, len2 = row[i].length;\
    \ j < len2; j++){\n            if(row[i][j] == x){\n                result.push([i,\
    \ col_len]);\n                col_len++;\n            }\n        }\n    }\n  \
    \  result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    return result;\n}\n", "  let\
    \ row = [];\n  let col = [];\n  let rows = [];\n  let cols = [];\n  for(let i\
    \ = 0; i < lst.length; i++){\n    let row = lst[i];\n    for(let j = 0; j < row.length;\
    \ j++){\n      if(row[j] == x){\n        row.splice(j, 1);\n        row.unshift(j);\n\
    \        row.sort((a, b) => a - b);\n        row.sort((a, b) => b - a);\n    \
    \    row.unshift(i);\n        rows.push(row);\n      }\n    }\n  }\n  for(let\
    \ i = 0; i < rows.length; i++){\n    for(let j = 0; j < rows[i].length; j++){\n\
    \      if(rows[i][j] == x){\n        col.push(j);\n        cols.push(col);\n \
    \       col.unshift(i);\n        col.sort((a, b) => b - a);\n        col.unshift(j);\n\
    \        cols.push(col);\n      }\n    }\n  }\n  return rows;\n}\n", "  if(lst.length\
    \ == 0){\n    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n\
    \  }\n  var row = [];\n  var row_index = 0;\n  var col_index = 0;\n  var row_indexes\
    \ = [];\n  var col_indexes = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row_indexes.push(row_index);\n      col_indexes.push(col_index);\n\
    \      row.push([x, lst[i].indexOf(x)]);\n      row_index++;\n    }\n    if(row_index\
    \ == x){\n      col_index++;\n      col_indexes.push(col_index);\n      row_index\
    \ = 0;\n    }\n  }\n  row_indexes.push(row_index);\n  col_indexes.push(col_index);\n\
    \  row.push([x, lst[lst.length-1].indexOf(x)]);\n  row_index++;\n  col_index =\
    \ 0;\n  row_indexes = [];\n  col_indexes = [];\n  for(var i=0; i<row.length; i++){\n\
    \    if(row[i].indexOf(x) != -1){\n      row_indexes.push(row_index);\n      col_indexes.push(col_index);\n\
    \      row.push([x, row[i].indexOf(x)]);\n      row_index++;\n    }\n    if(row_index\
    \ == x){\n      col_index++;\n      col_indexes.push(col_index);\n      row_index\
    \ = 0;\n    }\n  }\n  row_indexes.push(row_index);\n  col_indexes.push(col_index);\n\
    \  row.push([x, row[row.length-1].indexOf(x)]);\n  row_index++;\n  col_index =\
    \ 0;\n  row_indexes = [];\n  col_indexes = [];\n  for(var i=0; i<row.length; i++){\n\
    \    if(row[i].indexOf(x) != -1){\n      row_indexes.push(row_index);\n      col_indexes.push(col_index);\n\
    \      row.push([x, row[i].indexOf(x)]);\n      row_index++;\n    }\n    if(row_index\
    \ == x){\n      col_index++;\n      col_indexes.push(col_index);\n      row_index\
    \ = 0;\n    }\n  }\n  row_indexes.push(row_index);\n  col_indexes.push(col_index);\n\
    \  row.push([x, row[row.length-1].indexOf(x)]);\n  row_index++;\n  col_index =\
    \ 0;\n  row_indexes = [];\n  col_indexes = [];\n  for(var i=0; i<row.length; i++){\n\
    \    if(row[i].indexOf(x) != -1){\n      row_indexes.push(row_index);\n      col_indexes.push(col_index);\n\
    \      row.push([x, ", "  var result = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    var row = [];\n    for(var j=0; j<lst[i].length; j++){\n      if(lst[i][j]\
    \ == x){\n        row.push([i, j]);\n      }\n    }\n    result.push(row);\n \
    \ }\n  result.sort(function(a, b){\n    var aRow = a[0];\n    var bRow = b[0];\n\
    \    if(aRow < bRow){\n      return -1;\n    }\n    if(aRow > bRow){\n      return\
    \ 1;\n    }\n    return 0;\n  });\n  result.sort(function(a, b){\n    var aCol\
    \ = a[1];\n    var bCol = b[1];\n    if(aCol < bCol){\n      return -1;\n    }\n\
    \    if(aCol > bCol){\n      return 1;\n    }\n    return 0;\n  });\n  return\
    \ result;\n}\n", "  var result = [];\n  var row = [];\n  var column = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    row.push(lst[i][0]);\n    column.push(lst[i][1]);\n\
    \  }\n  if(row.length == 0){\n    return result;\n  }\n  if(row.length == 1){\n\
    \    if(row[0] == x){\n      return [(x, column[0])];\n    }\n    return [];\n\
    \  }\n  if(row.length == 2){\n    if(row[0] == x && row[1] == x){\n      return\
    \ [(x, column[0])];\n    }\n    if(row[0] == x && row[1] != x){\n      return\
    \ [];\n    }\n    if(row[1] != x && row[0] == x){\n      return [];\n    }\n \
    \ }\n  if(row.length == 3){\n    if(row[0] == x && row[1] == x && row[2] == x){\n\
    \      return [(x, column[0])];\n    }\n    if(row[0] == x && row[1] == x && row[2]\
    \ != x){\n      return [];\n    }\n    if(row[0] == x && row[1] != x && row[2]\
    \ == x){\n      return [];\n    }\n    if(row[0] != x && row[1] == x && row[2]\
    \ == x){\n      return [];\n    }\n    if(row[0] != x && row[1] != x && row[2]\
    \ == x){\n      return [];\n    }\n    if(row[0] != x && row[1] != x && row[2]\
    \ != x){\n      return [];\n    }\n  }\n  if(row.length == 4){\n    if(row[0]\
    \ == x && row[1] == x && row[2] == x && row[3] == x){\n      return [(x, column[0])];\n\
    \    }\n    if(row[0] == x && row[1] == x && row[2] != x && row[3] == x){\n  \
    \    return [];\n    }\n    if(row[0] == x && row[1] != x && row[2] == x && row[3]\
    \ == x){\n      return [];\n    }\n    if(row[0] == x && row[1] != x && row[2]\
    \ != x && row[3] == x){\n      return [];\n    }\n    if(row[0] != x && row[1]\
    \ == x && row[2] == x && row[3] == x){\n      return [];\n    }\n    if(row[0]\
    \ != x && row[1] != x && row[2] == x && row[3] == x){\n      return [];\n    }\n\
    \    if(row[0] != x && row[1] != x && row[2] != x && row[3] == x){\n      return\
    \ [];\n    }\n  }\n  if(row.length == 5){\n    if(row[0] == x && row[1] == x &&\
    \ row[2] == x && row[3] == x && row[4] == x){\n      return [(x, column[0])];\n\
    \    }\n    if(row[0] == ", "  var result = [];\n  var row = [];\n  for(var i=0;\
    \ i<lst.length; i++){\n    if(lst[i].indexOf(x) !== -1){\n      row.push(i);\n\
    \    }\n  }\n  row.sort(function(a, b){\n    return b - a;\n  });\n  for(var i=0;\
    \ i<row.length; i++){\n    result.push([row[i], i]);\n  }\n  result.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  return result;\n}\n", "  var result =\
    \ [];\n  var row = [];\n  var col = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i][0] == x){\n      row.push(i);\n      col.push(lst[i][1]);\n   \
    \ }\n  }\n  row.sort(function(a, b){\n    return b - a;\n  });\n  col.sort(function(a,\
    \ b){\n    return b - a;\n  });\n  for(var i=0; i<row.length; i++){\n    result.push([row[i],\
    \ col[i]]);\n  }\n  return result;\n}\n", "  var result = [];\n  for(var i=0;\
    \ i<lst.length; i++){\n    var row = lst[i];\n    for(var j=0; j<row.length; j++){\n\
    \      if(row[j] == x){\n        result.push([i, row.length-j-1]);\n      }\n\
    \    }\n  }\n  result.sort(function(a, b){\n    return a[1] - b[1];\n  });\n \
    \ result.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  return result;\n\
    }\n", "    var result = [];\n    var row = [];\n    var row_len = 0;\n    for(var\
    \ i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x) !== -1){\n\
    \            row.push(i);\n            row_len++;\n        }\n    }\n    result.push([row,\
    \ row_len]);\n    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.splice(row.length - 1, 1);\n            row_len--;\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n\
    \    return result;\n}\n", "  var result = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    var row = lst[i];\n    var rowLen = row.length;\n    for(var j=0; j<rowLen;\
    \ j++){\n      if(row[j] == x){\n        result.push([i, j]);\n        break;\n\
    \      }\n    }\n  }\n  result.sort(function(a, b){\n    return a[0] - b[0];\n\
    \  });\n  result.sort(function(a, b){\n    return a[1] - b[1];\n  });\n  return\
    \ result;\n}\n", "    let row = [];\n    let row_index = 0;\n    let col_index\
    \ = 0;\n    let row_indexes = [];\n    let col_indexes = [];\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            row_indexes.push(row_index);\n\
    \            col_indexes.push(col_index);\n            row.push(lst[i][1]);\n\
    \            row_index++;\n            col_index++;\n        }\n        else{\n\
    \            row_indexes.push(row_index);\n            col_indexes.push(col_index);\n\
    \            row.push(0);\n            row_index++;\n            col_index++;\n\
    \        }\n    }\n    row_indexes.sort();\n    col_indexes.sort();\n    for(let\
    \ i = 0; i < row_indexes.length; i++){\n        for(let j = 0; j < col_indexes.length;\
    \ j++){\n            if(row_indexes[i] == row_indexes[j]){\n                row.splice(row_indexes[i],\
    \ 1);\n                row_indexes[i]--;\n            }\n        }\n    }\n  \
    \  row.sort();\n    return row;\n}\n", "  let row = [];\n  let row_len = 0;\n\
    \  let col_len = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length\
    \ == x){\n      row.push([i, lst[i].indexOf(x)]);\n      row_len++;\n    }\n \
    \ }\n  if(row_len == 0){\n    return [];\n  }\n  for(let i = 0; i < lst.length;\
    \ i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] == x){\n\
    \        col_len++;\n      }\n    }\n  }\n  if(col_len == 0){\n    return [];\n\
    \  }\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length;\
    \ j++){\n      if(lst[i][j] == x){\n        col_len--;\n      }\n    }\n  }\n\
    \  if(col_len < row_len){\n    for(let i = 0; i < lst.length; i++){\n      for(let\
    \ j = 0; j < lst[i].length; j++){\n        if(lst[i][j] == x){\n          row.push([i,\
    \ lst[i].indexOf(j)])\n        }\n      }\n    }\n  }\n  if(col_len > row_len){\n\
    \    for(let i = 0; i < lst.length; i++){\n      for(let j = 0; j < lst[i].length;\
    \ j++){\n        if(lst[i][j] == x){\n          row.push([i, lst[i].length + lst[i].indexOf(j)])\n\
    \        }\n      }\n    }\n  }\n  row.sort((a, b) => a[1] - b[1]);\n  row.sort((a,\
    \ b) => b[1] - a[1]);\n  return row;\n}\n", "  if(lst.length == 0){\n    return\
    \ [];\n  }\n  var result = [];\n  var row = [];\n  var col = [];\n  for(var i=0;\
    \ i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push(i);\n\
    \      col.push(lst[i].indexOf(x));\n    }\n  }\n  result.push([row, col]);\n\
    \  row.sort(function(a, b){\n    return a-b;\n  });\n  col.sort(function(a, b){\n\
    \    return b-a;\n  });\n  for(var i=0; i<row.length; i++){\n    result.push([row[i],\
    \ col[i]]);\n  }\n  return result;\n}\n", "  var res = [];\n  var row = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      res.push([i,\
    \ lst[i].indexOf(x)]);\n      row.push(lst[i]);\n    }\n  }\n  res.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  res.sort(function(a, b){\n    return\
    \ a[0] - b[0];\n  });\n  res.reverse();\n  res.forEach(function(e){\n    e.sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    });\n  });\n  return res;\n}\n", "    var\
    \ result = [];\n    var row = [];\n    var rows = [];\n    var columns = [];\n\
    \    var row_num = 0;\n    var column_num = 0;\n    var row_length = 0;\n    var\
    \ column_length = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(lst[i]);\n            row_num++;\n          \
    \  if(row_num === row_length){\n                result.push(row);\n          \
    \      row = [];\n                row_num = 0;\n            }\n        }\n   \
    \     else{\n            column_num++;\n            column_length++;\n       \
    \     if(column_num === column_length){\n                rows.push(row);\n   \
    \             row = [];\n                column_num = 0;\n            }\n    \
    \    }\n    }\n    for(var i = 0; i < rows.length; i++){\n        for(var j =\
    \ 0; j < rows[i].length; j++){\n            columns.push([j, rows[i][j]]);\n \
    \       }\n    }\n    columns.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n    columns.reverse();\n    for(var i = 0; i < columns.length; i++){\n\
    \        result.push([row_num + i, columns[i][0]]);\n    }\n    return result;\n\
    }\n", "    var res = [];\n    var row = [];\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i].indexOf(x) != -1){\n            row.push(i);\n        }\n \
    \   }\n    row.sort(function(a, b){\n        return b - a;\n    });\n    for(var\
    \ i=0; i<row.length; i++){\n        for(var j=0; j<lst[row[i]].length; j++){\n\
    \            if(lst[row[i]][j] == x){\n                res.push([row[i], j]);\n\
    \            }\n        }\n    }\n    res.sort(function(a, b){\n        return\
    \ b[0] - a[0];\n    });\n    return res;\n}\n", "    let row = [];\n    let col\
    \ = [];\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i].indexOf(x) != -1){\n            row.push(i);\n            col.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    row.sort((a, b) => a - b);\n    col.sort((a, b) => b -\
    \ a);\n    for(let i = 0; i < row.length; i++){\n        result.push([row[i],\
    \ col[i]]);\n    }\n    return result;\n}\n", "    var res = [];\n    var row\
    \ = [];\n    var rows = [];\n    var col = [];\n    var cols = [];\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n           \
    \ row.push(lst[i]);\n            rows.push(row);\n            col.push(lst[i].indexOf(x));\n\
    \            cols.push(col);\n            row = [];\n            col = [];\n \
    \       }\n    }\n    for(var i=0; i<rows.length; i++){\n        for(var j=0;\
    \ j<cols.length; j++){\n            res.push([rows[i], cols[j]]);\n        }\n\
    \    }\n    res.sort();\n    return res;\n}\n", "    let row = [];\n    let col\
    \ = [];\n    let rows = [];\n    let cols = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push(i);\n    \
    \        col.push(lst[i].indexOf(x));\n        }\n    }\n    for(let i = 0; i\
    \ < row.length; i++){\n        for(let j = 0; j < col.length; j++){\n        \
    \    rows.push([row[i], col[j]]);\n            cols.push([col[j], row[i]]);\n\
    \        }\n    }\n    rows.sort((a,b) => b[0] - a[0]);\n    cols.sort((a,b) =>\
    \ b[1] - a[1]);\n    return rows;\n}\n", "  let row = [];\n  let col = [];\n \
    \ let rows = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0] ==\
    \ x){\n      row.push(i);\n      col.push(lst[i][1]);\n    }\n  }\n  for(let i\
    \ = 0; i < row.length; i++){\n    rows.push([row[i], col[i]]);\n  }\n  rows =\
    \ rows.sort((a,b) => b[1] - a[1]);\n  rows = rows.reverse();\n  for(let i = 0;\
    \ i < rows.length; i++){\n    rows[i] = rows[i].sort((a,b) => b[1] - a[1]);\n\
    \  }\n  return rows;\n}\n", "    if(lst.length == 0){\n        return [];\n  \
    \  }\n    var row = [];\n    var rows = [];\n    var cols = [];\n    var col =\
    \ [];\n    var row_index = 0;\n    var col_index = 0;\n    for(var i = 0; i <\
    \ lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push(i);\n\
    \            rows.push(row);\n            col.push(i);\n            cols.push(col);\n\
    \            row = [];\n            col = [];\n        }\n    }\n    rows.push(row);\n\
    \    cols.push(col);\n    rows = rows.sort((a, b) => a[0] - b[0]);\n    cols =\
    \ cols.sort((a, b) => b[1] - a[1]);\n    var result = [];\n    for(var i = 0;\
    \ i < rows.length; i++){\n        var row = rows[i];\n        var col = cols[i];\n\
    \        for(var j = 0; j < row.length; j++){\n            result.push([row[j],\
    \ col[j]]);\n        }\n    }\n    return result;\n}\n", "  if(lst.length == 0){\n\
    \    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n  }\n  let\
    \ row = [];\n  let row_index = 0;\n  let col_index = 0;\n  for(let i = 0; i <\
    \ lst.length; i++){\n    if(lst[i][0] == x){\n      row.push([i, col_index]);\n\
    \      col_index++;\n      if(col_index == lst[i][1]){\n        row_index++;\n\
    \        col_index = 0;\n      }\n    }\n  }\n  if(row_index == 0){\n    return\
    \ [];\n  }\n  row.sort((a, b) => b[1] - a[1]);\n  row.sort((a, b) => a[0] - b[0]);\n\
    \  return row;\n}\n", "  var res = [];\n  var row = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i].indexOf(x) != -1){\n      res.push([i, lst[i].indexOf(x)]);\n\
    \      row.push(lst[i]);\n    }\n  }\n  res.sort(function(a, b){\n    return a[1]\
    \ - b[1];\n  });\n  res.sort(function(a, b){\n    return b[0] - a[0];\n  });\n\
    \  res.reverse();\n  res.forEach(function(r){\n    r.sort(function(a, b){\n  \
    \    return b[0] - a[0];\n    });\n  });\n  return res;\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        var row = lst[i];\n\
    \        var rowResult = [];\n        for(var j = 0; j < row.length; j++){\n \
    \           if(row[j] == x){\n                rowResult.push([i, j]);\n      \
    \      }\n        }\n        result.push(rowResult);\n    }\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a, b){\n\
    \        return a[1] - b[1];\n    });\n    return result;\n}\n", "  let row =\
    \ [];\n  let row_index = 0;\n  let col_index = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push([row_index, col_index]);\n\
    \      row_index++;\n      col_index = 0;\n    }\n    else{\n      col_index++;\n\
    \    }\n  }\n  row.push([row_index, col_index]);\n  row.sort((a, b) => a[0] -\
    \ b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row;\n}\n", "    let result\
    \ = [];\n    let row = [];\n    let col = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \            row.push(lst[i]);\n            col.push(lst[i].indexOf(x));\n   \
    \     }\n    }\n    result.sort((a,b) => a[1] - b[1]);\n    row.sort((a,b) =>\
    \ b[0] - a[0]);\n    col.sort((a,b) => b[1] - a[1]);\n    for(let i = 0; i < row.length;\
    \ i++){\n        result.push([i, col[i]]);\n    }\n    return result;\n}\n", " \
    \   var result = [];\n    var row = [];\n    var col = [];\n    var row_index\
    \ = 0;\n    var col_index = 0;\n    for(var i = 0, len = lst.length; i < len;\
    \ i++){\n        if(lst[i] === x){\n            result.push([row_index, col_index]);\n\
    \            row_index++;\n            col_index = 0;\n        }\n        else\
    \ if(row_index === 0){\n            row.push(lst[i]);\n            col_index++;\n\
    \        }\n        else{\n            row.push(lst[i]);\n            col_index--;\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n\
    \    return result;\n}\n", "  var result = [];\n  var row = [];\n  var col = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i][0] == x){\n      row.push(i);\n\
    \      col.push(lst[i][1]);\n    }\n  }\n  result.push([row, col]);\n  result.sort(function(a,\
    \ b){\n    return a[0][1] - b[0][1];\n  });\n  result.sort(function(a, b){\n \
    \   return b[1][0] - a[1][0];\n  });\n  return result;\n}\n", "  var result =\
    \ [];\n  for(var i=0; i<lst.length; i++){\n    var row = lst[i];\n    for(var\
    \ j=0; j<row.length; j++){\n      if(row[j] == x){\n        result.push([i, row.length-j-1]);\n\
    \      }\n    }\n  }\n  result.sort(function(a, b){\n    return a[1] - b[1];\n\
    \  });\n  result.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  return\
    \ result;\n}\n", "  var result = [];\n  for(var i=0; i<lst.length; i++){\n   \
    \ var row = lst[i];\n    var rowx = row[x];\n    for(var j=0; j<rowx.length; j++){\n\
    \      result.push([i, rowx[j]]);\n    }\n  }\n  result.sort(function(a, b){\n\
    \    return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return b[1]\
    \ - a[1];\n  });\n  return result;\n}\n", "  var res = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    var row = lst[i];\n    for(var j=0; j<row.length; j++){\n      if(row[j]\
    \ == x){\n        res.push([i, j]);\n      }\n    }\n  }\n  res.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  res.sort(function(a, b){\n    return\
    \ a[1] - b[1];\n  });\n  return res;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var column = [];\n  var row_sorted = [];\n  var column_sorted = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push(lst[i]);\n\
    \      column_sorted.push(lst[i].indexOf(x));\n    }\n  }\n  row_sorted = row.sort(function(a,\
    \ b){\n    return a - b;\n  });\n  column_sorted = column_sorted.sort(function(a,\
    \ b){\n    return b - a;\n  });\n  for(var i=0; i<row_sorted.length; i++){\n \
    \   result.push([row_sorted[i], column_sorted[i]]);\n  }\n  return result;\n}\n",
  "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        var row\
    \ = lst[i];\n        var row_x = row[x];\n        for(var j = 0; j < row.length;\
    \ j++){\n            if(row_x == row[j]){\n                result.push([i, j]);\n\
    \            }\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "    let row = []\n    let columns\
    \ = []\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n\
    \            row.push(i)\n            columns.push([lst[i][1], lst[i][2]])\n \
    \       }\n    }\n    row.sort((a, b) => a - b)\n    columns.sort((a, b) => b[1]\
    \ - a[1])\n    return row.map((i) => [i, columns[i][1]])\n}\n", "    let row =\
    \ []\n    let rows = []\n    let cols = []\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let index = lst[i].indexOf(x)\n        if(index != -1){\n   \
    \         row.push(i)\n            rows.push(i)\n            cols.push(index)\n\
    \        }\n    }\n    row.sort((a,b) => a - b)\n    rows.sort((a,b) => b - a)\n\
    \    cols.sort((a,b) => b - a)\n    for(let i = 0; i < row.length; i++){\n   \
    \     let index = row[i]\n        row.splice(index, 1)\n        rows.splice(index,\
    \ 1)\n        cols.splice(index, 1)\n    }\n    return [row, rows, cols]\n}\n",
  "  var res = [];\n  var row = [];\n  var col = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n\
    \    }\n  }\n  row.sort(function(a, b){\n    return a-b;\n  });\n  col.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  for(var i=0; i<row.length; i++){\n    res.push([row[i],\
    \ col[i]]);\n  }\n  return res;\n}\n", "    var result = [];\n    var row = [];\n\
    \    var col = [];\n    var row_index = 0;\n    var col_index = 0;\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n           \
    \ result.push([row_index, col_index]);\n            row.push(lst[i]);\n      \
    \      col_index++;\n        }\n        else{\n            row_index++;\n    \
    \        col_index = 0;\n        }\n    }\n    result.sort(function(a, b){\n \
    \       return a[0] - b[0];\n    });\n    row.sort(function(a, b){\n        return\
    \ b[0] - a[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    result.forEach(function(item){\n        result.push(item);\n\
    \    });\n    return result;\n}\n", "    var row = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        var found = false;\n        for(var j=0; j<row.length; j++){\n\
    \            if(row[j][0] === lst[i][0]){\n                found = true;\n   \
    \             break;\n            }\n        }\n        if(!found){\n        \
    \    row.push([lst[i][0], lst[i][1]]);\n        }\n    }\n    row.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    row.sort(function(a, b){\n  \
    \      return b[1] - a[1];\n    });\n    for(var i=0; i<row.length; i++){\n  \
    \      if(row[i][0] === x){\n            return row;\n        }\n    }\n    return\
    \ [];\n}\n", "    let row = [];\n    let row_index = 0;\n    let col_index = 0;\n\
    \    let row_indexes = [];\n    let col_indexes = [];\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(lst[i][0] == x){\n            row.push([i, lst[i][1]]);\n\
    \            row_indexes.push(i);\n        }\n        else if(lst[i][1] < x){\n\
    \            row.push([i, lst[i][1]]);\n            row_indexes.push(i);\n   \
    \     }\n        else if(lst[i][1] > x){\n            row.push([i, lst[i][1]]);\n\
    \            row_indexes.push(i);\n        }\n    }\n    for(let i = 0; i < row_indexes.length;\
    \ i++){\n        for(let j = 0; j < row_indexes.length; j++){\n            if(row_indexes[i]\
    \ < row_indexes[j]){\n                let temp = row_indexes[i];\n           \
    \     row_indexes[i] = row_indexes[j];\n                row_indexes[j] = temp;\n\
    \                temp = col_indexes[i];\n                col_indexes[i] = col_indexes[j];\n\
    \                col_indexes[j] = temp;\n            }\n        }\n    }\n   \
    \ row.sort((a, b) => a[0] - b[0]);\n    row.sort((a, b) => b[1] - a[1]);\n   \
    \ for(let i = 0; i < row.length; i++){\n        for(let j = 0; j < row.length;\
    \ j++){\n            if(row[i][0] == row[j][1]){\n                let temp = row[i][1];\n\
    \                row[i][1] = row[j][1];\n                row[j][1] = temp;\n \
    \           }\n        }\n    }\n    for(let i = 0; i < row.length; i++){\n  \
    \      for(let j = 0; j < row.length; j++){\n            if(row[i][1] == row[j][1]){\n\
    \                let temp = row[i][0];\n                row[i][0] = row[j][0];\n\
    \                row[j][0] = temp;\n            }\n        }\n    }\n    return\
    \ row;\n}\n", "    let row = [];\n    let row_index = 0;\n    let col_index =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n\
    \            row.push([row_index, col_index]);\n            row_index++;\n   \
    \         col_index = 0;\n        }\n        else{\n            col_index++;\n\
    \        }\n    }\n    row.push([row_index, col_index]);\n    row.sort((a,b) =>\
    \ b[0] - a[0]);\n    row.sort((a,b) => b[1] - a[1]);\n    return row;\n}\n", " \
    \ var res = [];\n  var row = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      res.push([i, lst[i].indexOf(x)]);\n      row.push(lst[i]);\n\
    \    }\n  }\n  res.sort(function(a, b){\n    return b[1] - a[1];\n  });\n  res.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  res.reverse();\n  res.forEach(function(item){\n\
    \    item.reverse();\n  });\n  return res;\n}\n", "  var result = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    var row = lst[i];\n    for(var j=0; j<row.length;\
    \ j++){\n      if(row[j] == x){\n        result.push([i, row.length-j-1]);\n \
    \     }\n    }\n  }\n  result.sort(function(a, b){\n    return a[1] - b[1];\n\
    \  });\n  result.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  return\
    \ result;\n}\n", "    let row = [];\n    let row_len = 0;\n    let row_start =\
    \ 0;\n    let row_end = 0;\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(lst[i].indexOf(x) != -1){\n            row.push([row_start, row_end]);\n\
    \            row_len++;\n        }\n        if(row_len == x){\n            row_start\
    \ = i;\n        }\n        if(row_len == x + 1){\n            row_end = i;\n \
    \       }\n    }\n    row.push([row_start, row_end]);\n    row.sort((a, b) =>\
    \ a[0] - b[0]);\n    row.sort((a, b) => b[1] - a[1]);\n    return row;\n}\n",
  "    if(lst.length == 0){\n        return [];\n    }\n    let row = [];\n    let\
    \ row_index = 0;\n    let col_index = 0;\n    let row_indexes = [];\n    let col_indexes\
    \ = [];\n    let row_sorted = [];\n    let col_sorted = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push([i,\
    \ lst[i].indexOf(x)]);\n            row_indexes.push(i);\n            row_sorted.push([i,\
    \ lst[i].indexOf(x)]);\n        }\n    }\n    for(let i = 0; i < row.length; i++){\n\
    \        for(let j = 0; j < row[i].length; j++){\n            for(let k = 0; k\
    \ < row_indexes.length; k++){\n                if(row_indexes[k] == row[i][0]){\n\
    \                    if(row[i][2] > row_indexes[k]){\n                       \
    \ row_indexes[k] = row[i][2];\n                    }\n                }\n    \
    \        }\n        }\n    }\n    for(let i = 0; i < row.length; i++){\n     \
    \   for(let j = 0; j < row[i].length; j++){\n            for(let k = 0; k < row_indexes.length;\
    \ k++){\n                if(row_indexes[k] == row[i][0]){\n                  \
    \  if(row[i][2] > row_indexes[k]){\n                        row_indexes[k] = row[i][2];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   for(let i = 0; i < row.length; i++){\n        for(let j = 0; j < row[i].length;\
    \ j++){\n            for(let k = 0; k < row_indexes.length; k++){\n          \
    \      if(row_indexes[k] == row[i][0]){\n                    if(row[i][2] > row_indexes[k]){\n\
    \                        row_indexes[k] = row[i][2];\n                    }\n\
    \                }\n            }\n        }\n    }\n    for(let i = 0; i < row.length;\
    \ i++){\n        for(let j = 0; j < row[i].length; j++){\n            for(let\
    \ k = 0; k < row_indexes.length; k++){\n                if(row_indexes[k] == row[i][0]){\n\
    \                    if(row[i][2] > row_indexes[k]){\n                       \
    \ row_indexes[k] = row[i][2];\n                    }\n                }\n    \
    \        }\n        }\n    }\n    for(let i = 0; i < row.length; i++){\n     \
    \   for(let j = 0; j < row[i].length; j++){\n            for(let k = 0; k < row_indexes.length;\
    \ k++){\n                if(row_indexes[k] == row[i][0]){\n                  \
    \  if(row[i][2] > row_indexes[k]){\n                        row_indexes[k] = row[i][2];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   for(let i = 0; i < row.length; i++){\n        for(let j = 0; j < ", "    var\
    \ row = [];\n    var coords = [];\n    for(var i=0; i<lst.length; i++){\n    \
    \    var item = lst[i];\n        for(var j=0; j<item.length; j++){\n         \
    \   if(item[j] == x){\n                coords.push([i, item.length]);\n      \
    \      }\n        }\n    }\n    coords.sort(function(a, b){\n        return a[0]\
    \ - b[0];\n    });\n    coords.sort(function(a, b){\n        return b[1] - a[1];\n\
    \    });\n    for(var i=0; i<coords.length; i++){\n        row.push([coords[i][0],\
    \ coords[i][1]]);\n    }\n    return row;\n}\n", "    let row = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      row.push([i, lst[i].indexOf(x)]);\n        }\n    }\n    row.sort((a, b)\
    \ => a[1] - b[1]);\n    row.sort((a, b) => b[0] - a[0]);\n    return row;\n}\n",
  "  var result = [];\n  var row = [];\n  var columns = [];\n  var rows = [];\n  var\
    \ column = 0;\n  var row = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i]\
    \ === x){\n      result.push([row, column]);\n      rows.push(row);\n      columns.push(column);\n\
    \      row = [];\n      column = 0;\n      row++;\n    }else{\n      row.push(lst[i]);\n\
    \      column++;\n    }\n  }\n  if(row.length > 0){\n    result.push([row, column]);\n\
    \    rows.push(row);\n    columns.push(column);\n  }\n  result.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  rows.sort(function(a, b){\n    return\
    \ b[0] - a[0];\n  });\n  columns.sort(function(a, b){\n    return b[1] - a[1];\n\
    \  });\n  return result;\n}\n", "  let row = []\n  let col = []\n  let rows =\
    \ []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n\
    \      row.push(i)\n      col.push(lst[i].indexOf(x))\n    }\n  }\n  for(let i\
    \ = 0; i < row.length; i++){\n    rows.push([row[i], col[i]])\n  }\n  rows.sort((a,\
    \ b) => a[0] - b[0])\n  rows.sort((a, b) => b[1] - a[1])\n  return rows\n}\n",
  "    var result = [];\n    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n\
    \        if(row.indexOf(x) != -1){\n            result.push([i, row.indexOf(x)])\n\
    \        }\n    }\n    result.sort(function(a, b){\n        if(a[1] < b[1]) return\
    \ -1;\n        if(a[1] > b[1]) return 1;\n        return 0;\n    });\n    result.sort(function(a,\
    \ b){\n        if(a[0] < b[0]) return -1;\n        if(a[0] > b[0]) return 1;\n\
    \        return 0;\n    });\n    return result;\n}\n", "  let row = []\n  let\
    \ column = []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0] == x){\n\
    \      row.push([i, 0])\n      column.push(0)\n    }\n    else if(lst[i][0] ==\
    \ x){\n      column.push(lst[i][1].length)\n    }\n  }\n  row.sort((a,b) => a[0]\
    \ - b[0])\n  column.sort((a,b) => b - a)\n  return [row, column]\n}\n", "  let\
    \ row = []\n  let columns = []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ !== -1){\n      row.push(i)\n      columns.push(lst[i].indexOf(x))\n    }\n\
    \  }\n  if(row.length === 0){\n    return []\n  }\n  if(row.length === 1){\n \
    \   return [(x, columns[0])]\n  }\n  if(row.length > 1){\n    row.sort((a,b) =>\
    \ a-b)\n    columns.sort((a,b) => b-a)\n    let result = []\n    for(let i = 0;\
    \ i < row.length; i++){\n      result.push([(row[i] + 1), columns[i]])\n    }\n\
    \    result.sort((a,b) => a[0] - b[0])\n    return result\n  }\n}\n", "    var\
    \ result = [];\n    for(var i = 0; i < lst.length; i++){\n        var row = lst[i];\n\
    \        var found = false;\n        for(var j = 0; j < row.length; j++){\n  \
    \          if(row[j] === x){\n                found = true;\n                break;\n\
    \            }\n        }\n        if(found){\n            result.push([i, row.indexOf(row[x])]);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n    result.sort(function(a, b){\n        return b[0] - a[0];\n    });\n\
    \    return result;\n}\n", "    let row = [];\n    let row_index = 0;\n    let\
    \ col_index = 0;\n    let row_length = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push([row_index,\
    \ col_index]);\n            row_index++;\n            row_length++;\n        }\n\
    \        if(row_index == x){\n            row_index = 0;\n            col_index++;\n\
    \        }\n    }\n    row.push([row_index, col_index]);\n    row.sort((a, b)\
    \ => a[0] - b[0]);\n    row.sort((a, b) => a[1] - b[1]);\n    return row;\n}\n",
  "  let row = [];\n  let row_sorted = [];\n  let row_sorted_reverse = [];\n  let\
    \ row_reverse = [];\n  let row_reverse_reverse = [];\n  let row_reverse_reverse_reverse\
    \ = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n\
    \      row.push(i);\n      row_sorted.push([lst[i].indexOf(x), lst[i].indexOf(x)]);\n\
    \      row_reverse.push([lst[i].indexOf(x), lst[i].indexOf(x)]);\n      row_reverse_reverse.push([lst[i].indexOf(x),\
    \ lst[i].indexOf(x)]);\n      row_reverse_reverse_reverse.push([lst[i].indexOf(x),\
    \ lst[i].indexOf(x)]);\n    }\n  }\n  row_sorted.sort((a, b) => a[0] - b[0]);\n\
    \  row_reverse.sort((a, b) => b[0] - a[0]);\n  row_reverse_reverse.sort((a, b)\
    \ => b[0] - a[0]);\n  row_reverse_reverse_reverse.sort((a, b) => b[0] - a[0]);\n\
    \  row_sorted.sort((a, b) => b[1] - a[1]);\n  row_reverse.sort((a, b) => b[1]\
    \ - a[1]);\n  row_reverse_reverse.sort((a, b) => b[1] - a[1]);\n  row_reverse_reverse_reverse.sort((a,\
    \ b) => b[1] - a[1]);\n  for(let i = 0; i < row_sorted.length; i++){\n    for(let\
    \ j = 0; j < row_sorted[i][1]; j++){\n      row_sorted.splice([i, 1], 1);\n  \
    \  }\n  }\n  for(let i = 0; i < row_reverse.length; i++){\n    for(let j = 0;\
    \ j < row_reverse[i][1]; j++){\n      row_reverse.splice([i, 1], 1);\n    }\n\
    \  }\n  for(let i = 0; i < row_reverse_reverse.length; i++){\n    for(let j =\
    \ 0; j < row_reverse_reverse[i][1]; j++){\n      row_reverse_reverse.splice([i,\
    \ 1], 1);\n    }\n  }\n  for(let i = 0; i < row_reverse_reverse_reverse.length;\
    \ i++){\n    for(let j = 0; j < row_reverse_reverse_reverse[i][1]; j++){\n   \
    \   row_reverse_reverse_reverse.splice([i, 1], 1);\n    }\n  }\n  for(let i =\
    \ 0; i < row.length; i++){\n    for(let j = 0; j < row_sorted[i][1]; j++){\n \
    \     row_sorted.splice([i, 1], 1);\n    }\n  }\n  for(let i = 0; i < row.length;\
    \ i++){\n    for(let j = 0; j < row_reverse[i][1]; j++){\n      row_reverse.splice([i,\
    \ 1], 1);\n    }\n  }\n  for(let i = 0; i < row.length; i++){\n    for(let j =\
    \ 0; j < row_reverse_reverse[i][1]; j++){\n      row_", "  let row = []\n  let\
    \ row_index = 0\n  let col_index = 0\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i].indexOf(x) != -1){\n      row.push([row_index, col_index])\n  \
    \    row_index++\n      col_index = 0\n    }\n    else{\n      col_index++\n \
    \   }\n  }\n  row.push([row_index, col_index])\n  return row\n}\n", "  if(lst.length\
    \ == 0){\n    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n\
    \  }\n  let row = [];\n  let rows = [];\n  let cols = [];\n  let col = 0;\n  let\
    \ row = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x) !=\
    \ -1){\n      row.push(i);\n      rows.push(row);\n      cols.push(col);\n   \
    \   col++;\n    }\n  }\n  if(rows.length == 0){\n    return [];\n  }\n  if(rows.length\
    \ == 1){\n    return [(x, rows[0])];\n  }\n  for(let i = 0; i < rows.length; i++){\n\
    \    for(let j = 0; j < cols.length; j++){\n      if(rows[i] === rows[j]){\n \
    \       let tuple = [(x, rows[i]), (cols[j], cols[j + 1] - 1)];\n        rows.splice(i,\
    \ 1);\n        cols.splice(j, 1);\n        return tuple;\n      }\n    }\n  }\n\
    }\n", "  var result = [];\n  for(var i=0; i<lst.length; i++){\n    var row = [];\n\
    \    for(var j=0; j<lst[i].length; j++){\n      if(lst[i][j] == x){\n        row.push([i,\
    \ j]);\n      }\n    }\n    result.push(row);\n  }\n  result.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  return result;\n}\n", "  let row = []\n  let rows = []\n\
    \  let columns = []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0]\
    \ == x){\n      row.push(i)\n      rows.push(row)\n      columns.push([lst[i][1]])\n\
    \    }\n  }\n  rows.sort((a,b) => b[0] - a[0])\n  columns.sort((a,b) => b[1] -\
    \ a[1])\n  for(let i = 0; i < rows.length; i++){\n    for(let j = 0; j < columns.length;\
    \ j++){\n      if(rows[i][0] == columns[j][0]){\n        row.push([rows[i][0],\
    \ columns[j][1]])\n      }\n    }\n  }\n  return row\n}\n", "  var result = [];\n\
    \  var row = [];\n  var columns = [];\n  for(var i=0; i<lst.length; i++){\n  \
    \  if(lst[i].indexOf(x) != -1){\n      row.push(i);\n      columns.push(lst[i].indexOf(x));\n\
    \    }\n  }\n  result.push(row);\n  result.push(columns);\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  result.sort(function(a, b){\n    return\
    \ b[0] - a[0];\n  });\n  return result;\n}\n", "  let row = [];\n  let row_sorted\
    \ = [];\n  let col_sorted = [];\n  for(let i = 0; i < lst.length; i++){\n    let\
    \ row_sort = [];\n    for(let j = 0; j < lst[i].length; j++){\n      row_sort.push([j,\
    \ lst[i][j]]);\n    }\n    row_sorted.push(row_sort);\n  }\n  row_sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  row_sorted.sort((a, b) => b[1] - a[1]);\n  for(let i\
    \ = 0; i < row_sorted.length; i++){\n    let col_sort = [];\n    col_sort.push([row_sorted[i][0]]);\n\
    \    col_sort.push([row_sorted[i][1]]);\n    col_sorted.push(col_sort);\n  }\n\
    \  col_sorted.sort((a, b) => b[0] - a[0]);\n  col_sorted.sort((a, b) => a[1] -\
    \ b[1]);\n  let result = [];\n  for(let i = 0; i < col_sorted.length; i++){\n\
    \    for(let j = 0; j < col_sorted[i].length; j++){\n      if(col_sorted[i][j]\
    \ === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n\
    }\n", "    var res = [];\n    for(var i=0; i<lst.length; i++){\n        var row\
    \ = lst[i];\n        var rowLen = row.length;\n        var colLen = row[x];\n\
    \        for(var j=0; j<colLen; j++){\n            res.push([i, j]);\n       \
    \ }\n    }\n    res.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\
    \    res.sort(function(a, b){\n        return b[1] - a[1];\n    });\n    return\
    \ res;\n}\n", "    var result = [];\n    var rows = lst.length;\n    var cols\
    \ = lst[0].length;\n    var row = 0;\n    var col = 0;\n    while(row < rows &&\
    \ col < cols){\n        if(lst[row][col] == x){\n            result.push([row,\
    \ col]);\n            row++;\n            col++;\n        }\n        else if(lst[row][col]\
    \ > x){\n            row++;\n        }\n        else{\n            col++;\n  \
    \      }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return b[1] - a[1];\n    });\n\
    \    return result;\n}\n", "    var result = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        var row = lst[i];\n        var row_x = row[x];\n        for(var\
    \ j=0; j<row.length; j++){\n            if(row_x == row[j]){\n               \
    \ result.push([i, j]);\n            }\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a, b){\n\
    \        return b[1] - a[1];\n    });\n    return result;\n}\n", "  let row =\
    \ []\n  let col = []\n  let rows = []\n  let cols = []\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i].includes(x)){\n      row.push(i)\n      col.push(lst[i].indexOf(x))\n\
    \      rows.push(row)\n      cols.push(col)\n    }\n  }\n  if(row.length == 0){\n\
    \    return []\n  }\n  if(row.length == 1){\n    return [rows[0]]\n  }\n  if(row.length\
    \ == 2){\n    let row1 = rows[0]\n    let row2 = rows[1]\n    let col1 = cols[0]\n\
    \    let col2 = cols[1]\n    if(row1[0] == row2[0]){\n      return [\n       \
    \ [row1[0], col1],\n        [row1[1], col2],\n      ]\n    }\n    return [\n \
    \     [row1[0], col1],\n      [row2[0], col2],\n    ]\n  }\n  if(row.length ==\
    \ 3){\n    let row1 = rows[0]\n    let row2 = rows[1]\n    let row3 = rows[2]\n\
    \    let col1 = cols[0]\n    let col2 = cols[1]\n    let col3 = cols[2]\n    if(row1[0]\
    \ == row2[0] && row1[1] == row2[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row1[2], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row2[0] && row1[1] == row3[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row2[1], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row3[0] && row1[1] == row2[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row2[1], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row3[0] && row1[1] == row3[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row3[1], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row2[0] && row1[2] == row2[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row2[2], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row2[0] && row1[2] == row3[1]){\n      return [\n        [row1[0], col1],\n\
    \        [row1[1], col2],\n        [row2[2], col3],\n      ]\n    }\n    if(row1[0]\
    \ == row3[0] && row1[2] == row2[1]){\n      return [\n        [row1[0], col",
  "    var res = [];\n    var row = [];\n    var col = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        row.push(lst[i][0]);\n        col.push(lst[i][1]);\n    }\n \
    \   row.sort(function(a, b){\n        return b-a;\n    });\n    col.sort(function(a,\
    \ b){\n        return b-a;\n    });\n    for(var i=0; i<row.length; i++){\n  \
    \      if(row[i] == x){\n            res.push([i, col[i]]);\n        }\n    }\n\
    \    return res;\n}\n", "  var result = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    var row = lst[i];\n    for(var j=0; j<row.length; j++){\n      if(row[j]\
    \ == x){\n        result.push([i, row.length-j-1]);\n      }\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  result.sort(function(a, b){\n    return\
    \ a[0] - b[0];\n  });\n  return result;\n}\n", "    var result = [];\n    var\
    \ rows = lst.length;\n    var cols = lst[0].length;\n    var row = 0;\n    var\
    \ col = 0;\n    while(row < rows && col < cols){\n        if(lst[row][col] ==\
    \ x){\n            result.push([row, col]);\n            row++;\n            col++;\n\
    \        }\n        else if(lst[row][col] > x){\n            row++;\n        }\n\
    \        else{\n            col++;\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    result.sort(function(a, b){\n\
    \        return b[1] - a[1];\n    });\n    return result;\n}\n", "    var res\
    \ = [];\n    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n   \
    \     for(var j=0; j<row.length; j++){\n            if(row[j] == x){\n       \
    \         res.push([i, j]); break;\n            }\n        }\n    }\n    res.sort(function(a,\
    \ b){\n        return a[0] - b[0] || a[1] - b[1];\n    });\n    res.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    return res;\n}\n", "    let row\
    \ = []\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n\
    \            row.push([i, lst[i][1]])\n        }\n    }\n    row.sort((a,b) =>\
    \ a[0] - b[0])\n    row.sort((a,b) => b[1] - a[1])\n    return row\n}\n", "  \
    \  let row = []\n    let rows = []\n    let columns = []\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push(i)\n\
    \            rows.push(row)\n            columns.push(lst[i].indexOf(x))\n   \
    \     }\n    }\n    rows = rows.sort((a,b) => b[1] - a[1])\n    columns = columns.sort((a,b)\
    \ => b[1] - a[1])\n    let result = []\n    for(let i = 0; i < rows.length; i++){\n\
    \        let row = []\n        for(let j = 0; j < columns.length; j++){\n    \
    \        row.push((rows[i][0] + 1, rows[i][1] + columns[j]))\n        }\n    \
    \    result.push(row)\n    }\n    return result\n}\n", "    var result = [];\n\
    \    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n        var\
    \ rowLen = row.length;\n        for(var j=0; j<rowLen; j++){\n            if(row[j]\
    \ == x){\n                result.push([i, j]); \n            }\n        }\n  \
    \  }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\
    \    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    return\
    \ result;\n}\n", "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        var row = lst[i];\n        var row_x = row[x];\n        var row_y = row.length\
    \ - x - 1;\n        for(var j = 0; j < row_x; j++){\n            result.push([i,\
    \ row_y]);\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "  var result = [];\n  var row =\
    \ [];\n  var col = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n\
    \  row.sort(function(a, b){\n    return a - b;\n  });\n  col.sort(function(a,\
    \ b){\n    return b - a;\n  });\n  for(var i=0; i<row.length; i++){\n    result.push([row[i],\
    \ col[i]]);\n  }\n  return result;\n}\n", "    var result = [];\n    var row =\
    \ [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n\
    \            row.push(i);\n        }\n    }\n    result.push(row);\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n           \
    \ row.push(i);\n        }\n    }\n    result.push(row);\n    result.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    result.sort(function(a, b){\n\
    \        return a[2] - b[2];\n    });\n    return result;\n}\n", "  let row =\
    \ []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].includes(x)){\n  \
    \    row.push([i, lst[i].indexOf(x)])\n    }\n  }\n  row.sort((a, b) => b[1] -\
    \ a[1])\n  row.sort((a, b) => b[0] - a[0])\n  return row\n}\n", "  var result\
    \ = [];\n  for(var i=0; i<lst.length; i++){\n    var row = [];\n    for(var j=0;\
    \ j<lst[i].length; j++){\n      if(lst[i][j] == x){\n        row.push([i, j]);\n\
    \      }\n    }\n    result.push(row);\n  }\n  result.sort(function(a, b){\n \
    \   return a[0]-b[0];\n  });\n  result.sort(function(a, b){\n    return a[1]-b[1];\n\
    \  });\n  return result;\n}\n", "  if(lst.length == 0){\n    return [];\n  }\n\
    \  if(lst.length == 1){\n    if(lst[0].length == 0){\n      return [];\n    }\n\
    \    return [(x, 0)];\n  }\n  var result = [];\n  var row = [];\n  var row_len\
    \ = lst[0].length;\n  var col_len = lst.length;\n  var row_start = 0;\n  var col_start\
    \ = 0;\n  while(row_start < row_len){\n    while(col_start < col_len){\n     \
    \ if(lst[col_start][row_start] == x){\n        result.push([(row_start, col_start)]);\n\
    \      }\n      col_start++;\n    }\n    col_start = 0;\n    row_start++;\n  }\n\
    \  result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var row = [];\n    var row_sorted = [];\n\
    \    var col_sorted = [];\n    var row_index = 0;\n    var col_index = 0;\n  \
    \  for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n  \
    \          row.push([i, lst[i].indexOf(x)]);\n            row_sorted.push(row);\n\
    \            row = [];\n            row_index++;\n        }\n    }\n    for(var\
    \ i=0; i<row_sorted.length; i++){\n        col_sorted.push([]);\n        for(var\
    \ j=0; j<row_sorted[i].length; j++){\n            col_sorted[i].push([row_index,\
    \ row_sorted[i][j][1]]);\n        }\n    }\n    col_sorted.sort(function(a, b){\n\
    \        return b[1] - a[1];\n    });\n    col_sorted.reverse();\n    for(var\
    \ i=0; i<col_sorted.length; i++){\n        row_sorted.push([]);\n        for(var\
    \ j=0; j<col_sorted[i].length; j++){\n            row_sorted[i].push([col_sorted[i][j][0],\
    \ col_sorted[i][j][1]]);\n        }\n    }\n    row_sorted.sort(function(a, b){\n\
    \        return a[0] - b[0];\n    });\n    row_sorted.reverse();\n    return row_sorted;\n\
    }\n", "    var row = [];\n    var rows = [];\n    var cols = [];\n    var row_index\
    \ = 0;\n    var col_index = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i].indexOf(x) != -1){\n            row.push(i);\n            rows.push(row);\n\
    \            row.sort(function(a, b){\n                return b - a;\n       \
    \     });\n            row.sort(function(a, b){\n                return a - b;\n\
    \            });\n            row.forEach(function(item, index){\n           \
    \     cols.push(lst[item][index]);\n            });\n            row = [];\n \
    \       }\n    }\n    cols.forEach(function(item, index){\n        col_index =\
    \ col_index + item;\n    });\n    rows.forEach(function(item, index){\n      \
    \  row_index = row_index + item;\n    });\n    return rows.map(function(item,\
    \ index){\n        return [row_index + index, col_index];\n    });\n}\n", "  let\
    \ row = [];\n  let row_index = 0;\n  let column_index = 0;\n  for(let i = 0; i\
    \ < lst.length; i++){\n    if(lst[i][0] === x){\n      row.push([row_index, column_index]);\n\
    \      row_index++;\n      column_index = 0;\n    }\n    else{\n      column_index++;\n\
    \    }\n  }\n  row.push([row_index, column_index]);\n  row.sort((a, b) => a[0]\
    \ - b[0]);\n  row.sort((a, b) => b[1] - a[1]);\n  return row;\n}\n", "    let\
    \ row = []\n    let col = []\n    let rows = []\n    let cols = []\n    let row_index\
    \ = 0\n    let col_index = 0\n    let row_length = 0\n    let col_length = 0\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n\
    \            row.push(i)\n            row_length++\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      col.push(i)\n            col_length++\n        }\n    }\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n        \
    \    rows.push([i, lst[i].indexOf(x)])\n        }\n    }\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n            cols.push([i,\
    \ lst[i].indexOf(x)])\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            row.push(i)\n            row_length++\n\
    \        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            col.push(i)\n            col_length++\n        }\n   \
    \ }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !==\
    \ -1){\n            rows.push([i, lst[i].indexOf(x)])\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      cols.push([i, lst[i].indexOf(x)])\n        }\n    }\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n            row.push(i)\n\
    \            row_length++\n        }\n    }\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            col.push(i)\n    \
    \        col_length++\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            rows.push([i, lst[i].indexOf(x)])\n\
    \        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            cols.push([i, lst[i].indexOf(x)])\n        }\n    }\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n\
    \            row.push(i)\n            row_length++\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      col.push(i)\n            col_length++\n        }\n    }\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) !== -1){\n        \
    \    rows.push([i, lst[i].indexOf(x)])\n", "  let result = [];\n  let row = [];\n\
    \  let col = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n\
    \  result.push([row, col]);\n  result.sort((a,b) => a[0] - b[0]);\n  result.sort((a,b)\
    \ => a[1] - b[1]);\n  return result;\n}\n", "    var result = [];\n    var row\
    \ = [];\n    var col = [];\n    var rows = [];\n    var cols = [];\n    var row_index\
    \ = 0;\n    var col_index = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i].indexOf(x) != -1){\n            result.push([row_index, col_index]);\n\
    \            result.push(lst[i]);\n            row_index++;\n            col_index\
    \ = 0;\n        }\n        else{\n            row.push(lst[i]);\n            col_index++;\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return b[1] - a[1];\n    });\n\
    \    result.forEach(function(item){\n        rows.push(item);\n        cols.push(col);\n\
    \    });\n    return rows;\n}\n", "    let row = []\n    let rows = []\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].includes(x)){\n            row.push(i)\n\
    \            rows.push(row)\n            row = []\n        }\n    }\n    return\
    \ rows\n}\n", "    var row = [];\n    var rows = [];\n    var cols = [];\n   \
    \ for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n        var rowLen\
    \ = row.length;\n        var colLen = rows[rowLen-1].length;\n        if(row[x]\
    \ === undefined){\n            row[x] = rowLen;\n            rows.push(row);\n\
    \            cols.push([x]);\n        }\n        else{\n            var index\
    \ = row[x];\n            var col = cols[index];\n            if(col[x] === undefined){\n\
    \                col[x] = colLen;\n                cols.push(col);\n         \
    \       rows.push(row.slice());\n            }\n            else{\n          \
    \      col[x] = colLen;\n                cols.push(col);\n                rows.push(row.slice());\n\
    \            }\n        }\n    }\n    return rows;\n}\n", "  let row = []\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(lst[i].includes(x)){\n      row.push([i,\
    \ lst[i].indexOf(x)])\n    }\n  }\n  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b)\
    \ => b[0] - a[0])\n  return row\n}\n", "    let res = [];\n    let row = [];\n\
    \    let col = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            row.push(i);\n            col.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    for(let i = 0; i < row.length; i++){\n        for(let j\
    \ = 0; j < col.length; j++){\n            res.push([row[i], col[j]]);\n      \
    \  }\n    }\n    res.sort((a, b) => b[1] - a[1]);\n    res.sort((a, b) => a[0]\
    \ - b[0]);\n    return res;\n}\n", "  var result = [];\n  var row = [];\n  var\
    \ col = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) !==\
    \ -1){\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n \
    \ if(row.length){\n    result.push([row, col]);\n  }\n  return result;\n}\n",
  "  var result = [];\n  for(var i=0; i<lst.length; i++){\n    var row = lst[i];\n\
    \    for(var j=0; j<row.length; j++){\n      if(row[j] == x){\n        result.push([i,\
    \ row.length-j-1]);\n      }\n    }\n  }\n  result.sort(function(a, b){\n    return\
    \ a[1] - b[1];\n  });\n  result.sort(function(a, b){\n    return b[0] - a[0];\n\
    \  });\n  return result;\n}\n", "    let row = [];\n    let row_index = 0;\n \
    \   let column_index = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            row.push([row_index, column_index]);\n            row_index++;\n\
    \            column_index = 0;\n        }\n        else{\n            column_index++;\n\
    \        }\n    }\n    return row;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var columns = [];\n  var row_index = 0;\n  var column_index = 0;\n  for(var\
    \ i=0; i<lst.length; i++){\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){\n      result.push([(row_index+1),\
    \ (column_index)]);\n      row_index++;\n      column_index = 0;\n    }\n    if(row_index\
    \ == x){\n      result.push([(row_index+1), (column_index)]);\n      row_index++;\n\
    \      column_index = 0;\n    }\n    if(row_index == x){", "  var row = []\n \
    \ for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push([i,\
    \ lst[i].indexOf(x)])\n    }\n  }\n  row.sort(function(a, b){\n    return b[1]\
    \ - a[1]\n  })\n  row.sort(function(a, b){\n    return a[0] - b[0]\n  })\n  return\
    \ row\n}\n", "    var result = [];\n    var row = [];\n    var col = [];\n   \
    \ var rows = [];\n    var cols = [];\n    var row_index = 0;\n    var col_index\
    \ = 0;\n    var row_length = 0;\n    var col_length = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) != -1){\n            result.push([row_index,\
    \ col_index]);\n            row.push(lst[i]);\n            row.sort(function(a,\
    \ b){return b-a});\n            row_length++;\n            row.sort(function(a,\
    \ b){return a-b});\n            row_length--;\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.sort(function(a, b){return b-a});\n            row_length--;\n\
    \            row.forEach(function(e, i){\n                col_index--;\n     \
    \           cols.push(e);\n            });\n            row.sort(function(a, b){return\
    \ a-b});\n            row_length--;\n            row.forEach(function(e, i){\n\
    \                col_index++;\n                cols.push(e);\n            });\n\
    \            row.forEach(function(e, i){\n                col_index--;\n     \
    \           cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(e);\n            });\n            row.forEach(function(e,\
    \ i){\n                col_index++;\n                cols.push(e);\n         \
    \   });\n            row.forEach(function(e, i){\n                col_index--;\n\
    \                cols.push(", "  var result = [];\n  var rows = lst.length;\n\
    \  var cols = lst[0].length;\n  for(var i=0; i<rows; i++){\n    var row = lst[i];\n\
    \    var row_x = row[x];\n    var row_y = row[cols-x];\n    result.push([row_x,\
    \ row_y]);\n  }\n  result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n\
    \  result.sort(function(a, b){\n    return b[1] - a[1];\n  });\n  return result;\n\
    }\n", "  var result = [];\n  var row = [];\n  var col = [];\n  var row_index =\
    \ 0;\n  var col_index = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i][0]\
    \ == x){\n      result.push([row_index, col_index]);\n      row_index++;\n   \
    \   col_index = 0;\n    }\n    else{\n      col_index++;\n    }\n  }\n  result.push([row_index,\
    \ col_index]);\n  return result;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var rows = [];\n  var cols = [];\n  var col = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i][0] == x){\n      result.push([i, lst[i][1]]);\n      row.push(lst[i][1]);\n\
    \      rows.push(row);\n      cols.push(col);\n      col = [];\n      row.push(0);\n\
    \    }else{\n      col.push(lst[i][1]);\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  for(var i=0; i<result.length; i++){\n    for(var j=0;\
    \ j<result[i].length; j++){\n      if(result[i][j] == 0){\n        result[i][j]\
    \ = 1;\n      }\n    }\n  }\n  for(var i=0; i<rows.length; i++){\n    rows[i].sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    });\n    rows[i].sort(function(a, b){\n\
    \      return a[1] - b[1];\n    });\n  }\n  for(var i=0; i<cols.length; i++){\n\
    \    cols[i].sort(function(a, b){\n      return b[0] - a[0];\n    });\n    cols[i].sort(function(a,\
    \ b){\n      return a[1] - b[1];\n    });\n  }\n  return result;\n}\n", "    let\
    \ row = [];\n    let row_index = 0;\n    let col_index = 0;\n    let row_len =\
    \ lst.length;\n    let col_len = lst[0].length;\n    for(let i = 0; i < row_len;\
    \ i++){\n        if(lst[i][col_index] === x){\n            row.push([i, col_index]);\n\
    \            row_index++;\n        }\n        if(row_index === col_len){\n   \
    \         row_index = 0;\n            col_index++;\n        }\n    }\n    row.sort((a,b)\
    \ => a[0] - b[0]);\n    row.sort((a,b) => b[1] - a[1]);\n    return row;\n}\n",
  "  let row = []\n  let row_index = 0\n  let row_len = 0\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i].includes(x)){\n      row.push([i, lst[i].indexOf(x)])\n\
    \      row_index += 1\n      row_len += 1\n    }\n  }\n  if(row_index === 0){\n\
    \    return []\n  }\n  if(row_index === 1){\n    return row\n  }\n  if(row_index\
    \ === 2){\n    return row.reverse()\n  }\n  if(row_index === 3){\n    return row.reverse().reverse()\n\
    \  }\n}\n", "  var row = [];\n  var col = [];\n  var count = 0;\n  for(var i=0;\
    \ i<lst.length; i++){\n    for(var j=0; j<lst[i].length; j++){\n      if(lst[i][j]\
    \ == x){\n        row.push([i, lst[i][j]]);\n        col.push([j, lst[i][j]]);\n\
    \        count++;\n      }\n    }\n  }\n  if(count == 0){\n    return [];\n  }\n\
    \  if(count == 1){\n    return row;\n  }\n  if(row.length == 1){\n    return [row[0]];\n\
    \  }\n  if(col.length == 1){\n    return [row[0], col[0]];\n  }\n  if(row.length\
    \ == col.length){\n    var temp = [];\n    for(var i=0; i<row.length; i++){\n\
    \      temp.push([row[i][0], col[i][0]]);\n    }\n    return temp;\n  }\n  if(row.length\
    \ < col.length){\n    var temp = [];\n    for(var i=0; i<row.length; i++){\n \
    \     temp.push([row[i][0], col[i][0]]);\n    }\n    return temp;\n  }\n  var\
    \ temp = [];\n  for(var i=0; i<row.length; i++){\n    temp.push([row[i][0], col[i][0]]);\n\
    \  }\n  temp.sort(function(a, b){\n    return a[1] - b[1];\n  });\n  temp.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  for(var i=0; i<temp.length; i++){\n \
    \   temp.push([temp[i][0], temp[i][1]]);\n  }\n  return temp;\n}\n", "    var\
    \ result = [];\n    var row = [];\n    var col = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            result.push([i, lst[i][1]]);\n\
    \        }\n        row.push(lst[i][0]);\n        col.push(lst[i][1]);\n    }\n\
    \    result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    row.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    col.sort(function(a, b){\n  \
    \      return b[1] - a[1];\n    });\n    for(var i = 0; i < result.length; i++){\n\
    \        result.push([row[i], col[i]]);\n    }\n    return result;\n}\n", "  \
    \  var res = [];\n    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n\
    \        var row_x = row.indexOf(x);\n        if(row_x === -1){\n            row_x\
    \ = row.indexOf(x+1);\n        }\n        if(row_x !== -1){\n            res.push([i,\
    \ row_x]);\n        }\n    }\n    res.sort(function(a, b){\n        var a_row\
    \ = a[0];\n        var b_row = b[0];\n        if(a_row > b_row){\n           \
    \ return 1;\n        }\n        if(a_row < b_row){\n            return -1;\n \
    \       }\n        return 0;\n    });\n    res.sort(function(a, b){\n        var\
    \ a_col = a[1];\n        var b_col = b[1];\n        if(a_col > b_col){\n     \
    \       return 1;\n        }\n        if(a_col < b_col){\n            return -1;\n\
    \        }\n        return 0;\n    });\n    return res;\n}\n", "    var result\
    \ = [];\n    var row = [];\n    var col = [];\n    var row_sorted = [];\n    var\
    \ col_sorted = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            row.push(lst[i]);\n            row_sorted.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            col.push(lst[i].indexOf(x));\n            col_sorted.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    col_sorted.sort(function(a, b){return b-a});\n    row_sorted.sort(function(a,\
    \ b){return b-a});\n    for(var i=0; i<row_sorted.length; i++){\n        result.push([row_sorted[i],\
    \ col_sorted[i]]);\n    }\n    return result;\n}\n", "  var result = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    var row = lst[i];\n    var rowLen = row.length;\n\
    \    for(var j=0; j<rowLen; j++){\n      if(row[j] === x){\n        result.push([i,\
    \ j]);\n        break;\n      }\n    }\n  }\n  result.sort(function(a, b){\n \
    \   return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return b[1]\
    \ - a[1];\n  });\n  return result;\n}\n", "    var result = [];\n    var row =\
    \ [];\n    var col = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            row.push(i);\n            col.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    result.push([row, col]);\n    result.sort(function(a, b){\n\
    \        var aRow = a[0];\n        var aCol = a[1];\n        var bRow = b[0];\n\
    \        var bCol = b[1];\n        if(aRow < bRow){\n            return -1;\n\
    \        }else if(aRow > bRow){\n            return 1;\n        }else if(aCol\
    \ < bCol){\n            return -1;\n        }else if(aCol > bCol){\n         \
    \   return 1;\n        }else{\n            return 0;\n        }\n    });\n   \
    \ result.sort(function(a, b){\n        var aRow = a[0];\n        var aCol = a[1];\n\
    \        var bRow = b[0];\n        var bCol = b[1];\n        if(aRow < bRow){\n\
    \            return -1;\n        }else if(aRow > bRow){\n            return 1;\n\
    \        }else if(aCol < bCol){\n            return -1;\n        }else if(aCol\
    \ > bCol){\n            return 1;\n        }else{\n            return 0;\n   \
    \     }\n    });\n    return result;\n}\n", "    if(lst.length == 0){\n      \
    \  return [];\n    }\n    let row = [];\n    let row_index = 0;\n    let col_index\
    \ = 0;\n    let row_length = 0;\n    let col_length = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].length == x){\n            row.push([i,\
    \ lst[i][0]]);\n            row_length++;\n        }\n        else{\n        \
    \    col_length++;\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].length != x){\n            row.push([i, lst[i][0]]);\n    \
    \        row_length++;\n        }\n        else{\n            col_length++;\n\
    \        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ != x){\n            row.push([i, lst[i][0]]);\n            row_length++;\n \
    \       }\n        else{\n            col_length++;\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].length != x){\n            row.push([i,\
    \ lst[i][0]]);\n            row_length++;\n        }\n        else{\n        \
    \    col_length++;\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].length != x){\n            row.push([i, lst[i][0]]);\n    \
    \        row_length++;\n        }\n        else{\n            col_length++;\n\
    \        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ != x){\n            row.push([i, lst[i][0]]);\n            row_length++;\n \
    \       }\n        else{\n            col_length++;\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].length != x){\n            row.push([i,\
    \ lst[i][0]]);\n            row_length++;\n        }\n        else{\n        \
    \    col_length++;\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].length != x){\n            row.push([i, lst[i][0]]);\n    \
    \        row_length++;\n        }\n        else{\n            col_length++;\n\
    \        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length\
    \ != x){\n            row.push([i, lst[i][0]]);\n            row_length++;\n \
    \       }\n        else{\n            col_length++;\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].length != x){\n            row.push([i,\
    \ lst[i][0]]);\n            row_length++;\n        }\n        else{\n        \
    \    col_length++;\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i].length != x){", "  var result = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    var row = lst[i];\n    for(var j=0; j<row.length; j++){\n      if(row[j]\
    \ == x){\n        result.push([i, row.length-j-1]);\n        break;\n      }\n\
    \    }\n  }\n  result.sort(function(a, b){\n    return a[1] - b[1];\n  });\n \
    \ result.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  return result;\n\
    }\n", "    var result = [];\n    for(var i = 0; i < lst.length; i++){\n      \
    \  var row = lst[i];\n        for(var j = 0; j < row.length; j++){\n         \
    \   if(row[j] == x){\n                result.push([i, row.length - 1 - j]);\n\
    \            }\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "    var row = [];\n    for(var\
    \ i=0; i<lst.length; i++){\n        var found = false;\n        for(var j=0; j<row.length;\
    \ j++){\n            if(row[j][0] === lst[i][0]){\n                found = true;\n\
    \                break;\n            }\n        }\n        if(!found){\n     \
    \       row.push([lst[i][0]]);\n        }\n    }\n    row.sort(function(a, b){\n\
    \        return a[0] - b[0];\n    });\n    row.sort(function(a, b){\n        return\
    \ b[1] - a[1];\n    });\n    var result = [];\n    for(var i=0; i<row.length;\
    \ i++){\n        if(row[i][0] === x){\n            result.push([row[i][0], row[i][1]]);\n\
    \        }\n    }\n    return result;\n}\n", "  var result = [];\n  var rows =\
    \ lst.length;\n  var cols = lst[0].length;\n  for(var row = 0; row < rows; row++){\n\
    \    var row_coords = [];\n    for(var col = 0; col < cols; col++){\n      if(lst[row][col]\
    \ == x){\n        row_coords.push([row, col]);\n      }\n    }\n    row_coords.sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    });\n    row_coords.reverse();\n    for(var\
    \ col = 0; col < cols; col++){\n      row_coords.sort(function(a, b){\n      \
    \  return b[1] - a[1];\n      });\n      row_coords.reverse();\n      result.push(row_coords);\n\
    \    }\n  }\n  return result;\n}\n", "  let result = [];\n  for(let i = 0; i <\
    \ lst.length; i++){\n    let row = lst[i];\n    let rowLen = row.length;\n   \
    \ for(let j = 0; j < rowLen; j++){\n      if(row[j] === x){\n        result.push([i,\
    \ j]); \n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a,\
    \ b) => b[1] - a[1]);\n  return result;\n}\n", "  var res = [];\n  var row = [];\n\
    \  var col = [];\n  for(var i=0; i<lst.length; i++){\n    row.push(lst[i][0]);\n\
    \    col.push(lst[i][1]);\n  }\n  for(var i=0; i<row.length; i++){\n    for(var\
    \ j=0; j<col.length; j++){\n      if(row[i] == x && col[j] == x){\n        res.push([i,\
    \ j, lst[i][j]]);\n      }\n    }\n  }\n  res.sort(function(a, b){\n    return\
    \ a[0] - b[0];\n  });\n  res.sort(function(a, b){\n    return a[1] - b[1];\n \
    \ });\n  return res;\n}\n", "  var result = [];\n  var row = [];\n  var col =\
    \ [];\n  var row_index = 0;\n  var col_index = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i][0] == x){\n      result.push([row_index, col_index]);\n\
    \      row_index++;\n      col_index = 0;\n    }\n    else{\n      col_index++;\n\
    \    }\n  }\n  result.sort(function(a, b){\n    return a[1] - b[1];\n  });\n \
    \ for(var i=0; i<result.length; i++){\n    row.push(result[i][0]);\n  }\n  row.sort(function(a,\
    \ b){\n    return b - a;\n  });\n  for(var i=0; i<row.length; i++){\n    result.push([row[i],\
    \ col[i]]);\n  }\n  return result;\n}\n", "    var result = [];\n    for(var i=0;\
    \ i<lst.length; i++){\n        var row = lst[i];\n        var found = false;\n\
    \        for(var j=0; j<row.length; j++){\n            if(row[j] == x){\n    \
    \            result.push([i, j]);\n                found = true;\n           \
    \     break;\n            }\n        }\n        if(!found){\n            result.push([i,\
    \ row.length]);\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "  let row = [];\n  let col = [];\n\
    \  let rows = [];\n  let cols = [];\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i].indexOf(x) !== -1){\n      row.push(i);\n      col.push(lst[i].indexOf(x));\n\
    \    }\n  }\n  for(let i = 0; i < row.length; i++){\n    rows.push(row.slice());\n\
    \    cols.push(col.slice());\n  }\n  rows = rows.sort((a, b) => b[1] - a[1]);\n\
    \  cols = cols.sort((a, b) => b[1] - a[1]);\n  for(let i = 0; i < rows.length;\
    \ i++){\n    for(let j = 0; j < cols.length; j++){\n      if(rows[i][0] === cols[j][0]){\n\
    \        rows[i][j] = rows[i][j].slice();\n      }\n    }\n  }\n  return rows;\n\
    }\n", "  let row = []\n  let row_index = 0\n  let col_index = 0\n  for(let i =\
    \ 0; i < lst.length; i++){\n    if(lst[i][0] == x){\n      row.push([row_index,\
    \ col_index])\n      row_index++\n      col_index = 0\n      continue\n    }\n\
    \    col_index++\n  }\n  row.push([row_index, col_index])\n  row.sort((a, b) =>\
    \ a[0] - b[0])\n  row.sort((a, b) => b[1] - a[1])\n  return row\n}\n", "    let\
    \ row = [];\n    let col = [];\n    let index = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            row.push(i);\n   \
    \         col.push(lst[i].indexOf(x));\n        }\n    }\n    row.sort((a, b)\
    \ => a - b);\n    col.sort((a, b) => b - a);\n    for(let i = 0; i < row.length;\
    \ i++){\n        for(let j = 0; j < col.length; j++){\n            if(row[i] ===\
    \ j){\n                let tuple = [row[i], col[j]];\n                let pos\
    \ = 0;\n                while(pos < lst.length){\n                    if(lst[pos].indexOf(x)\
    \ !== -1){\n                        tuple.push(pos);\n                       \
    \ break;\n                    }\n                    pos++;\n                }\n\
    \                return tuple;\n            }\n        }\n    }\n}\n", "  var\
    \ row = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) !==\
    \ -1){\n      row.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  row.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  row.sort(function(a, b){\n    return\
    \ a[0] - b[0];\n  });\n  return row;\n}\n", "  let result = [];\n  for(let i =\
    \ 0; i < lst.length; i++){\n    if(lst[i].indexOf(x) !== -1){\n      result.push([i,\
    \ lst[i].indexOf(x)]);\n    }\n  }\n  result.sort((a,b) => b[1] - a[1]);\n  result.sort((a,b)\
    \ => b[0] - a[0]);\n  return result;\n}\n", "    var result = [];\n    var row\
    \ = [];\n    var row_len = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            result.push([i, lst[i].indexOf(x)]);\n            row.push(lst[i]);\n\
    \            row_len++;\n        }\n    }\n    result.sort(function(a, b){\n \
    \       return a[1] - b[1];\n    });\n    result.sort(function(a, b){\n      \
    \  return b[0] - a[0];\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.",
  "    var result = [];\n    var row = [];\n    var row_len = 0;\n    var col_len\
    \ = 0;\n    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            result.push([i, lst[i].indexOf(x)])\n            row.push(lst[i]);\n\
    \            row_len++;\n        }\n    }\n    result.sort(function(a, b){\n \
    \       return a[1] - b[1];\n    });\n    row.sort(function(a, b){\n        return\
    \ b[1] - a[1];\n    });\n    for(var i = 0, len = row.length; i < len; i++){\n\
    \        for(var j = 0, len2 = row[i].length; j < len2; j++){\n            if(row[i][j]\
    \ == x){\n                result.push([i, j]);\n                col_len++;\n \
    \           }\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[0]\
    \ - a[0];\n    });\n    result.unshift([0, 0]);\n    result.unshift([row_len,\
    \ col_len]);\n    return result;\n}\n", "    var result = [];\n    var row = [];\n\
    \    var col = [];\n    var row_index = 0;\n    var col_index = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n       \
    \     result.push([row_index, col_index]);\n            row_index++;\n       \
    \     col_index = 0;\n        }\n        else{\n            col_index++;\n   \
    \     }\n    }\n    result.push([row_index, col_index]);\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a, b){\n\
    \        return b[1] - a[1];\n    });\n    return result;\n}\n", "    var result\
    \ = [];\n    var row = [];\n    var col = [];\n    var rows = [];\n    var cols\
    \ = [];\n    var row_index = 0;\n    var col_index = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            result.push([i, lst[i][1]]);\n\
    \            rows.push(row);\n            cols.push(col);\n            row = [];\n\
    \            col = [];\n            row_index = 0;\n            col_index = 0;\n\
    \        }\n        row.push(lst[i][0]);\n        col.push(lst[i][1]);\n    }\n\
    \    result.push([i, lst[i][1]]);\n    rows.push(row);\n    cols.push(col);\n\
    \    rows.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    cols.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    for(var i=0; i<rows.length; i++){\n\
    \        for(var j=0; j<cols.length; j++){\n            if(rows[i][0] == cols[j][0]){\n\
    \                result.push([rows[i][0], cols[j][1]]);\n            }\n     \
    \   }\n    }\n    return result;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var col = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i][0] == x){\n\
    \      row.push(i);\n      col.push(lst[i][1]);\n    }\n  }\n  result.push([row,\
    \ col]);\n  row = row.sort().reverse();\n  col = col.sort().reverse();\n  for(var\
    \ i=0; i<row.length; i++){\n    result.push([row[i], col[i]]);\n  }\n  return\
    \ result;\n}\n", "  let row = []\n  let rows = []\n  let columns = []\n  for(let\
    \ i = 0; i < lst.length; i++){\n    let index = lst[i].indexOf(x)\n    if(index\
    \ > -1){\n      row.push(i)\n      rows.push(i)\n      columns.push(x)\n    }\n\
    \  }\n  if(row.length == 0){\n    return []\n  }\n  if(row.length == 1){\n   \
    \ return [(x, columns.indexOf(row[0]))]\n  }\n  if(row.length == 2){\n    return\
    \ [(x, columns.indexOf(row[0])), (x, columns.indexOf(row[1]))]\n  }\n  if(row.length\
    \ == 3){\n    return [(x, columns.indexOf(row[0])), (x, columns.indexOf(row[1])),\
    \ (x, columns.indexOf(row[2]))]\n  }\n  if(row.length == 4){\n    return [(x,\
    \ columns.indexOf(row[0])), (x, columns.indexOf(row[1])), (x, columns.indexOf(row[2])),\
    \ (x, columns.indexOf(row[3]))]\n  }\n  if(row.length == 5){\n    return [(x,\
    \ columns.indexOf(row[0])), (x, columns.indexOf(row[1])), (x, columns.indexOf(row[2])),\
    \ (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4]))]\n  }\n  if(row.length\
    \ == 6){\n    return [(x, columns.indexOf(row[0])), (x, columns.indexOf(row[1])),\
    \ (x, columns.indexOf(row[2])), (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4])),\
    \ (x, columns.indexOf(row[5]))]\n  }\n  if(row.length == 7){\n    return [(x,\
    \ columns.indexOf(row[0])), (x, columns.indexOf(row[1])), (x, columns.indexOf(row[2])),\
    \ (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4])), (x, columns.indexOf(row[5])),\
    \ (x, columns.indexOf(row[6]))]\n  }\n  if(row.length == 8){\n    return [(x,\
    \ columns.indexOf(row[0])), (x, columns.indexOf(row[1])), (x, columns.indexOf(row[2])),\
    \ (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4])), (x, columns.indexOf(row[5])),\
    \ (x, columns.indexOf(row[6])), (x, columns.indexOf(row[7]))]\n  }\n  if(row.length\
    \ == 9){\n    return [(x, columns.indexOf(row[0])), (x, columns.indexOf(row[1])),\
    \ (x, columns.indexOf(row[2])), (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4])),\
    \ (x, columns.indexOf(row[5])), (x, columns.indexOf(row[6])), (x, columns.indexOf(row[7])),\
    \ (x, columns.indexOf(row[8]))]\n  }\n  if(row.length == 10){\n    return [(x,\
    \ columns.indexOf(row[0])), (x, columns.indexOf(row[1])), (x, columns.indexOf(row[2])),\
    \ (x, columns.indexOf(row[3])), (x, columns.indexOf(row[4])), (x, columns.indexOf(row[5])),\
    \ (x, columns.indexOf(row[6])), (x, columns.indexOf(row", "  var result = [];\n\
    \  var row = [];\n  var row_len = 0;\n  for(var i=0; i<lst.length; i++){\n   \
    \ if(lst[i].indexOf(x) != -1){\n      result.push([i, lst[i].indexOf(x)]);\n \
    \     row.push(lst[i]);\n      row_len++;\n    }\n  }\n  if(row_len == 0){\n \
    \   return result;\n  }\n  if(row_len == 1){\n    return [result[0]];\n  }\n \
    \ if(row_len == 2){\n    var result2 = get_row(row, 0);\n    var result3 = get_row(row,\
    \ 1);\n    var result4 = get_row(row, 2);\n    var result5 = get_row(row, 3);\n\
    \    var result6 = get_row(row, 4);\n    var result7 = get_row(row, 5);\n    var\
    \ result8 = get_row(row, 6);\n    var result9 = get_row(row, 7);\n    var result10\
    \ = get_row(row, 8);\n    var result11 = get_row(row, 9);\n    var result12 =\
    \ get_row(row, 10);\n    var result13 = get_row(row, 11);\n    var result14 =\
    \ get_row(row, 12);\n    var result15 = get_row(row, 13);\n    var result16 =\
    \ get_row(row, 14);\n    var result17 = get_row(row, 15);\n    var result18 =\
    \ get_row(row, 16);\n    var result19 = get_row(row, 17);\n    var result20 =\
    \ get_row(row, 18);\n    var result21 = get_row(row, 19);\n    var result22 =\
    \ get_row(row, 20);\n    var result23 = get_row(row, 21);\n    var result24 =\
    \ get_row(row, 22);\n    var result25 = get_row(row, 23);\n    var result26 =\
    \ get_row(row, 24);\n    var result27 = get_row(row, 25);\n    var result28 =\
    \ get_row(row, 26);\n    var result29 = get_row(row, 27);\n    var result30 =\
    \ get_row(row, 28);\n    var result31 = get_row(row, 29);\n    var result32 =\
    \ get_row(row, 30);\n    var result33 = get_row(row, 31);\n    var result34 =\
    \ get_row(row, 32);\n    var result35 = get_row(row, 33);\n    var result36 =\
    \ get_row(row, 34);\n    var result37 = get_row(row, 35);\n    var result38 =\
    \ get_row(row, 36);\n    var result39 = get_row(row, 37);\n    var result40 =\
    \ get_row(row, 38);\n    var result41 = get_row(row, 39);\n    var result42 =\
    \ get_row(row, 40);\n    var result43 = get_row(row, 41);\n    var result44 =\
    \ get_row(row, 42);\n    var result45 = get_row(row, 43);\n    var result46 =\
    \ get_row(row, 44);\n    var result47 = get_row(row, 45);\n    var result48 =\
    \ get_row(row, 46);\n    var result49 = get_row(row, 47);\n    var result50",
  "  let row = [];\n  let row_index = 0;\n  let column_index = 0;\n  for(let i = 0;\
    \ i < lst.length; i++){\n    if(row_index == x){\n      row.push([column_index,\
    \ i]);\n      column_index++;\n      row_index++;\n      if(column_index == lst[0].length){\n\
    \        column_index = 0;\n        row_index++;\n      }\n    }\n    else if(row_index\
    \ == x){\n      row.push([column_index, i]);\n      column_index++;\n    }\n \
    \ }\n  if(row_index != lst.length){\n    row.push([column_index, i]);\n  }\n \
    \ row.sort((a, b) => {\n    if(a[0] < b[0]) return -1;\n    if(a[0] > b[0]) return\
    \ 1;\n    return 0;\n  });\n  return row;\n}\n", "  let row = [];\n  let row_index\
    \ = 0;\n  let col_index = 0;\n  let row_len = lst.length;\n  let col_len = lst[0].length;\n\
    \  for(let i = 0; i < row_len; i++){\n    if(lst[i][0] == x){\n      row.push([row_index,\
    \ col_index]);\n      row_index++;\n      col_index = 0;\n    }\n    else{\n \
    \     col_index++;\n    }\n  }\n  return row;\n}\n", "    let row = []\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            row.push([i,\
    \ lst[i][1]])\n        }\n    }\n    row.sort((a, b) => b[1] - a[1])\n    row.sort((a,\
    \ b) => a[0] - b[0])\n    return row\n}\n", "  let row = [];\n  let row_index\
    \ = 0;\n  let col_index = 0;\n  let row_indexes = [];\n  let col_indexes = [];\n\
    \  for(let i = 0; i < lst.length; i++){\n    row_indexes.push(i);\n  }\n  row_indexes.sort((a,\
    \ b) => a - b);\n  for(let i = 0; i < row_indexes.length; i++){\n    let index\
    \ = row_indexes[i];\n    let row = lst[index];\n    for(let j = 0; j < row.length;\
    \ j++){\n      col_indexes.push(j);\n    }\n    col_indexes.sort((a, b) => b -\
    \ a);\n    for(let j = 0; j < col_indexes.length; j++){\n      let col = col_indexes[j];\n\
    \      if(col === x){\n        row.push([index, col]);\n      }\n    }\n  }\n\
    \  return row;\n}\n", "  let result = [];\n  let row = [];\n  let col = [];\n\
    \  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n  \
    \    row.push(i);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n  result.push([row,\
    \ col]);\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => a[1]\
    \ - b[1], (a, b) => b[0] - a[0]);\n  return result;\n}\n", "  if(lst.length ==\
    \ 0){\n    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n  }\n\
    \  var result = [];\n  var row = [];\n  var row_x = x;\n  for(var i=0; i<lst.length;\
    \ i++){\n    var item = lst[i];\n    row.push(item[x]);\n    if(item[x] == row_x){\n\
    \      result.push([i, x]);\n    }\n  }\n  result.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  result.sort(function(a, b){\n    return a[0] - b[0];\n\
    \  });\n  return result;\n}\n", "    var result = [];\n    var row = [];\n   \
    \ var row_len = 0;\n    for(var i = 0, len = lst.length; i < len; i++){\n    \
    \    if(lst[i].indexOf(x) != -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \            row.push(lst[i]);\n            row_len++;\n        }\n    }\n   \
    \ result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    result.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(item){\n\
    \        item.reverse();\n    });\n    result.forEach(function(item){\n      \
    \  item.reverse();\n    });\n    result.forEach(function(item){\n        item.reverse();\n\
    \    });\n    result.forEach(function(item){\n        item.reverse();\n    });\n\
    \    result.forEach(function(item){\n        item.reverse();\n    });\n    result.forEach(function(",
  "    var result = [];\n    var row = [];\n    var row_len = 0;\n    var col_len\
    \ = 0;\n    var row_sorted = [];\n    var col_sorted = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            row.push(lst[i]);\n\
    \            row_len++;\n        }\n    }\n    for(var i=0; i<row.length; i++){\n\
    \        row_sorted.push([i, row[i]]);\n    }\n    for(var i=0; i<row.length;\
    \ i++){\n        col_len = row[i].length;\n        col_sorted = [];\n        for(var\
    \ j=0; j<col_len; j++){\n            col_sorted.push([j, row[i][j]]);\n      \
    \  }\n        col_sorted.sort(function(a, b){\n            return b[1] - a[1];\n\
    \        });\n        for(var j=0; j<col_len; j++){\n            row_sorted.push([col_sorted[j][0],\
    \ col_sorted[j][1]]);\n        }\n    }\n    for(var i=0; i<row_sorted.length;\
    \ i++){\n        result.push([row_sorted[i][0], row_sorted[i][1]]);\n    }\n \
    \   result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    return\
    \ result;\n}\n", "    var res = [];\n    var row = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            row.push([i, lst[i][1]]);\n\
    \        }\n        else{\n            row.sort(function(a, b){\n            \
    \    return b[1] - a[1];\n            });\n            res.push([row.map(function(x){return\
    \ x[0];})]);\n            row = [];\n        }\n    }\n    res.push([row.map(function(x){return\
    \ x[0];})]);\n    return res;\n}\n", "  var result = [];\n  var row = [];\n  var\
    \ col = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n\
    \      row.push(i);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n  result.push([row,\
    \ col]);\n  result.sort(function(a, b){\n    return a[0][1] - b[0][1];\n  });\n\
    \  result.sort(function(a, b){\n    return b[1][0] - a[1][0];\n  });\n  return\
    \ result;\n}\n", "  var result = [];\n  var row = [];\n  var columns = [];\n \
    \ for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      row.push(lst[i]);\n\
    \      columns.push(columns.indexOf(lst[i].indexOf(x)));\n    }\n  }\n  result.push(row);\n\
    \  result.sort(function(a, b){\n    return b[0] - a[0];\n  });\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "  let row = [];\n\
    \  let row_index = 0;\n  let col_index = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] === x){\n      row.push([row_index, col_index]);\n    \
    \  row_index++;\n      col_index = 0;\n    }\n    else{\n      col_index++;\n\
    \    }\n  }\n  row.push([row_index, col_index]);\n  return row;\n}\n", "  let\
    \ row = []\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0] == x){\n\
    \      row.push([i, lst[i][1]])\n    }\n  }\n  row.sort((a,b) => a[0] - b[0])\n\
    \  row.sort((a,b) => b[1] - a[1])\n  return row\n}\n", "    var result = [];\n\
    \    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n        if(row[x]){\n\
    \            result.push([i, row[x]]);\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    result.sort(function(a, b){\n\
    \        return b[0] - a[0];\n    });\n    return result;\n}\n", "  var res =\
    \ [];\n  var row = [];\n  var col = [];\n  var rows = [];\n  var cols = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x) != -1){\n      res.push([i,\
    \ lst[i].indexOf(x)])\n    }\n  }\n  res.sort(function(a, b){\n    return b[1]\
    \ - a[1];\n  });\n  for(var i=0; i<res.length; i++){\n    row.push([i, res[i][1]]);\n\
    \    cols.push([i, res[i][1]]);\n  }\n  for(var i=0; i<res.length; i++){\n   \
    \ row.sort(function(a, b){\n      return b[0] - a[0];\n    });\n    cols.sort(function(a,\
    \ b){\n      return b[0] - a[0];\n    });\n    for(var j=0; j<row.length; j++){\n\
    \      if(row[j][1] != col[j][1]){\n        rows.push([row[j][0], col[j][1]]);\n\
    \        cols.push([row[j][0], col[j][1]]);\n      }\n    }\n  }\n  return rows;\n\
    }\n", "  var result = [];\n  var row = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i].indexOf(x) != -1){\n      row.push(i);\n    }\n  }\n  if(row.length\
    \ == 0){\n    return result;\n  }\n  row.sort(function(a, b){\n    return lst[b].length\
    \ - lst[a].length;\n  });\n  row.sort(function(a, b){\n    return lst[b].length\
    \ - lst[a].length;\n  });\n  for(var i=0; i<row.length; i++){\n    for(var j=0;\
    \ j<lst[row[i]].length; j++){\n      result.push([row[i], j]);\n    }\n  }\n \
    \ return result;\n}\n", "    let row = [];\n    let rows = [];\n    let cols =\
    \ [];\n    for(let i = 0; i < lst.length; i++){\n        let row = [];\n     \
    \   for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n\
    \                row.push([i, j]);\n                rows.push(row);\n        \
    \        cols.push([i, j]);\n            }\n        }\n    }\n    rows = rows.sort((a,b)\
    \ => a[0] - b[0]);\n    cols = cols.sort((a,b) => a[1] - b[1]);\n    let result\
    \ = [];\n    for(let i = 0; i < rows.length; i++){\n        let row = [];\n  \
    \      for(let j = 0; j < cols.length; j++){\n            row.push([rows[i][j][0]\
    \ + i, rows[i][j][1] + j]);\n        }\n        result.push(row);\n    }\n   \
    \ return result;\n}\n", "    let row = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            row.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    row.sort((a, b) => a[1] - b[1]);\n    row.sort((a, b) =>\
    \ b[0] - a[0]);\n    return row;\n}\n", "  let row = []\n  let row_sorted = []\n\
    \  let row_sorted_reverse = []\n  let row_reverse = []\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let row_x = lst[i]\n    for(let j = 0; j < row_x.length; j++){\n\
    \      if(row_x[j] == x){\n        row.push([i, j])\n      }\n    }\n  }\n  row.sort((a,b)\
    \ => a[0] - b[0])\n  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b) => b[0]\
    \ - a[0])\n  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b) => a[0] - b[0])\n\
    \  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b) => b[0] - a[0])\n  row.sort((a,b)\
    \ => a[1] - b[1])\n  row.sort((a,b) => a[0] - b[0])\n  row.sort((a,b) => b[1]\
    \ - a[1])\n  row.sort((a,b) => b[0] - a[0])\n  row.sort((a,b) => a[1] - b[1])\n\
    \  row.sort((a,b) => a[0] - b[0])\n  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b)\
    \ => b[0] - a[0])\n  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b) => a[0]\
    \ - b[0])\n  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b) => b[0] - a[0])\n\
    \  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b) => a[0] - b[0])\n  row.sort((a,b)\
    \ => b[1] - a[1])\n  row.sort((a,b) => b[0] - a[0])\n  row.sort((a,b) => a[1]\
    \ - b[1])\n  row.sort((a,b) => a[0] - b[0])\n  row.sort((a,b) => b[1] - a[1])\n\
    \  row.sort((a,b) => b[0] - a[0])\n  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b)\
    \ => a[0] - b[0])\n  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b) => b[0]\
    \ - a[0])\n  row.sort((a,b) => a[1] - b[1])\n  row.sort((a,b) => a[0] - b[0])\n\
    \  row.sort((a,b) => b[1] - a[1])\n  row.sort((a,b) => b[0] - a[0])\n  row.sort((a,b)\
    \ => a[1] - b[1])\n  row.sort((a,b) => a[0] - b[0])\n", "    var result = [];\n\
    \    for(var i=0; i<lst.length; i++){\n        var row = lst[i];\n        for(var\
    \ j=0; j<row.length; j++){\n            if(row[j] == x){\n                result.push([i,\
    \ row.length-j-1]);\n            }\n        }\n    }\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a, b){\n\
    \        return a[1] - b[1];\n    });\n    return result;\n}\n", "    let row\
    \ = [];\n    let row_index = 0;\n    let col_index = 0;\n    let row_length =\
    \ 0;\n    let col_length = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i].includes(x)){\n            row.push([row_index, col_index]);\n\
    \            row_index++;\n            row_length++;\n        }\n        else{\n\
    \            col_length++;\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n\
    \    row.sort((a, b) => b[1] - a[1]);\n    return row;\n}\n", "    var row = [];\n\
    \    for(var i=0; i<lst.length; i++){\n        var index = lst[i].indexOf(x);\n\
    \        if(index != -1){\n            row.push([i, index]);\n        }\n    }\n\
    \    row.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    row.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    return row;\n}\n", "    var row\
    \ = [];\n    var row_len = 0;\n    var col_len = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        row_len += lst[i].length;\n    }\n    for(var i=0; i<lst.length;\
    \ i++){\n        col_len += lst[i].length;\n    }\n    for(var i=0; i<lst.length;\
    \ i++){\n        for(var j=0; j<lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                row.push([i, j]);\n            }\n        }\n    }\n\
    \    row.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    row.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    return row;\n}\n", "    let result\
    \ = [];\n    let row = [];\n    let col = [];\n    let rows = [];\n    let cols\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            result.push([i, lst[i].indexOf(x)]);\n            row.push(lst[i]);\n\
    \            col.push(lst[i].indexOf(x));\n            rows.push(row);\n     \
    \       cols.push(col);\n            row = [];\n            col = [];\n      \
    \  }\n    }\n    result.sort((a, b) => {\n        if(a[0] < b[0]) return -1;\n\
    \        if(a[0] > b[0]) return 1;\n        return 0;\n    });\n    result.sort((a,\
    \ b) => {\n        if(a[1] < b[1]) return -1;\n        if(a[1] > b[1]) return\
    \ 1;\n        return 0;\n    });\n    return result.map(x => [x, cols.indexOf(x)]);\n\
    }\n", "  var result = [];\n  var row = [];\n  var col = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i].indexOf(x) != -1){\n      result.push([i, lst[i].indexOf(x)]);\n\
    \      row.push(lst[i]);\n      col.push(lst[i].indexOf(x));\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return a[1] - b[1];\n  });\n  row.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  col.sort(function(a, b){\n    return b[0] - a[0];\n \
    \ });\n  for(var i=0; i<row.length; i++){\n    result.push([i, col[i]]);\n  }\n\
    \  return result;\n}\n", "    var result = [];\n    var row = [];\n    var rows\
    \ = [];\n    var columns = [];\n    for(var i=0; i<lst.length; i++){\n       \
    \ if(lst[i].indexOf(x) != -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \            row.push(lst[i]);\n            rows.push(row);\n            columns.push(lst[i].indexOf(x));\n\
    \            row = [];\n        }\n    }\n    result.sort(function(a, b){\n  \
    \      return a[1] - b[1];\n    });\n    rows.sort(function(a, b){\n        return\
    \ b[columns.length] - a[columns.length];\n    });\n    return rows;\n}\n", " \
    \ var result = [];\n  var row = [];\n  var col = [];\n  var row_index = 0;\n \
    \ var col_index = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i][0] ==\
    \ x){\n      result.push([row_index, col_index]);\n      row_index++;\n      col_index\
    \ = 0;\n    }\n    else{\n      col_index++;\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  return result;\n}\n", "    let row = []\n    let col\
    \ = []\n    let count = 0\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            row.push([i, count])\n            count++\n        }\n \
    \   }\n    for(let i = 0; i < row.length; i++){\n        for(let j = 0; j < row.length;\
    \ j++){\n            if(row[i][1] > row[j][1]){\n                let temp = row[i][1]\n\
    \                row[i][1] = row[j][1]\n                row[j][1] = temp\n   \
    \         }\n        }\n    }\n    for(let i = 0; i < row.length; i++){\n    \
    \    for(let j = 0; j < row.length; j++){\n            if(row[i][1] < row[j][1]){\n\
    \                let temp = row[i][1]\n                row[i][1] = row[j][1]\n\
    \                row[j][1] = temp\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < row.length; i++){\n        for(let j = 0; j < row.length; j++){\n\
    \            row.push([row[i][0], row[j][1]])\n        }\n    }\n    return row\n\
    }\n", "    var row = [];\n    var row_length = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push([i, lst[i].indexOf(x)]);\n\
    \            row_length++;\n        }\n    }\n    row.sort(function(a, b){\n \
    \       return a[1] - b[1];\n    });\n    row.sort(function(a, b){\n        return\
    \ b[0] - a[0];\n    });\n    return row;\n}\n", "    var result = [];\n    for(var\
    \ i=0; i<lst.length; i++){\n        var row = lst[i];\n        for(var j=0; j<row.length;\
    \ j++){\n            if(row[j] == x){\n                result.push([i, j]); \n\
    \            }\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "  if(lst.length <= 0){\n    return\
    \ [];\n  }\n  let row = [];\n  let row_index = 0;\n  let column_index = 0;\n \
    \ for(let i = 0; i < lst.length; i++){\n    if(lst[i].includes(x)){\n      row.push([row_index,\
    \ column_index]);\n      row_index++;\n      column_index = 0;\n    }\n    else{\n\
    \      column_index++;\n    }\n  }\n  row.push([row_index, column_index]);\n \
    \ row.sort((a, b) => a[0] - b[0]);\n  row.sort((a, b) => a[1] - b[1]);\n  return\
    \ row;\n}\n", "    var result = [];\n    var row = [];\n    var col = [];\n  \
    \  var row_index = 0;\n    var col_index = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            result.push([row_index, col_index]);\n\
    \            row_index++;\n            col_index = 0;\n        }\n        else{\n\
    \            row.push(lst[i][0]);\n            col[col_index] = lst[i][1];\n \
    \           col_index++;\n        }\n    }\n    row.push(row_index);\n    col.push(col_index);\n\
    \    result.push([row_index, col_index]);\n    return result;\n}\n", "  var row\
    \ = [];\n  var row_index = 0;\n  var column_index = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i][0] == x){\n      row.push([row_index, column_index]);\n\
    \      row_index++;\n      column_index = 0;\n    }\n    else if(lst[i][0] ==\
    \ row_index){\n      column_index++;\n    }\n  }\n  return row;\n}\n", "  if(lst.length\
    \ == 0){\n    return [];\n  }\n  if(lst.length == 1){\n    return [(x, 0)];\n\
    \  }\n  let row = [(x, 0)];\n  let rows = [];\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let row = lst[i];\n    for(let j = 0; j < row.length; j++){\n   \
    \   if(row[j] == x){\n        rows.push([(i, j)]);\n      }\n    }\n  }\n  rows\
    \ = rows.sort((a, b) => b[1] - a[1]);\n  for(let i = 0; i < rows.length; i++){\n\
    \    row = rows[i];\n    row.sort((a, b) => b[0] - a[0]);\n  }\n  return rows;\n\
    }\n", "  var result = [];\n  var row = [];\n  var rows = [];\n  var cols = [];\n\
    \  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col\
    \ = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n\
    \  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols\
    \ = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n\
    \  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row\
    \ = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n\
    \  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows\
    \ = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n\
    \  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col\
    \ = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n\
    \  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols\
    \ = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n\
    \  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row\
    \ = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n\
    \  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows\
    \ = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n\
    \  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col\
    \ = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n\
    \  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols\
    \ = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n\
    \  var row = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row\
    \ = [];\n  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n\
    \  var rows = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows\
    \ = [];\n  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n\
    \  var col = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col\
    \ = [];\n  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n\
    \  var cols = [];\n  var row = [];\n  var rows = [];\n  var col = [];\n  var cols\
    \ = [];\n  var row = [];\n  var rows = [];\n", "    if(lst.length == 0){\n   \
    \     return [];\n    }\n    var row = [];\n    var rows = [];\n    var columns\
    \ = [];\n    var column = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            row.push(i);\n            rows.push(row);\n           \
    \ columns.push(column);\n            column++;\n        }\n    }\n    rows = rows.sort((a,\
    \ b) => b[1] - a[1]);\n    columns = columns.sort((a, b) => b[1] - a[1]);\n  \
    \  var result = [];\n    for(var i=0; i<rows.length; i++){\n        var row =\
    \ rows[i];\n        var column = columns[i];\n        for(var j=0; j<row.length;\
    \ j++){\n            result.push([row[j], column]);\n        }\n    }\n    return\
    \ result;\n}\n", "    var result = [];\n    var rows = lst.length;\n    var cols\
    \ = lst[0].length;\n    var row = 0;\n    var col = 0;\n    while(row < rows &&\
    \ col < cols){\n        if(lst[row][col] == x){\n            result.push([row,\
    \ col]);\n            row++;\n            col++;\n        }\n        else if(lst[row][col]\
    \ > x){\n            row++;\n        }\n        else{\n            col++;\n  \
    \      }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return b[1] - a[1];\n    });\n\
    \    return result;\n}\n", "  var result = [];\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(lst[i].indexOf(x) != -1){\n      result.push([i, lst[i].indexOf(x)]);\n\
    \    }\n  }\n  result.sort(function(a, b){\n    return b[1] - a[1];\n  });\n \
    \ result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  return result;\n\
    }\n", "    var result = [];\n    var row = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n    for(var i=0; i<result.length; i++){\n        row.push([i, result[i][1]]);\n\
    \    }\n    row.sort(function(a, b){\n        return a[1] - b[1];\n    });\n \
    \   for(var i=0; i<row.length; i++){\n        result.push([row[i][0], row[i][1]]);\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    let row = [];\n \
    \   let columns = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n            row.push(lst[i]);\n\
    \            columns.push(lst[i].indexOf(x));\n        }\n    }\n    result.sort((a,\
    \ b) => a[1] - b[1]);\n    result.sort((a, b) => b[1] - a[1]);\n    for(let i\
    \ = 0; i < result.length; i++){\n        result[i] = [result[i][0], row[i]];\n\
    \    }\n    result.sort((a, b) => b[1] - a[1]);\n    for(let i = 0; i < result.length;\
    \ i++){\n        result[i] = [result[i][0], columns[i]];\n    }\n    return result;\n\
    }\n", "  let row = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ !== -1){\n      row.push([i, lst[i].indexOf(x)]);\n    }\n  }\n  row.sort((a,\
    \ b) => b[1] - a[1]);\n  row.sort((a, b) => b[0] - a[0]);\n  return row;\n}\n",
  "    var result = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ != -1){\n            result.push([i, lst[i].indexOf(x)]);\n        }\n    }\n\
    \    result.sort(function(a, b){\n        return b[1] - a[1];\n    });\n    result.sort(function(a,\
    \ b){\n        return a[0] - b[0];\n    });\n    return result;\n}\n", "    let\
    \ row = [];\n    let row_index = 0;\n    let col_index = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i][0] == x){\n            row.push([row_index,\
    \ col_index]);\n            row_index++;\n            col_index = 0;\n       \
    \ }\n        else{\n            col_index++;\n        }\n    }\n    row.push([row_index,\
    \ col_index]);\n    return row;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var column = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i][0] == x){\n\
    \      row.push(i);\n      column.push(lst[i][1]);\n    }\n  }\n  result.push([row,\
    \ column]);\n  row.sort(function(a, b){\n    return b - a;\n  });\n  column.sort(function(a,\
    \ b){\n    return b - a;\n  });\n  for(var i=0; i<row.length; i++){\n    result.push([row[i],\
    \ column[i]]);\n  }\n  return result;\n}\n", "    var res = [];\n    var row =\
    \ [];\n    var col = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            row.push(i);\n            col.push(lst[i][1]);\n       \
    \ }\n    }\n    row.sort(function(a, b){\n        return b-a;\n    });\n    col.sort(function(a,\
    \ b){\n        return b-a;\n    });\n    for(var i=0; i<row.length; i++){\n  \
    \      res.push([row[i], col[i]]);\n    }\n    res.sort(function(a, b){\n    \
    \    return a[0] - b[0];\n    });\n    return res;\n}\n", "    let row = [];\n\
    \    let row_index = 0;\n    let col_index = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push([row_index,\
    \ col_index]);\n            row_index++;\n            col_index = 0;\n       \
    \ }\n        else{\n            col_index++;\n        }\n    }\n    row.push([row_index,\
    \ col_index]);\n    return row;\n}\n", "  var result = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    var row = lst[i];\n    for(var j=0; j<row.length; j++){\n      if(row[j]\
    \ == x){\n        result.push([i, j]); \n        break;\n      }\n    }\n  }\n\
    \  result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "  let row = []\n\
    \  let row_index = 0\n  let col_index = 0\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i].indexOf(x) != -1){\n      row.push([row_index, col_index])\n  \
    \    row_index++\n      col_index++\n    }\n  }\n  row.sort((a,b) => b[0] - a[0])\n\
    \  row.sort((a,b) => b[1] - a[1])\n  return row\n}\n", "    let row = [];\n  \
    \  for(let i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n       \
    \     row.push([i, lst[i][1]]);\n        }\n    }\n    row.sort((a, b) => a[0]\
    \ - b[0]);\n    row.sort((a, b) => b[1] - a[1]);\n    return row;\n}\n", "   \
    \ let result = [];\n    let row = [];\n    let col = [];\n    let row_index =\
    \ 0;\n    let col_index = 0;\n    for(let i = 0; i < lst.length; i++){\n     \
    \   if(lst[i].indexOf(x) != -1){\n            result.push([row_index, col_index]);\n\
    \            row_index++;\n            col_index = 0;\n        }\n        else{\n\
    \            col_index++;\n        }\n    }\n    result.push([row_index, col_index]);\n\
    \    result.sort((a, b) => a[0] - b[0]);\n    result.sort((a, b) => b[1] - a[1]);\n\
    \    return result;\n}\n", "    var result = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        var row = lst[i];\n        for(var j=0; j<row.length; j++){\n\
    \            if(row[j] === x){\n                result.push([i, row[j]]);\n  \
    \          }\n        }\n    }\n    result.sort(function(a, b){\n        return\
    \ a[0] - b[0];\n    });\n    result.sort(function(a, b){\n        return b[1]\
    \ - a[1];\n    });\n    return result;\n}\n", "  if(lst.length == 0){\n    return\
    \ [];\n  }\n  if(lst.length == 1){\n    return [[0, lst[0].length-1]];\n  }\n\
    \  let row = [];\n  let rows = [];\n  let cols = [];\n  let col = 0;\n  let row_index\
    \ = 0;\n  let col_index = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i][0]\
    \ == x){\n      row.push([i, lst[i].length-1]);\n      rows.push(row);\n     \
    \ col = [];\n      cols.push(col);\n      col_index = 0;\n      row_index = 0;\n\
    \    }\n    for(let j = 0; j < lst[i].length; j++){\n      if(j == col_index){\n\
    \        col.push(j);\n      }\n      if(j == row_index){\n        row.push([i,\
    \ j]);\n      }\n    }\n    col_index++;\n  }\n  rows = rows.sort((a, b) => a[0]\
    \ - b[0]);\n  cols = cols.sort((a, b) => b[1] - a[1]);\n  return rows.map(row\
    \ => cols.map(col => [row, col])).flat();\n}\n", "    var row = [];\n    var row_index\
    \ = 0;\n    var column_index = 0;\n    var row_length = 0;\n    var column_length\
    \ = 0;\n    var coordinates = [];\n    for(var i = 0, len = lst.length; i < len;\
    \ i++){\n        row_length += lst[i][0].length;\n        column_length += lst[i][1].length;\n\
    \    }\n    for(var i = 0, len = lst.length; i < len; i++){\n        for(var j\
    \ = 0, len2 = lst[i][0].length; j < len2; j++){\n            if(lst[i][0][j] ===\
    \ x){\n                coordinates.push([row_index, column_index]);\n        \
    \        row_index++;\n                column_index = 0;\n            }\n    \
    \        column_index += lst[i][1].length;\n        }\n    }\n    coordinates\
    \ = coordinates.sort(function(a, b){\n        return b[0] - a[0];\n    });\n \
    \   coordinates = coordinates.sort(function(a, b){\n        return b[1] - a[1];\n\
    \    });\n    for(var i = 0, len = coordinates.length; i < len; i++){\n      \
    \  row.push([coordinates[i][0], coordinates[i][1]]);\n    }\n    return row;\n\
    }\n", "  let row = [];\n  let row_len = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(lst[i].includes(x)){\n      row.push([i, lst[i].indexOf(x)]);\n      row_len++;\n\
    \    }\n  }\n  if(row_len === 0){\n    return [];\n  }\n  if(row_len === 1){\n\
    \    return [row[0]];\n  }\n  if(row_len > 1){\n    let row_sorted = [];\n   \
    \ for(let i = 0; i < row.length; i++){\n      row_sorted.push([row[i][0], row[i][1]]);\n\
    \    }\n    row_sorted.sort((a, b) => b[1] - a[1]);\n    row_sorted.sort((a, b)\
    \ => b[0] - a[0]);\n    return row_sorted;\n  }\n}\n", "    var result = [];\n\
    \    var row = [];\n    var columns = [];\n    var row_index = 0;\n    var column_index\
    \ = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i][0] == x){\n  \
    \          result.push([row_index, column_index]);\n            row_index++;\n\
    \            column_index = 0;\n        }\n        else{\n            column_index++;\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    result.sort(function(a, b){\n        return b[1] - a[1];\n    });\n\
    \    return result;\n}\n", "  var result = [];\n  var row = [];\n  var row_index\
    \ = 0;\n  var col_index = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i][0]\
    \ == x){\n      result.push([row_index, col_index]);\n      row_index++;\n   \
    \   col_index = 0;\n    }\n    else{\n      col_index++;\n    }\n  }\n  if(row_index\
    \ > 0){\n    result.push([row_index, col_index]);\n  }\n  return result;\n}\n",
  "    var result = [];\n    var row = [];\n    var column = [];\n    var row_index\
    \ = 0;\n    var column_index = 0;\n    var row_length = lst.length;\n    var column_length\
    \ = lst[0].length;\n    while(row_index < row_length){\n        while(column_index\
    \ < column_length){\n            if(lst[row_index][column_index] == x){\n    \
    \            result.push([row_index, column_index]);\n                column_index++;\n\
    \            }\n            else{\n                column_index++;\n         \
    \   }\n        }\n        column_index = 0;\n        row_index++;\n    }\n   \
    \ result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    result.sort(function(a,\
    \ b){\n        return a[1] - b[1];\n    });\n    return result;\n}\n", "    let\
    \ result = [];\n    let row = [];\n    let columns = [];\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].includes(x)){\n            row.push(i);\n\
    \            columns.push(lst[i].indexOf(x));\n        }\n    }\n    result.push([row,\
    \ columns]);\n    result.sort((a, b) => {\n        if(a[0] < b[0]) return -1;\n\
    \        if(a[0] > b[0]) return 1;\n        if(a[1] < b[1]) return -1;\n     \
    \   if(a[1] > b[1]) return 1;\n        return 0;\n    });\n    result.sort((a,\
    \ b) => {\n        if(a[1] < b[1]) return -1;\n        if(a[1] > b[1]) return\
    \ 1;\n        return 0;\n    });\n    return result;\n}\n", "  if(lst.length ==\
    \ 0){\n    return [];\n  }\n  let row = [];\n  let row_index = 0;\n  let row_length\
    \ = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i].length == x){\n\
    \      row.push([i, lst[i][0]]);\n      row_length++;\n    }\n  }\n  if(row_length\
    \ == 0){\n    return [];\n  }\n  if(row_length == 1){\n    return row;\n  }\n\
    \  if(row_length == x){\n    return row;\n  }\n  if(row_length > x){\n    let\
    \ row_sorted = row.sort((a, b) => {\n      return b[1] - a[1];\n    });\n    let\
    \ row_sorted_reversed = row_sorted.reverse();\n    let row_sorted_reversed_sorted\
    \ = row_sorted_reversed.sort((a, b) => {\n      return a[0] - b[0];\n    });\n\
    \    return row_sorted_reversed_sorted;\n  }\n  let row_sorted = row.sort((a,\
    \ b) => {\n    return a[1] - b[1];\n  });\n  let row_sorted_reversed = row_sorted.reverse();\n\
    \  let row_sorted_reversed_sorted = row_sorted_reversed.sort((a, b) => {\n   \
    \ return a[0] - b[0];\n  });\n  return row_sorted_reversed_sorted;\n}\n", "  let\
    \ row = [];\n  let row_index = 0;\n  let col_index = 0;\n  for(let i = 0; i <\
    \ lst.length; i++){\n    if(lst[i][0] === x){\n      row.push([i, col_index]);\n\
    \      col_index++;\n      if(col_index === lst[i][1]){\n        row_index++;\n\
    \        col_index = 0;\n      }\n    }\n  }\n  if(row_index === lst.length){\n\
    \    row.push([row_index, col_index]);\n  }\n  return row;\n}\n", "    let row\
    \ = [];\n    let row_index = 0;\n    let col_index = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i].indexOf(x) != -1){\n            row.push([row_index,\
    \ col_index]);\n            row_index++;\n        }\n        else{\n         \
    \   col_index++;\n        }\n    }\n    row.sort((a, b) => a[0] - b[0]);\n   \
    \ row.sort((a, b) => b[1] - a[1]);\n    return row;\n}\n", "    var result = [];\n\
    \    var rows = lst.length;\n    var columns = lst[0].length;\n    for(var row\
    \ = 0; row < rows; row++){\n        var row_result = [];\n        for(var col\
    \ = 0; col < columns; col++){\n            if(lst[row][col] == x){\n         \
    \       row_result.push([row, col]);\n            }\n        }\n        result.push(row_result);\n\
    \    }\n    result.sort(function(a, b){\n        var a_row = a[0];\n        var\
    \ b_row = b[0];\n        if(a_row < b_row){\n            return -1;\n        }\n\
    \        if(a_row > b_row){\n            return 1;\n        }\n        var a_col\
    \ = a[1];\n        var b_col = b[1];\n        if(a_col < b_col){\n           \
    \ return -1;\n        }\n        if(a_col > b_col){\n            return 1;\n \
    \       }\n        return 0;\n    });\n    result.sort(function(a, b){\n     \
    \   var a_row = a[0];\n        var b_row = b[0];\n        if(a_row < b_row){\n\
    \            return -1;\n        }\n        if(a_row > b_row){\n            return\
    \ 1;\n        }\n        var a_col = a[1];\n        var b_col = b[1];\n      \
    \  if(a_col < b_col){\n            return -1;\n        }\n        if(a_col > b_col){\n\
    \            return 1;\n        }\n        return 0;\n    });\n    return result;\n\
    }\n", "    var result = [];\n    var row = [];\n    var col = [];\n    var rows\
    \ = [];\n    var cols = [];\n    var row_index = 0;\n    var col_index = 0;\n\
    \    for(var i=0; i<lst.length; i++){\n        if(lst[i][0] == x){\n         \
    \   result.push([i, lst[i][1]]);\n            rows.push(row);\n            cols.push(col);\n\
    \            row = [];\n            col = [];\n            row_index = 0;\n  \
    \          col_index = 0;\n        }\n        else if(row_index < row.length){\n\
    \            row.push(lst[i][1]);\n            row_index++;\n        }\n     \
    \   else{\n            col.push(lst[i][1]);\n            col_index++;\n      \
    \  }\n    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n  \
    \  });\n    rows.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\
    \    cols.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    for(var\
    \ i=0; i<result.length; i++){\n        result.push([rows[i], cols[i]]);\n    }\n\
    \    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
