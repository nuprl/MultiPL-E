name: HumanEval_117_select_words
language: js
results:
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\twords.push(word);\n\t\ti += word.length;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp4booi82b.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4booi82b.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char == \" \"){\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile(index < s.length){\n\
    \t\t\tlet char = s.charAt(index);\n\t\t\tif(char == \" \"){\n\t\t\t\tindex++;\n\
    \t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tif(count >= n){\n\t\t\t\twords.push(s.substring(index,\
    \ index+count));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'y ha', 'd a ', 'ittl', 'le l', 'amb'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpldbv572b.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpldbv572b.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'y ha', 'd a ', 'ittl', 'le l', 'amb' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet char = s.charAt(i);\n\t\tif(char == \" \"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"e\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"o\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"u\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"h\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"d\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"n\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"m\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"p\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"l\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"b\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"r\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"c\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"o\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"u\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"h\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"d\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(char == \"n\"){\n\t\t\tcount++;\n\t\t}\n\t\telse\
    \ if(char == \"\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp45jw_qbg.js:124\n\t\telse if(char == \"\n\t\t                ^\n\
    \nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    while(i < s.length){\n\
    \        while(j < s.length && s[j] === s[i]){\n            j++;\n        }\n\
    \        if(j === s.length){\n            result.push(s.slice(i, i + n));\n  \
    \          i += n;\n        }\n        j = 0;\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet letter = s[i];\n\t\tif(letter === \" \"){\n\t\t\ti++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\tlet count = 0;\n\t\twhile(i < s.length && s[i] !== letter){\n\t\t\t\
    i++;\n\t\t\tcount++;\n\t\t}\n\t\tif(count === n){\n\t\t\tlist.push(letter);\n\t\
    \t}\n\t\ti++;\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpvm8pqr3d.js:40:10)\n    at Object.<anonymous> (/tmp/tmpvm8pqr3d.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tlet isConsonant = false;\n\t\
    \tfor(let i = 0; i < consonants.length; i++){\n\t\t\tif(char == consonants[i]){\n\
    \t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isConsonant){\n\
    \t\t\twords.push(char);\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(count\
    \ == n){\n\t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi9970bp5.js:19\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmpi9970bp5.js:19:22)\n    at test (/tmp/tmpi9970bp5.js:42:20)\n\
    \    at Object.<anonymous> (/tmp/tmpi9970bp5.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tif(s[index] === \" \"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse{\n\t\t\tcount++;\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(s.substring(index,\
    \ index+n));\n\t\t\tindex += n;\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had ', 'a li', 'ttle', 'lamb'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpn8cazdjj.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn8cazdjj.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'had ', 'a li', 'ttle', 'lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\twords.push(word);\n\t\ti += word.length;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpv4gtlv61.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv4gtlv61.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar arr = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tvar word = s.split(\"\
    \ \");\n\t\tfor(var j=0; j<word.length; j++){\n\t\t\tif(word[j].length == n){\n\
    \t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp8c0egaq_.js:30:10)\n    at Object.<anonymous> (/tmp/tmp8c0egaq_.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  if(s == \"\"){\n    return [];\n  }\n  let words = [];\n  let index =\
    \ 0;\n  while(index < s.length){\n    if(s.charAt(index) == \" \"){\n      index++;\n\
    \      continue;\n    }\n    let consonants = count_consonants(s.substr(index,\
    \ s.length));\n    if(consonants == n){\n      words.push(s.substr(index, s.length));\n\
    \    }\n    index++;\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfvw77l8g.js:23\n    let consonants = count_consonants(s.substr(index,\
    \ s.length));\n                     ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmpfvw77l8g.js:23:22)\n    at test (/tmp/tmpfvw77l8g.js:37:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfvw77l8g.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\tlet chars = s.split('');\n\
    \tfor(let i = 0; i < chars.length; i++){\n\t\tlet char = chars[i];\n\t\tif(char.match(/[aeiou]/)){\n\
    \t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(char);\n\t\t\tcount\
    \ = 0;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'i' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpm8bjjz0p.js:35:10)\n    at Object.<anonymous> (/tmp/tmpm8bjjz0p.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'i' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpu2ielbji.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2ielbji.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\
    \t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmphqlxh28n.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmphqlxh28n.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var result = [];\n  \n  if(s.length == 0){\n    return result;\n  }\n\
    \  \n  for(var i=0; i<s.length; i++){\n    var letter = s[i];\n    \n    if(letter\
    \ == \" \"){\n      continue;\n    }\n    \n    if(s.indexOf(letter) == n){\n\
    \      result.push(letter);\n    }\n  }\n  \n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp1bfpmd66.js:39:10)\n    at Object.<anonymous> (/tmp/tmp1bfpmd66.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar arr = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tvar word = s.substr(i,\
    \ n);\n\t\tif(word.length == n){\n\t\t\tarr.push(word);\n\t\t}\n\t}\n\treturn\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp7_43pkek.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7_43pkek.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\tlet last = 0;\n\
    \twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\tlet isConsonant\
    \ = isConsonant(char);\n\t\tif(isConsonant){\n\t\t\tcount++;\n\t\t\tif(count ==\
    \ n){\n\t\t\t\twords.push(s.substring(last, index));\n\t\t\t\tcount = 0;\n\t\t\
    \t\tlast = index;\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\tif(count > 0){\n\t\twords.push(s.substring(last,\
    \ index));\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4_xfgw58.js:19\n\t\tlet isConsonant = isConsonant(char);\n\t\t\
    \                  ^\n\nReferenceError: Cannot access 'isConsonant' before initialization\n\
    \    at select_words (/tmp/tmp4_xfgw58.js:19:21)\n    at test (/tmp/tmp4_xfgw58.js:41:20)\n\
    \    at Object.<anonymous> (/tmp/tmp4_xfgw58.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet vowels = \"aeiou\";\n\tlet consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n\tlet vowels_count = vowels.length;\n\tlet consonants_count = consonants.length;\n\
    \tlet vowels_index = -1;\n\tlet consonants_index = -1;\n\tlet vowels_found = false;\n\
    \tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_found = false;\n\tlet\
    \ vowels_found = false;\n\tlet consonants_found = false;\n\tlet vowels_found =\
    \ false;\n\tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet\
    \ consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_found = false;\n\tlet\
    \ vowels_found = false;\n\tlet consonants_found = false;\n\tlet vowels_found =\
    \ false;\n\tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet\
    \ consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_found = false;\n\tlet\
    \ vowels_found = false;\n\tlet consonants_found = false;\n\tlet vowels_found =\
    \ false;\n\tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet\
    \ consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_found = false;\n\tlet\
    \ vowels_found = false;\n\tlet consonants_found = false;\n\tlet vowels_found =\
    \ false;\n\tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet\
    \ consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_found = false;\n\tlet\
    \ vowels_found = false;\n\tlet consonants_found = false;\n\tlet vowels_found =\
    \ false;\n\tlet consonants_found = false;\n\tlet vowels_found = false;\n\tlet\
    \ consonants_found = false;\n\tlet vowels_found = false;\n\tlet consonants_found\
    \ = false;\n\tlet vowels_found = false;\n\tlet consonants_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwukxlygd.js:22\n\tlet vowels_found = false;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'vowels_found' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i=0; i<s.length; i++){\n        var word\
    \ = s.substr(i, n);\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmppufyqppb.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmppufyqppb.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tfor(var j=0;\
    \ j<n; j++){\n\t\t\tif(s.charAt(i) == \" \"){\n\t\t\t\tresult.push(s.substr(0,\
    \ i));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(s.charAt(i) == s.charAt(i+j)){\n\
    \t\t\t\tresult.push(s.substr(i, j));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '',\n  '',\n  '',\n  '',\n  'Mary',\n\
    \  '',\n  '',\n  '',\n  'Mary had',\n  '',\n  'Mary had a',\n  '',\n  '',\n  '',\n\
    \  '',\n  '',\n  '',\n  'Mary had a little',\n  '',\n  '',\n  '',\n  '' ]\n\n\
    should equal\n\n[ 'little' ]\n    at test (/tmp/tmpmn72ntq7.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmn72ntq7.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '',\
    \           '',\n    '',           '',\n    'Mary',       '',\n    '',       \
    \    '',\n    'Mary had',   '',\n    'Mary had a', '',\n    '',           '',\n\
    \    '',           '',\n    '',           'Mary had a little',\n    '',      \
    \     '',\n    '',           ''\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word\
    \ = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpto7uggms.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpto7uggms.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tlet isConsonant = false;\n\t\
    \tfor(let i = 0; i < consonants.length; i++){\n\t\t\tif(char === consonants[i]){\n\
    \t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isConsonant){\n\
    \t\t\twords.push(char);\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(count\
    \ === n){\n\t\treturn words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzu_kf4bj.js:19\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmpzu_kf4bj.js:19:22)\n    at test (/tmp/tmpzu_kf4bj.js:42:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzu_kf4bj.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    for(var i = 0; i<s.length; i++){\n        var word\
    \ = s.split(\"\").filter(function(letter){\n            return letter == s[i];\n\
    \        }).join(\"\");\n        if(word.length == n){\n            list.push(word);\n\
    \        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'aaaa', '    ', 'aaaa', '    ', 'aaaa',\
    \ '    ', '    ', 'aaaa' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp0qr4nsuu.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0qr4nsuu.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'aaaa', '    ',\n    'aaaa', '   \
    \ ',\n    'aaaa', '    ',\n    '    ', 'aaaa'\n  ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    var words = [];\n    var count = 0;\n    for(var\
    \ i = 0; i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,i));\n\
    \            count = 0;\n        }\n        else if(s.charAt(i) == \" \"){\n \
    \           words.push(s.substr(0,i));\n            count++;\n        }\n    \
    \    else if(s.charAt(i) == \".\"){\n            words.push(s.substr(0,i));\n\
    \            count++;\n        }\n        else if(s.charAt(i) == \" \"){\n   \
    \         words.push(s.substr(0,i));\n            count++;\n        }\n      \
    \  else if(s.charAt(i) == \".\"){\n            words.push(s.substr(0,i));\n  \
    \          count++;\n        }\n        else if(s.charAt(i) == \" \"){\n     \
    \       words.push(s.substr(0,i));\n            count++;\n        }\n        else\
    \ if(s.charAt(i) == \".\"){\n            words.push(s.substr(0,i));\n        \
    \    count++;\n        }\n        else if(s.charAt(i) == \" \"){\n           \
    \ words.push(s.substr(0,i));\n            count++;\n        }\n        else if(s.charAt(i)\
    \ == \".\"){\n            words.push(s.substr(0,i));\n            count++;\n \
    \       }\n        else if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,i));\n\
    \            count++;\n        }\n        else if(s.charAt(i) == \".\"){\n   \
    \         words.push(s.substr(0,i));\n            count++;\n        }\n      \
    \  else if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,i));\n  \
    \          count++;\n        }\n        else if(s.charAt(i) == \".\"){\n     \
    \       words.push(s.substr(0,i));\n            count++;\n        }\n        else\
    \ if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,i));\n        \
    \    count++;\n        }\n        else if(s.charAt(i) == \".\"){\n           \
    \ words.push(s.substr(0,i));\n            count++;\n        }\n        else if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0,i));\n            count++;\n \
    \       }\n        else if(s.charAt(i) == \".\"){\n            words.push(s.substr(0,i));\n\
    \            count++;\n        }\n        else if(s.charAt(i) == \" \"){\n   \
    \         words.push(s.substr(0,i));\n            count++;\n        }\n      \
    \  else if(s.charAt(i) == \".\"){\n            words.push(s.substr(0,i));\n  \
    \          count++;\n        }\n        else if(s.charAt(i) == \" \"){\n     \
    \       words.push(s.substr(0,i));\n            count++;\n        }\n        else\
    \ if(s.charAt(i\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzefzm7qm.js:97\n        else if(s.charAt(i\n                  \
    \       ^\n\nSyntaxError: missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substring(i));\n      i = s.length - 1;\n    }\n\
    \    for(var j = 0; j<s.length; j++){\n      if(s.charAt(j) == s.charAt(i) &&\
    \ s.charAt(j) != \" \"){\n        list.push(s.substring(i,j+1));\n        i =\
    \ j;\n      }\n    }\n  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'M', 'a', 'ary ha', 'ad a', 'a little\
    \ la', 'm', 'b' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp12qsf9ju.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp12qsf9ju.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a', 'ary ha', 'ad a', 'a little la',\
    \ 'm', 'b' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet c = s.charAt(i);\n\t\tif(c == \" \"){\n\t\t\ti++;\n\
    \t\t\tcontinue;\n\t\t}\n\t\tif(c == \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c ==\
    \ \"e\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"i\"){\n\t\t\tcount++;\n\t\t}\n\
    \t\tif(c == \"o\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"u\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(c == \"y\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"s\"){\n\t\t\t\
    count++;\n\t\t}\n\t\tif(c == \"t\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"h\"\
    ){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"l\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c\
    \ == \"d\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"n\"){\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(c == \"g\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"f\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(c == \"m\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"p\"){\n\t\t\t\
    count++;\n\t\t}\n\t\tif(c == \"b\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"v\"\
    ){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"k\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c\
    \ == \"j\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"q\"){\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(c == \"z\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"x\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(c == \"c\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"v\"){\n\t\t\t\
    count++;\n\t\t}\n\t\tif(c == \"b\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"n\"\
    ){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"m\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c\
    \ == \"p\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"f\"){\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(c == \"g\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"k\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(c == \"j\"){\n\t\t\tcount++;\n\t\t}\n\t\tif(c == \"z\"){\n\t\t\t\
    count\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyhwtbgm_.js:138\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet letter = s[i];\n\t\tlet count = 0;\n\t\tfor(let j = 0; j < n; j++){\n\t\
    \t\tif(letter == \" \"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(letter == s[j]){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(letter);\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp4bdj_6um.js:40:10)\n    at Object.<anonymous> (/tmp/tmp4bdj_6um.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tif(s.charAt(index) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count\
    \ == n){\n\t\t\tresult.push(s.substring(index, index+n));\n\t\t\tindex += n;\n\
    \t\t\tcount = 0;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' lam' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp17h19a46.js:35:10)\n    at Object.<anonymous> (/tmp/tmp17h19a46.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \")\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpylgxvlxr.js:106\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpv3su4zcv.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv3su4zcv.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ letter = s[i];\n        if(letter == \" \"){\n            words.push(\"\");\n\
    \        }\n        else{\n            for(let j = 0; j < n; j++){\n         \
    \       if(letter == consonants[j]){\n                    words.push(s.slice(0,i)\
    \ + s.slice(i+1));\n                    break;\n                }\n          \
    \  }\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5gkv8syh.js:21\n                if(letter == consonants[j]){\n\
    \                             ^\n\nReferenceError: consonants is not defined\n\
    \    at select_words (/tmp/tmp5gkv8syh.js:21:30)\n    at test (/tmp/tmp5gkv8syh.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5gkv8syh.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \").filter(w => w.includes(s[i]));\n        if(word.length\
    \ == n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Mary', 'had', 'a', 'lamb' ],\n  [ 'Mary',\
    \ 'had', 'a', 'lamb' ],\n  [ 'Mary', 'had', 'a', 'lamb' ],\n  [ 'Mary', 'had',\
    \ 'a', 'lamb' ] ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpb2el0lmu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb2el0lmu.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'Mary', 'had', 'a', 'lamb' ],\n\
    \    [ 'Mary', 'had', 'a', 'lamb' ],\n    [ 'Mary', 'had', 'a', 'lamb' ],\n  \
    \  [ 'Mary', 'had', 'a', 'lamb' ]\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i)\
    \ == \" \"){\n\t\t\tlist.push(s.substr(0, i));\n\t\t\ts = s.substr(i+1);\n\t\t\
    }\n\t\telse{\n\t\t\tfor(var j = 0; j<s.length; j++){\n\t\t\t\tif(s.charAt(j) ==\
    \ s.charAt(i)){\n\t\t\t\t\tlist.push(s.substr(0, j));\n\t\t\t\t\ts = s.substr(j+1);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(s.length != 0){\n\t\tlist.push(s);\n\
    \t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '', 'a', 'y ', '', 'd a ', 'ittle', 'lamb'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpssye46p4.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpssye46p4.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '', 'a', 'y ', '', 'd a ', 'ittle', 'lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    var count = 0;\n    var index = 0;\n    while(index\
    \ < s.length){\n        if(s.charAt(index) == \" \"){\n            count++;\n\
    \        }\n        if(count == n){\n            words.push(s.substring(index,\
    \ index+n));\n            count = 0;\n        }\n        index++;\n    }\n   \
    \ return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' lam' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpf5rgrk1k.js:34:10)\n    at Object.<anonymous> (/tmp/tmpf5rgrk1k.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let arr = [];\n  s = s.split(\" \");\n  for(let i = 0; i < s.length;\
    \ i++){\n    let count = 0;\n    for(let j = 0; j < s[i].length; j++){\n     \
    \ if(s[i].charAt(j) == \" \"){\n        count += 1;\n      }\n      if(s[i].charAt(j)\
    \ == \" \" && count > n){\n        break;\n      }\n    }\n    if(count === n){\n\
    \      arr.push(s[i]);\n    }\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpmkb255fy.js:37:10)\n    at Object.<anonymous> (/tmp/tmpmkb255fy.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\tlist.push(word);\n\t\ti += n;\n\t}\n\treturn list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpxzqtlldj.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxzqtlldj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i=0; i<s.length; i++){\n        var word\
    \ = s.substr(i, n);\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpn7tgzpgj.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn7tgzpgj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\tlet found = false;\n\t\tfor(let j = 0; j < words.length;\
    \ j++){\n\t\t\tif(words[j] === word){\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif(!found){\n\t\t\twords.push(word);\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb',\n  'amb',\n  'mb',\n  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at\
    \ test (/tmp/tmp750engtg.js:37:10)\n    at Object.<anonymous> (/tmp/tmp750engtg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h', 'y ha',\n\
    \    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a li', ' lit', 'litt',\n  \
    \  'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam', 'lamb', 'amb',\n    'mb',\
    \   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var arr = [];\n  \n  if(s.length == 0){\n    return arr;\n  }\n  \n \
    \ for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \"){\n      arr.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n    }\n  }\n  \n  for(var i = 0; i <= s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \"){\n      arr.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 2);\n    }\n  }\n  \n  for(var i = 0; i <= s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \" && s.charAt(i\
    \ + 2) == \" \"){\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 3);\n\
    \    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) == \" \" && s.charAt(i\
    \ + 3) == \" \"){\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 4);\n\
    \    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) == \" \" && s.charAt(i\
    \ + 3) == \" \" && s.charAt(i + 4) == \" \"){\n      arr.push(s.substr(0, i));\n\
    \      s = s.substr(i + 5);\n    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) ==\
    \ \" \" && s.charAt(i + 3) == \" \" && s.charAt(i + 4) == \" \" && s.charAt(i\
    \ + 5) == \" \"){\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 6);\n\
    \    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) == \" \" && s.charAt(i\
    \ + 3) == \" \" && s.charAt(i + 4) == \" \" && s.charAt(i + 5) == \" \" && s.charAt(i\
    \ + 6) == \" \"){\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 7);\n\
    \    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) == \" \" && s.charAt(i\
    \ + 3) == \" \" && s.charAt(i + 4) == \" \" && s.charAt(i + 5) == \" \" && s.charAt(i\
    \ + 6) == \" \" && s.charAt(i + 7) == \" \"){\n      arr.push(s.substr(0, i));\n\
    \      s = s.substr(i + 8);\n    }\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2ns2k02u.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \"){\n    \
    \  words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.length - i > n){\n      words.push(s.substr(0, i));\n      s =\
    \ s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  \n  return words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmph75ds9ms.js:43:10)\n    at Object.<anonymous> (/tmp/tmph75ds9ms.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'had' ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char === \" \"){\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(char === \"a\" || char === \"e\" || char === \"i\"\
    \ || char === \"o\" || char === \"u\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ === \"y\" || char === \"u\" || char === \"i\" || char === \"o\" || char ===\
    \ \"a\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"n\" || char === \"d\"\
    \ || char === \"r\" || char === \"l\" || char === \"m\" || char === \"n\" || char\
    \ === \"t\" || char === \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"\
    h\" || char === \"e\" || char === \"l\" || char === \"l\" || char === \"o\" ||\
    \ char === \"w\" || char === \"o\" || char === \"r\" || char === \"d\" || char\
    \ === \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"b\" || char === \"\
    e\" || char === \"l\" || char === \"l\" || char === \"o\" || char === \"w\" ||\
    \ char === \"o\" || char === \"r\" || char === \"d\" || char === \"s\" || char\
    \ === \"t\" || char === \"s\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(char === \"\
    c\" || char === \"e\" || char === \"l\" || char === \"l\" || char === \"o\" ||\
    \ char === \"w\" || char === \"o\" || char === \"r\" || char === \"d\" || char\
    \ === \"s\" || char === \"t\" || char === \"s\" || char === \"t\" || char ===\
    \ \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\"\
    \ || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char\
    \ === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char ===\
    \ \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\"\
    \ || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char\
    \ === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char ===\
    \ \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\"\
    \ || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char\
    \ === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char ===\
    \ \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\"\
    \ || char === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char\
    \ === \"t\" || char === \"t\" || char === \"t\" || char === \"t\" || char ===\
    \ \"t\" || char\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpknpjpm7m.js:37\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \");\n        for(let j = 0; j < word.length; j++){\n    \
    \        if(word[j].includes(n)){\n                result.push(word[j]);\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp3v4hk0l4.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3v4hk0l4.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet words = [];\n\tlet count = 0;\n\tlet index =\
    \ 0;\n\tlet temp = \"\";\n\tlet temp2 = \"\";\n\tlet temp3 = \"\";\n\tlet temp4\
    \ = \"\";\n\tlet temp5 = \"\";\n\tlet temp6 = \"\";\n\tlet temp7 = \"\";\n\tlet\
    \ temp8 = \"\";\n\tlet temp9 = \"\";\n\tlet temp10 = \"\";\n\tlet temp11 = \"\"\
    ;\n\tlet temp12 = \"\";\n\tlet temp13 = \"\";\n\tlet temp14 = \"\";\n\tlet temp15\
    \ = \"\";\n\tlet temp16 = \"\";\n\tlet temp17 = \"\";\n\tlet temp18 = \"\";\n\t\
    let temp19 = \"\";\n\tlet temp20 = \"\";\n\tlet temp21 = \"\";\n\tlet temp22 =\
    \ \"\";\n\tlet temp23 = \"\";\n\tlet temp24 = \"\";\n\tlet temp25 = \"\";\n\t\
    let temp26 = \"\";\n\tlet temp27 = \"\";\n\tlet temp28 = \"\";\n\tlet temp29 =\
    \ \"\";\n\tlet temp30 = \"\";\n\tlet temp31 = \"\";\n\tlet temp32 = \"\";\n\t\
    let temp33 = \"\";\n\tlet temp34 = \"\";\n\tlet temp35 = \"\";\n\tlet temp36 =\
    \ \"\";\n\tlet temp37 = \"\";\n\tlet temp38 = \"\";\n\tlet temp39 = \"\";\n\t\
    let temp40 = \"\";\n\tlet temp41 = \"\";\n\tlet temp42 = \"\";\n\tlet temp43 =\
    \ \"\";\n\tlet temp44 = \"\";\n\tlet temp45 = \"\";\n\tlet temp46 = \"\";\n\t\
    let temp47 = \"\";\n\tlet temp48 = \"\";\n\tlet temp49 = \"\";\n\tlet temp50 =\
    \ \"\";\n\tlet temp51 = \"\";\n\tlet temp52 = \"\";\n\tlet temp53 = \"\";\n\t\
    let temp54 = \"\";\n\tlet temp55 = \"\";\n\tlet temp56 = \"\";\n\tlet temp57 =\
    \ \"\";\n\tlet temp58 = \"\";\n\tlet temp59 = \"\";\n\tlet temp60 = \"\";\n\t\
    let temp61 = \"\";\n\tlet temp62 = \"\";\n\tlet temp63 = \"\";\n\tlet temp64 =\
    \ \"\";\n\tlet temp65 = \"\";\n\tlet temp66 = \"\";\n\tlet temp67 = \"\";\n\t\
    let temp68 = \"\";\n\tlet temp69 = \"\";\n\tlet temp70 = \"\";\n\tlet temp71 =\
    \ \"\";\n\tlet temp72 = \"\";\n\tlet temp73 = \"\";\n\tlet temp74 = \"\";\n\t\
    let temp75 = \"\";\n\tlet temp76 = \"\";\n\tlet temp77 = \"\";\n\tlet temp78 =\
    \ \"\";\n\tlet temp79 = \"\";\n\tlet temp\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpah0j88s3.js:96\n\tlet temp\n\t    ^\n\nSyntaxError: Identifier\
    \ 'temp' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    var count = 0;\n    for(var i=0; i<s.length; i++){\n\
    \        if(s.charAt(i) == \" \"){\n            count++;\n        }\n        if(count\
    \ == n){\n            words.push(s.substr(0, i));\n            count = 0;\n  \
    \      }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpmtpifhrp.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmtpifhrp.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let list = [];\n  if(s.length == 0){\n    return list;\n  }\n  for(let\
    \ i = 0; i < s.length; i++){\n    let count = 0;\n    for(let j = 0; j < s.length;\
    \ j++){\n      if(s[j] == s[i]){\n        count++;\n      }\n    }\n    if(count\
    \ == n){\n      list.push(s[i]);\n    }\n  }\n  return list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'a', ' ', 'a', ' ', 'a', ' ', ' ', 'a'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp3oq2tqoq.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3oq2tqoq.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'a', ' ', 'a',\n    ' ', 'a', ' ',\n\
    \    ' ', 'a'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\tresult.push(word);\n\
    \t\t\twords.push(word);\n\t\t\ti += n;\n\t\t}else{\n\t\t\ti++;\n\t\t}\n\t}\n\t\
    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpllsh_jqg.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpllsh_jqg.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char === \" \"){\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\tfor(let i = 0; i < s.length;\
    \ i++){\n\t\t\tlet char2 = s.charAt(i);\n\t\t\tif(char2 === char){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(s.substring(index));\n\t\
    \t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'ary had a little lamb',\n  'ad a little\
    \ lamb',\n  'a little lamb',\n  'amb' ]\n\nshould equal\n\n[ 'little' ]\n    at\
    \ test (/tmp/tmpohv19gtw.js:42:10)\n    at Object.<anonymous> (/tmp/tmpohv19gtw.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'ary had a little lamb',\n    'ad\
    \ a little lamb',\n    'a little lamb',\n    'amb'\n  ],\n  expected: [ 'little'\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char == \" \"){\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants = countConsonants(char);\n\
    \t\tif(consonants == n){\n\t\t\twords.push(s.substring(index, index+consonants));\n\
    \t\t\tindex += consonants;\n\t\t\tcount += consonants;\n\t\t}\n\t\tindex++;\n\t\
    }\n\tif(count != s.length){\n\t\twords.push(s.substring(index, s.length));\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmkchkm43.js:22\n\t\tlet consonants = countConsonants(char);\n\t\
    \t                 ^\n\nReferenceError: countConsonants is not defined\n    at\
    \ select_words (/tmp/tmpmkchkm43.js:22:20)\n    at test (/tmp/tmpmkchkm43.js:41:20)\n\
    \    at Object.<anonymous> (/tmp/tmpmkchkm43.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  \n  if(s.length == 0){\n    return list;\n  }\n  \n\
    \  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  if(s.length == 0){\n    return\
    \ list;\n  }\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \"\
    \ \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n\
    \  \n  if(s.length == 0){\n    return list;\n  }\n  \n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  \n  if(s.length == 0){\n    return list;\n\
    \  }\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n  \n\
    \  if(s.length == 0){\n    return list;\n  }\n  \n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  \n  if(s.length == 0){\n    return list;\n\
    \  }\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n  \n\
    \  if(s.length == 0){\n    return list;\n  }\n  \n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  \n  if(s.length == 0){\n    return list;\n\
    \  }\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n    }\n  }\n  \n\
    \  if(s.length == 0){\n    return list;\n  }\n  \n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n    }\n  }\n  \n  if(s.length == 0){\n    return list;\n\
    \  }\n  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvdfiu09i.js:120\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.substr(i,\
    \ n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpdfbk65k5.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdfbk65k5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(i, n));\n        }\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' had', ' a l', ' lit', ' lam' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpeyy5snkh.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeyy5snkh.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had',\
    \ ' a l', ' lit', ' lam' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  for(var i=0; i<s.length; i++){\n    var word = s.split(\"\
    \").filter(function(char){\n      return char == s[i];\n    });\n    if(word.length\
    \ == n){\n      words.push(word);\n    }\n  }\n  return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'a', 'a', 'a', 'a' ],\n  [ ' ', ' ',\
    \ ' ', ' ' ],\n  [ 'a', 'a', 'a', 'a' ],\n  [ ' ', ' ', ' ', ' ' ],\n  [ 'a',\
    \ 'a', 'a', 'a' ],\n  [ ' ', ' ', ' ', ' ' ],\n  [ ' ', ' ', ' ', ' ' ],\n  [\
    \ 'a', 'a', 'a', 'a' ] ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpk1sxtd4z.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1sxtd4z.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'a', 'a', 'a', 'a' ],\n    [ ' ',\
    \ ' ', ' ', ' ' ],\n    [ 'a', 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ', ' ' ],\n\
    \    [ 'a', 'a', 'a', 'a' ],\n    [ ' ', ' ', ' ', ' ' ],\n    [ ' ', ' ', ' ',\
    \ ' ' ],\n    [ 'a', 'a', 'a', 'a' ]\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i=0; i<s.length; i++){\n        var letter\
    \ = s[i];\n        if(letter == \" \"){\n            words.push(\"\");\n     \
    \   }\n        else if(letter == \"a\"){\n            words.push(\"a\");\n   \
    \     }\n        else if(letter == \"e\"){\n            words.push(\"e\");\n \
    \       }\n        else if(letter == \"i\"){\n            words.push(\"i\");\n\
    \        }\n        else if(letter == \"o\"){\n            words.push(\"o\");\n\
    \        }\n        else if(letter == \"u\"){\n            words.push(\"u\");\n\
    \        }\n        else if(letter == \"y\"){\n            words.push(\"y\");\n\
    \        }\n        else if(letter == \"h\"){\n            words.push(\"h\");\n\
    \        }\n        else if(letter == \"l\"){\n            words.push(\"l\");\n\
    \        }\n        else if(letter == \"s\"){\n            words.push(\"s\");\n\
    \        }\n        else if(letter == \"t\"){\n            words.push(\"t\");\n\
    \        }\n        else if(letter == \"r\"){\n            words.push(\"r\");\n\
    \        }\n        else if(letter == \"c\"){\n            words.push(\"c\");\n\
    \        }\n        else if(letter == \"m\"){\n            words.push(\"m\");\n\
    \        }\n        else if(letter == \"d\"){\n            words.push(\"d\");\n\
    \        }\n        else if(letter == \"n\"){\n            words.push(\"n\");\n\
    \        }\n        else if(letter == \"g\"){\n            words.push(\"g\");\n\
    \        }\n        else if(letter == \"f\"){\n            words.push(\"f\");\n\
    \        }\n        else if(letter == \"p\"){\n            words.push(\"p\");\n\
    \        }\n        else if(letter == \"v\"){\n            words.push(\"v\");\n\
    \        }\n        else if(letter == \"b\"){\n            words.push(\"b\");\n\
    \        }\n        else if(letter == \"k\"){\n            words.push(\"k\");\n\
    \        }\n        else if(letter == \"j\"){\n            words.push(\"j\");\n\
    \        }\n        else if(letter == \"q\"){\n            words.push(\"q\");\n\
    \        }\n        else if(letter == \"y\"){\n            words.push(\"y\");\n\
    \        }\n        else if(letter == \"x\"){\n            words.push(\"x\");\n\
    \        }\n        else if(letter == \"z\"){\n            words.push(\"z\");\n\
    \        }\n        else if(letter == \"w\"){\n            words.push(\"w\");\n\
    \        }\n        else if(letter == \"v\"){\n            words.push(\"v\");\n\
    \        }\n        else if(letter == \"u\"){\n            words.push(\"u\");\n\
    \        }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpca6d60lj.js:121\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\
    \t\t\n\t\tif(c == \" \"){\n\t\t\twords.push(s.substr(0, i));\n\t\t\ts = s.substr(i+1);\n\
    \t\t\t\n\t\t\tif(i+1 == s.length){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\
    for(var j=0; j<n; j++){\n\t\t\tif(c == consonants[j]){\n\t\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\t\n\t\t\t\tif(i+1 == s.length){\n\t\
    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8sel1z8r.js:28\n\t\t\tif(c == consonants[j]){\n\t\t\t        ^\n\
    \nReferenceError: consonants is not defined\n    at select_words (/tmp/tmp8sel1z8r.js:28:12)\n\
    \    at test (/tmp/tmp8sel1z8r.js:47:20)\n    at Object.<anonymous> (/tmp/tmp8sel1z8r.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants\
    \ = count_consonants(s.charAt(i));\n\t\tif(consonants == n){\n\t\t\twords.push(s.substring(i));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif(count == 0){\n\t\treturn\
    \ [];\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyp6vssoz.js:21\n\t\tlet consonants = count_consonants(s.charAt(i));\n\
    \t\t                 ^\n\nReferenceError: count_consonants is not defined\n  \
    \  at select_words (/tmp/tmpyp6vssoz.js:21:20)\n    at test (/tmp/tmpyp6vssoz.js:40:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyp6vssoz.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\twhile(index < s.length){\n\t\tlet\
    \ word = s.slice(index, index+n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t\tindex += n;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp48vrnv0g.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp48vrnv0g.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  s = s.split(\" \");\n  for(var i=0; i<s.length; i++){\n\
    \    if(s.indexOf(s[i]) >= 0){\n      if(s.indexOf(s[i]) == s.length-n && s.length-n\
    \ >= 0){\n        words.push(s[i]);\n      }\n    }\n  }\n  return words;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'had' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpfkbgqnrh.js:30:10)\n    at Object.<anonymous> (/tmp/tmpfkbgqnrh.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'had' ],\n  expected: [ 'little' ],\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\t\
    var n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\
    \tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\
    \tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\
    \tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\
    \tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\
    \tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\
    \tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\
    \tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\
    \tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\
    \tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\
    \tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\
    \tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\
    \tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\
    \tvar \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv0ynr_9b.js:172\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet vowels = \"aeiouAEIOU\";\n\tlet consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\tlet vowel_count = 0;\n\tlet consonant_count\
    \ = 0;\n\tlet vowel_found = false;\n\tlet consonant_found = false;\n\tlet vowel_positions\
    \ = [];\n\tlet consonant_positions = [];\n\tlet vowel_positions_string = \"\"\
    ;\n\tlet consonant_positions_string = \"\";\n\tlet vowel_positions_array = [];\n\
    \tlet consonant_positions_array = [];\n\tlet vowel_positions_array_string = \"\
    \";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\
    \ = \"\";\n\tlet consonant_positions_array_string = \"\";\n\tlet vowel_positions_array_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpldw7fah8.js:28\n\tlet vowel_positions_array_string = \"\";\n\t\
    \    ^\n\nSyntaxError: Identifier 'vowel_positions_array_string' has already been\
    \ declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tfor(var j=0;\
    \ j<n; j++){\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\tlist.push(s.substr(i,\
    \ 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9g9xjvf8.js:17\n\t\t\tif(s.charAt(i) == consonants[j]){\n\t\t\t\
    \                  ^\n\nReferenceError: consonants is not defined\n    at select_words\
    \ (/tmp/tmp9g9xjvf8.js:17:22)\n    at test (/tmp/tmp9g9xjvf8.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9g9xjvf8.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tif(s.charAt(i)\
    \ == \" \"){\n\t\t\twords.push(s.substr(0, i));\n\t\t\ts = s.substr(i+1);\n\t\t\
    \ti = s.length - 1;\n\t\t}\n\t\t\n\t\tfor(var j=0; j<n; j++){\n\t\t\tif(s.charAt(i)\
    \ == s.charAt(i+j)){\n\t\t\t\twords.push(s.substr(0, i+j));\n\t\t\t\ts = s.substr(i+j+1);\n\
    \t\t\t\ti = s.length - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpvogaq922.js:40:10)\n    at Object.<anonymous> (/tmp/tmpvogaq922.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \ }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length == 0){\n    return\
    \ list;\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    \ && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \    }\n  }\n  if(s.length == 0){\n    return list;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp58lnhyre.js:96\n    if(s.charAt(i) == \" \n                   \
    \   ^^\n\nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\tlist.push(word);\n\t\ti += n;\n\t}\n\treturn list;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpohk88v7c.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpohk88v7c.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(let i = 0; i < s.length; i++){\n    let word = s.substr(i, n);\n   \
    \ \n    if(words.includes(word)){\n      continue;\n    }\n    \n    words.push(word);\n\
    \  }\n  \n  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb',\n  'amb',\n  'mb',\n  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at\
    \ test (/tmp/tmp16ndj7hi.js:37:10)\n    at Object.<anonymous> (/tmp/tmp16ndj7hi.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h', 'y ha',\n\
    \    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a li', ' lit', 'litt',\n  \
    \  'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam', 'lamb', 'amb',\n    'mb',\
    \   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    \n    if (s == \"\"){\n        return words;\n\
    \    }\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    \n  \
    \  for (let i = 0; i < s.length; i++){\n        let word = s.split(\" \");\n \
    \       \n        for (let j = 0; j < word.length; j++){\n            let letter\
    \ = word[j].split(\"\");\n            \n            for (let k = 0; k < letter.length;\
    \ k++){\n                if (vowels.includes(letter[k])){\n                  \
    \  words.push(word[j]);\n                }\n            }\n        }\n    }\n\
    \    \n    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'had',\n  'a',\n  'little',\n\
    \  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'little',\n\
    \  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'little',\n  'lamb',\n\
    \  'Mary',\n  'had',\n  'a',\n  'little',\n  'little',\n  'lamb',\n  'Mary',\n\
    \  'had',\n  'a',\n  'little',\n  'little',\n  'lamb',\n  'Mary',\n  'had',\n\
    \  'a',\n  'little',\n  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n\
    \  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'little',\n\
    \  'lamb',\n  'Mary',\n  'had',\n  'a',\n  '...\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpyidzqzfn.js:43:10)\n    at Object.<anonymous> (/tmp/tmpyidzqzfn.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',   'had',    'a',      'little',\
    \ 'little', 'lamb',   'Mary',\n    'had',    'a',      'little', 'little', 'lamb',\
    \   'Mary',   'had',\n    'a',      'little', 'little', 'lamb',   'Mary',   'had',\
    \    'a',\n    'little', 'little', 'lamb',   'Mary',   'had',    'a',      'little',\n\
    \    'little', 'lamb',   'Mary',   'had',    'a',      'little', 'little',\n \
    \   'lamb',   'Mary',   'had',    'a',      'little', 'little', 'lamb',\n    'Mary',\
    \   'had',    'a',      'little', 'little', 'lamb',   'Mary',\n    'had',    'a',\
    \      'little', 'little', 'lamb',   'Mary',   'had',\n    'a',      'little',\
    \ 'little', 'lamb',   'Mary',   'had',    'a',\n    'little', 'little', 'lamb',\
    \   'Mary',   'had',    'a',      'little',\n    'little', 'lamb',   '"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n\
    \        }\n    }\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && words.length == n){\n            words.push(s.substr(0, i));\n \
    \           s = s.substr(i+1);\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmp_f3_dbqg.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_f3_dbqg.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\twords.push(word);\n\t\ti += word.length;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp64capa9t.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp64capa9t.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n    \n    if(s.charAt(i)\
    \ == \" \" && s.length != 0){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n\
    \      i = s.length-1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length ==\
    \ 0){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i =\
    \ s.length-1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length != 0 && s.charAt(i+1)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+2);\n  \
    \    i = s.length-1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length !=\
    \ 0 && s.charAt(i+1) == \" \" && s.length != 0){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n      i = s.length-1;\n    }\n    \n    if(s.charAt(i)\
    \ == \" \" && s.length != 0 && s.charAt(i+1) == \" \" && s.length == 0){\n   \
    \   words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length-1;\n\
    \    }\n    \n    if(s.charAt(i) == \" \" && s.length != 0 && s.charAt(i+1) ==\
    \ \" \" && s.length != 0 && s.charAt(i+2) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+3);\n      i = s.length-1;\n    }\n    \n    if(s.charAt(i)\
    \ == \" \" && s.length != 0 && s.charAt(i+1) == \" \" && s.length != 0 && s.charAt(i+2)\
    \ == \" \" && s.length != 0){\n      words.push(s.substr(0, i));\n      s = s.substr(i+3);\n\
    \      i = s.length-1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length !=\
    \ 0 && s.charAt(i+1) == \" \" && s.length != 0 && s.charAt(i+2) == \" \" && s.length\
    \ == 0){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i\
    \ = s.length-1;\n    }\n    \n    if(s.charAt(i) == \" \" && s.length != 0 &&\
    \ s.charAt(i+1) == \" \" && s.length != 0 && s.charAt(i+2) == \" \" && s.length\
    \ != 0 && s.charAt(i+3) == \" \"){\n      words.push(s.substr(0, i));\n      s\
    \ = s.substr(i+4);\n      i = s.length-1;\n    }\n    \n    if(s.charAt(i) ==\
    \ \" \" && s.length != 0 && s.charAt(i+1) == \" \" && s.length != 0 && s.charAt(i+2)\
    \ == \" \" && s.length\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_vwt759b.js:81\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet word = s.substr(i, n);\n\t\tif(words.indexOf(word) == -1){\n\t\t\twords.push(word);\n\
    \t\t}\n\t\ti++;\n\t}\n\tfor(let word of words){\n\t\tresult.push(word);\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb',\n  'amb',\n  'mb',\n  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at\
    \ test (/tmp/tmp4suua8u9.js:34:10)\n    at Object.<anonymous> (/tmp/tmp4suua8u9.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h', 'y ha',\n\
    \    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a li', ' lit', 'litt',\n  \
    \  'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam', 'lamb', 'amb',\n    'mb',\
    \   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \"){\n   \
    \   words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i != s.length){\n      words.push(s.substr(0, i));\n      s = s.substr(i\
    \ + 1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && i == s.length){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  \n\
    \  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i == s.length){\n      words.push(s.substr(0, i));\n      s = s.substr(i\
    \ + 1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && i != s.length){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  \n\
    \  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \" && i == s.length){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i != s.length){\n      words.push(s.substr(0, i));\n      s = s.substr(i\
    \ + 1);\n      i = s.length - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && i == s.length){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  \n\
    \  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i) == \" \" && i != s.length){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(var i = 0; i <= s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && i == s.length){\n      words.push(s.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_yj3dhav.js:102\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && words.length == n){\n            words.push(s.substr(0, i));\n \
    \           s = s.substr(i + 1);\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpvl2nu5vg.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvl2nu5vg.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar arr = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.split(\"\
    \ \");\n\t\tfor(var j = 0; j<word.length; j++){\n\t\t\tif(word[j].length == n){\n\
    \t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp61y2u7qd.js:30:10)\n    at Object.<anonymous> (/tmp/tmp61y2u7qd.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    \n    for(let i = 0; i < s.length; i++){\n  \
    \      let word = s.split(\" \");\n        for(let j = 0; j < word.length; j++){\n\
    \            if(word[j].includes(n)){\n                result.push(word[j]);\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp8qm335bk.js:32:10)\n    at Object.<anonymous> (/tmp/tmp8qm335bk.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            list.push(s.substr(0, i));\n            list.push(s.substr(i+1,\
    \ s.length-i-1));\n        }\n    }\n    return list.filter(function(word){\n\
    \        return word.split('').length == n;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'lamb' ]\n\nshould equal\n\n[\
    \ 'little' ]\n    at test (/tmp/tmpkajjkb05.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkajjkb05.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var arr = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      arr.push(s.substring(i));\n      i = s.length-1;\n    }\n\
    \    else if(s.charAt(i) == \"a\"){\n      arr.push(s.substring(i));\n      i\
    \ = s.length-1;\n    }\n    else if(s.charAt(i) == \"e\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"i\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"o\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"u\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"y\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"h\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"l\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"s\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"t\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"r\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"n\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"m\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"d\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"c\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"k\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"p\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"f\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"v\"){\n      arr.push(s.substring(i));\n\
    \      i = s.length-1;\n    }\n    else if(s.charAt(i) == \"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6n7hl41k.js:95\n    else if(s.charAt(i) == \"\n               \
    \            ^\n\nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\tlet temp = \"\"\
    ;\n\twhile(index < s.length){\n\t\ttemp = s.substring(index, index+n);\n\t\tif(temp.match(/[aeiou]/)){\n\
    \t\t\twords.push(temp);\n\t\t\tcount += 1;\n\t\t}\n\t\tindex += n;\n\t}\n\tif(count\
    \ === 0){\n\t\treturn [];\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpmatg98ul.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmatg98ul.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.substr(i,\
    \ n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp3n7wvr_w.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3n7wvr_w.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tif(s.charAt(i)\
    \ == \" \"){\n\t\t\tlist.push(s.substr(0, i));\n\t\t\ts = s.substr(i+1);\n\t\t\
    }\n\t\t\n\t\tfor(var j = 0; j<n; j++){\n\t\t\tif(s.charAt(i) == s.charAt(j)){\n\
    \t\t\t\tlist.push(s.substr(0, i));\n\t\t\t\ts = s.substr(i+1);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\tif(s.length != 0){\n\t\tlist.push(s);\n\t}\n\t\n\t\
    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '', 'a', 'y ', 'ad ', ' lit', 'le lamb'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpnxb87tdh.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnxb87tdh.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '', 'a', 'y ', 'ad ', ' lit', 'le lamb'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.substr(i, n);\n        if(word.length == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp5mz54fiu.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5mz54fiu.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \    i = s.length-1;\n    }\n  }\n  if(s.length == 0){\n    return words;\n  }\n\
    \  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \"\
    \ \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+2);\n      i =\
    \ s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \"\
    \ \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i =\
    \ s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \"\
    \ \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i =\
    \ s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0, i));\n  \
    \    s = s.substr(i+1);\n      i = s.length-1;\n    }\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6p52_5z0.js:105\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0,i));\n            s = s.substring(i+1);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpt6iy6gaj.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt6iy6gaj.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i+1);\n  \
    \  }\n  }\n  if(s.length == 0){\n    return words;\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && words.length == n){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpgc0qv2l5.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgc0qv2l5.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \"){\n    \
    \  words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i + 1) == \" \"){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i + 2);\n      i = s.length - 1;\n    }\n  }\n  \n  for(let\
    \ i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i + 1) ==\
    \ \" \" && s.charAt(i + 2) == \" \"){\n      words.push(s.substr(0, i));\n   \
    \   s = s.substr(i + 3);\n      i = s.length - 1;\n    }\n  }\n  \n  for(let i\
    \ = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i + 1) ==\
    \ \" \" && s.charAt(i + 2) == \" \" && s.charAt(i + 3) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 4);\n      i = s.length - 1;\n    }\n  }\n  \n\
    \  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i\
    \ + 1) == \" \" && s.charAt(i + 2) == \" \" && s.charAt(i + 3) == \" \" && s.charAt(i\
    \ + 4) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 5);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) ==\
    \ \" \" && s.charAt(i + 3) == \" \" && s.charAt(i + 4) == \" \" && s.charAt(i\
    \ + 5) == \" \"){\n      words.push(s.substr(0, i));\n      s = s.substr(i + 6);\n\
    \      i = s.length - 1;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i + 1) == \" \" && s.charAt(i + 2) ==\
    \ \" \" && s.charAt(i + 3) == \" \" && s.charAt(i + 4) == \" \" && s.charAt(i\
    \ + 5) == \" \" && s.charAt(i + 6) == \" \"){\n      words.push(s.substr(0, i));\n\
    \      s = s.substr(i + 7);\n      i = s.length - 1;\n    }\n  }\n  \n  for(let\
    \ i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i + 1) ==\
    \ \" \" && s.charAt(i + 2) == \" \" && s.charAt(i + 3) == \" \" && s.charAt(i\
    \ + 4) == \" \" && s.charAt(i + 5) == \" \" && \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaafal_i4.js:77\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \");\n        for(let j = 0; j < word.length; j++){\n    \
    \        if(word[j].includes(n)){\n                result.push(word[j]);\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpxt2d7dm0.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxt2d7dm0.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var arr = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      arr.push(s.substr(0, i));\n      s = s.substr(i+1);\n    \
    \  i = s.length-1;\n    }\n  }\n  if(s.length == 0){\n    return [];\n  }\n  for(var\
    \ i = 0; i<n; i++){\n    for(var j = 0; j<arr.length; j++){\n      if(arr[j].indexOf(s.charAt(i))\
    \ == -1){\n        arr.splice(j, 1);\n      }\n    }\n  }\n  return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpv3ov45xz.js:39:10)\n    at Object.<anonymous> (/tmp/tmpv3ov45xz.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    for(var i = 0; i<s.length; i++){\n    \
    \    var word = s.split(\" \");\n        for(var j = 0; j<word.length; j++){\n\
    \            if(word[j].length == n){\n                result.push(word[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpp881ubt3.js:31:10)\n    at Object.<anonymous> (/tmp/tmpp881ubt3.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i=0; i<s.length; i++){\n        var word\
    \ = s.split(\"\").filter(function(char){\n            return char == s[i] || char\
    \ == s[i-1];\n        });\n        if(word.length == n){\n            words.push(word.join(\"\
    \"));\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'lill', 'llel' ]\n\nshould equal\n\n[\
    \ 'little' ]\n    at test (/tmp/tmpz6x1xyz3.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz6x1xyz3.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lill',\
    \ 'llel' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    // Your code here\n    \n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpu202aej3.js:25:10)\n    at Object.<anonymous> (/tmp/tmpu202aej3.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  if(s.length == 0){\n    return [];\n  }\n  \n  var result = [];\n  var\
    \ count = 0;\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"\
    ){\n      count++;\n      if(count == n){\n        result.push(s.substr(0, i));\n\
    \      }\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpxa2fytcj.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxa2fytcj.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    var word = \"\";\n    for(var i = 0; i<s.length;\
    \ i++){\n        word = s[i];\n        for(var j = 0; j<word.length; j++){\n \
    \           if(word.charAt(j) == \" \"){\n                list.push(word);\n \
    \               word = \"\";\n                break;\n            }\n        \
    \    else if(word.charAt(j) == \".\" || word.charAt(j) == \",\" || word.charAt(j)\
    \ == \"?\" || word.charAt(j) == \"!\" || word.charAt(j) == \"?\" || word.charAt(j)\
    \ == \"!\"){\n                break;\n            }\n            else if(word.charAt(j)\
    \ == n){\n                list.push(word);\n                word = \"\";\n   \
    \             break;\n            }\n        }\n    }\n    return list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' ', ' ', ' ', ' ' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmptudojf8h.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptudojf8h.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' ', ' ',\
    \ ' ', ' ' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.substr(i,\
    \ n);\n\t\tif(word.length == n){\n\t\t\tlist.push(word);\n\t\t}\n\t}\n\treturn\
    \ list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmplysythki.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmplysythki.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \").filter(w => w.split(\"\").filter(c => c === s[i]).length\
    \ === n);\n        if(word.length){\n            words.push(word[0]);\n      \
    \  }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpcf2zfn46.js:28:10)\n    at Object.<anonymous> (/tmp/tmpcf2zfn46.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tlet isConsonant = isConsonant(char);\n\
    \t\tif(!isConsonant){\n\t\t\twords.push(char);\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\
    \t\tif(count === n){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj3qkov8v.js:18\n\t\tlet isConsonant = isConsonant(char);\n\t\t\
    \                  ^\n\nReferenceError: Cannot access 'isConsonant' before initialization\n\
    \    at select_words (/tmp/tmpj3qkov8v.js:18:21)\n    at test (/tmp/tmpj3qkov8v.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmpj3qkov8v.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  \n \
    \ for(let i = 0; i < s.length; i++){\n    let letter = s[i];\n    \n    if(consonants.indexOf(letter)\
    \ == -1){\n      words.push(letter);\n    }\n  }\n  \n  if(words.length == n){\n\
    \    return words;\n  }\n  \n  return select_words(words.join(\"\"), n);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpej0npp19.js:33\n  return select_words(words.join(\"\"), n);\n \
    \                           ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.join (<anonymous>)\n    at select_words (/tmp/tmpej0npp19.js:33:29)\n\
    \    at select_words (/tmp/tmpej0npp19.js:33:10)\n    at select_words (/tmp/tmpej0npp19.js:33:10)\n\
    \    at select_words (/tmp/tmpej0npp19.js:33:10)\n    at select_words (/tmp/tmpej0npp19.js:33:10)\n\
    \    at select_words (/tmp/tmpej0npp19.js:33:10)\n    at select_words (/tmp/tmpej0npp19.js:33:10)\n\
    \    at select_words (/tmp/tmpej0npp19.js:33:10)\n    at select_words (/tmp/tmpej0npp19.js:33:10)\n"
  exit_code: 1
  status: Exception
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tfor(var\
    \ j = 0; j<s.length; j++){\n\t\t\tif(s[i] == s[j]){\n\t\t\t\twords.push(s.slice(i,\
    \ j+1));\n\t\t\t\ti = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\"){\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \" \" && count == n){\n\t\t\t\
    words.push(s.slice(0,i));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpa34je9ld.js:35:10)\n    at Object.<anonymous> (/tmp/tmpa34je9ld.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s.substr(i,\
    \ s.length);\n        }\n    }\n    for(let i = 0; i < s.length; i++){\n     \
    \   if(s.charAt(i) == \" \"){\n            words.push(s.substr(0, i));\n     \
    \       s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i < s.length;\
    \ i++){\n        if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n       \
    \     words.push(s.substr(0, i));\n            s.substr(i, s.length);\n      \
    \  }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) != \" \"){\n            words.push(s.substr(0, i));\n\
    \            s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n\
    \            words.push(s.substr(0, i));\n            s.substr(i, s.length);\n\
    \        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n            words.push(s.substr(0, i));\n\
    \            s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n\
    \            words.push(s.substr(0, i));\n            s.substr(i, s.length);\n\
    \        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n            words.push(s.substr(0, i));\n\
    \            s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \            words.push(s.substr(0, i));\n            s.substr(i, s.length);\n\
    \        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n            words.push(s.substr(0, i));\n\
    \            s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \            words.push(s.substr(0, i));\n            s.substr(i, s.length);\n\
    \        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n            words.push(s.substr(0, i));\n\
    \            s.substr(i, s.length);\n        }\n    }\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqvtbdyjl.js:88\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  var index = 0;\n  var count = 0;\n  var last;\n  while(index\
    \ < s.length){\n    last = s.charAt(index);\n    if(last == \" \"){\n      count++;\n\
    \    }\n    if(count == n){\n      words.push(s.substring(index, index+count));\n\
    \      index = index+count;\n      count = 0;\n    }\n    index++;\n  }\n  return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' lam' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpwn_mmknt.js:37:10)\n    at Object.<anonymous> (/tmp/tmpwn_mmknt.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet word = s.substr(i, n);\n\t\tlet index = words.indexOf(word);\n\t\tif(index\
    \ == -1){\n\t\t\twords.push(word);\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb',\n  'amb',\n  'mb',\n  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at\
    \ test (/tmp/tmpmzfylrxl.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmzfylrxl.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h', 'y ha',\n\
    \    ' had', 'had ', 'ad a', 'd a ',\n    ' a l', 'a li', ' lit', 'litt',\n  \
    \  'ittl', 'ttle', 'tle ', 'le l',\n    'e la', ' lam', 'lamb', 'amb',\n    'mb',\
    \   'b'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tif(s.charAt(index) == \" \"){\n\t\t\tindex++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\twhile(count < n && s.charAt(index) == s.charAt(index + count)){\n\t\
    \t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substring(index,\
    \ index + count));\n\t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}\n\t\tindex++;\n\
    \t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp2sxk9r5l.js:39:10)\n    at Object.<anonymous> (/tmp/tmp2sxk9r5l.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tvar word =\
    \ s.substr(i, n);\n\t\t\n\t\tif(word.length == n){\n\t\t\tlist.push(word);\n\t\
    \t}\n\t}\n\t\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp2q1z7epk.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2q1z7epk.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n    }\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \" && words.length == n){\n            words.push(s.substr(0, i));\n \
    \           s = s.substr(i + 1);\n        }\n    }\n    return words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpmtjw4019.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmtjw4019.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.substr(i, n);\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpq6cj4sa_.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq6cj4sa_.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar arr = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.split(\"\
    \ \");\n\t\tfor(var j = 0; j<word.length; j++){\n\t\t\tif(word[j].indexOf(n) !=\
    \ -1){\n\t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp74_tygr5.js:30:10)\n    at Object.<anonymous> (/tmp/tmp74_tygr5.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \".\" || s.charAt(i) == \",\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    :\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\"){\n\
    \t\t\tcount--;\n\t\t}\n\t\telse if(count == n){\n\t\t\twords.push(s.substr(0,\
    \ i));\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little ',\n  'Mary had a little\
    \ l',\n  'Mary had a little la',\n  'Mary had a little lam' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpswjylygh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpswjylygh.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary\
    \ had a little ',\n    'Mary had a little l',\n    'Mary had a little la',\n \
    \   'Mary had a little lam'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n   \
    \ }\n    if(s.charAt(i) == \" \" && s.length == n){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  if(s.length != 0){\n    list.push(s);\n\
    \  }\n  return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little', 'lamb' ]\n\n\
    should equal\n\n[ 'little' ]\n    at test (/tmp/tmpp8800dfk.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp8800dfk.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet res = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet c = s.charAt(i);\n\t\tif(c == \" \"){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c ==\
    \ \"u\" || c == \"y\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(count >= n){\n\t\t\
    \tres.push(s.substring(last, i));\n\t\t\tlast = i;\n\t\t\tcount = 0;\n\t\t}\n\t\
    \ti++;\n\t}\n\tif(last < s.length){\n\t\tres.push(s.substring(last, i));\n\t}\n\
    \treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary ha', 'd a li', 'ttle lamb' ]\n\n\
    should equal\n\n[ 'little' ]\n    at test (/tmp/tmpkwvk4vqv.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkwvk4vqv.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary ha',\
    \ 'd a li', 'ttle lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n        else if(s.charAt(i) == \".\" || s.charAt(i) == \"\
    ,\" || s.charAt(i) == \";\" || s.charAt(i) == \"?\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \"?\" || s.charAt(i) == \"!\"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n        else if(s.charAt(i)\
    \ == n){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmp8juae34b.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8juae34b.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char == \" \"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"a\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"i\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"o\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"u\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"\
    ){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"\
    ){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"\
    ){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"\
    ){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkg1_15r5.js:145\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpj3f7oijy.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj3f7oijy.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \");\n        for(let j = 0; j < word.length; j++){\n    \
    \        if(word[j].includes(n)){\n                result.push(word[j]);\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpnratd_zr.js:30:10)\n    at Object.<anonymous> (/tmp/tmpnratd_zr.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    let index = 0;\n    while(index < s.length){\n\
    \        let word = s.slice(index, index+n);\n        if(word.length == n){\n\
    \            words.push(word);\n        }\n        index += n;\n    }\n    return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpmrbicvlm.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrbicvlm.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    \n    if (s.length == 0){\n        return words;\n\
    \    }\n    \n    var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    var vowels = \"aeiou\";\n    \n    var letters = s.replace(/[^\\w\\s]/gi,\
    \ \"\").split(\" \");\n    \n    for (var i = 0; i < letters.length; i++){\n \
    \       var letter = letters[i];\n        \n        if (consonants.indexOf(letter)\
    \ == -1){\n            if (vowels.indexOf(letter) == -1){\n                words.push(letter);\n\
    \            }\n        }\n    }\n    \n    return words.filter(function(word){\n\
    \        return word.length == n;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'lamb' ]\n\nshould equal\n\n[\
    \ 'little' ]\n    at test (/tmp/tmpry4k94j0.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpry4k94j0.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet res = [];\n\tlet count = 0;\n\tlet word = \"\";\n\tfor(let i = 0;\
    \ i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tif(count < n){\n\t\
    \t\t\tword += s.charAt(i);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres.push(word);\n\
    \t\t\t\tcount = 0;\n\t\t\t\tword = \"\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tword\
    \ += s.charAt(i);\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(word != \"\"){\n\t\tres.push(word);\n\
    \t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'had a', 'little', 'lamb' ]\n\n\
    should equal\n\n[ 'little' ]\n    at test (/tmp/tmp_0h2lwdq.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_0h2lwdq.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little', 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    var count = 0;\n    for(var i = 0; i<s.length;\
    \ i++){\n        if(s.charAt(i) == \" \"){\n            count++;\n        }\n\
    \        if(count == n){\n            words.push(s.slice(0,i));\n            count\
    \ = 0;\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpyrtb8amk.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyrtb8amk.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tfor(var j=0;\
    \ j<s.length; j++){\n\t\t\tif(s[i] == s[j]){\n\t\t\t\tif(j+1 == s.length){\n\t\
    \t\t\t\tresult.push(s.slice(i, j+1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'b' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpsom1k_hj.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsom1k_hj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'b' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    for(var i = 0; i<s.length; i++){\n    \
    \    var word = s.substr(i, n);\n        if(word.length == n){\n            result.push(word);\n\
    \        }\n    }\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpc3zanf91.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc3zanf91.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet letter = s[index];\n\t\tif(letter == \" \"){\n\t\t\twords.push(s.slice(index,\
    \ index+count));\n\t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}else{\n\t\t\t\
    count++;\n\t\t}\n\t\tif(count == n){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp4doakkmw.js:37:10)\n    at Object.<anonymous> (/tmp/tmp4doakkmw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet index = 0;\n\tlet word = \"\";\n\tlet count =\
    \ 0;\n\twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char\
    \ == \" \"){\n\t\t\tresult.push(word);\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\
    \t\tcount++;\n\t\t}\n\t\telse if(char == \"a\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\tword = \"\";\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\tword = \"\"\
    ;\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"o\"){\n\t\t\t\
    word = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"u\"\
    ){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"y\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"s\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if(char == \"t\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"h\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"d\"){\n\t\t\tword = \"\";\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"e\"){\n\t\t\tword = \"\"\
    ;\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\t\
    word = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"a\"\
    ){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char\
    \ == \"m\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(char == \"e\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\t\
    \t}\n\t\telse if(char == \"r\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(char == \"y\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\t\t\t\
    count++;\n\t\t}\n\t\telse if(char == \"s\"){\n\t\t\tword = \"\";\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(char == \"t\"){\n\t\t\tword = \"\";\n\t\t\t\
    index++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"h\"){\n\t\t\tword = \"\"\
    ;\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2jpssgqb.js:144\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tlet vowels = \"aeiouAEIOU\";\n\tlet vowel_consonants = \"AEIOUaeiou\";\n\t\
    let vowel_consonant_pairs = \"AEIOUaeiou\";\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count\
    \ = vowel_consonant_pairs.length;\n\tlet vowel_consonant_pairs_count = vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph3swdjvz.js:19\n\tlet vowel_consonant_pairs_count = vowel_consonant_pairs.length;\n\
    \t    ^\n\nSyntaxError: Identifier 'vowel_consonant_pairs_count' has already been\
    \ declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n\tlet vowels = \"aeiouAEIOU\";\n\tlet vowel_consonants = \"AEIOUaeiou\";\n\t\
    let vowel_consonant_consonants = \"AEIOUaeiouAEIOU\";\n\tlet vowel_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiou\";\n\tlet vowel_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmperdu0y1n.js:26\n\tlet vowel_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonant_consonants\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae\n\t          \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nSyntaxError: Invalid or unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    let count = 0;\n    for(let i = 0; i < s.length;\
    \ i++){\n        if(s.charAt(i) == \" \"){\n            count++;\n        }\n\
    \        if(count == n){\n            words.push(s.substr(0, i));\n          \
    \  count = 0;\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpbw4hja87.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbw4hja87.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet index = 0;\n\
    \twhile(index < s.length){\n\t\tlet char = s.charAt(index);\n\t\tlet isConsonant\
    \ = false;\n\t\tfor(let i = 0; i < consonants.length; i++){\n\t\t\tif(char ===\
    \ consonants[i]){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif(isConsonant){\n\t\t\tcount++;\n\t\t\tif(count === n){\n\t\t\t\tresult.push(s.substring(last,\
    \ index));\n\t\t\t\tlast = index+1;\n\t\t\t}\n\t\t}\n\t\tindex++;\n\t}\n\tif(last\
    \ < s.length){\n\t\tresult.push(s.substring(last, s.length));\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp52zsry4s.js:20\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmp52zsry4s.js:20:22)\n    at test (/tmp/tmp52zsry4s.js:46:20)\n\
    \    at Object.<anonymous> (/tmp/tmp52zsry4s.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    let count = 0;\n    for(let i = 0; i < s.length;\
    \ i++){\n        if(s.charAt(i) == \" \"){\n            count++;\n        }\n\
    \        if(count == n){\n            words.push(s.substr(0, i));\n          \
    \  count = 0;\n        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpdsr83u75.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdsr83u75.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet index = 0;\n\twhile(index < s.length){\n\t\t\
    let word = s.substring(index, index+n);\n\t\tif(word.length == n){\n\t\t\tresult.push(word);\n\
    \t\t\tindex += n;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp91qslzgr.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp91qslzgr.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar letter =\
    \ s[i];\n\t\tfor(var j = 0; j<n; j++){\n\t\t\tif(letter == \" \"){\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\telse if(letter == \"a\"){\n\t\t\t\tletter = \"an\";\n\t\t\t}\n\t\
    \t\telse if(letter == \"e\"){\n\t\t\t\tletter = \"en\";\n\t\t\t}\n\t\t\telse if(letter\
    \ == \"i\"){\n\t\t\t\tletter = \"in\";\n\t\t\t}\n\t\t\telse if(letter == \"o\"\
    ){\n\t\t\t\tletter = \"on\";\n\t\t\t}\n\t\t\telse if(letter == \"u\"){\n\t\t\t\
    \tletter = \"a\";\n\t\t\t}\n\t\t\telse if(letter == \"y\"){\n\t\t\t\tletter =\
    \ \"y\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tletter = \"a\";\n\t\t\t}\n\t\t}\n\t\t\
    words.push(letter);\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'an',\n  'a',\n  'an',\n  'y',\n  ' ',\n\
    \  'an',\n  'a',\n  'an',\n  ' ',\n  'a',\n  ' ',\n  'an',\n  'a',\n  'an',\n\
    \  'an',\n  'an',\n  'a',\n  ' ',\n  'an',\n  'a',\n  'an',\n  'an' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmp3crofcbs.js:52:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3crofcbs.js:61:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'an',\
    \ 'a',  'an', 'y',  ' ',\n    'an', 'a',  'an', ' ',  'a',\n    ' ',  'an', 'a',\
    \  'an', 'an',\n    'an', 'a',  ' ',  'an', 'a',\n    'an', 'an'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let list = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \");\n        for(let j = 0; j < word.length; j++){\n    \
    \        if(word[j].includes(n)){\n                list.push(word[j]);\n     \
    \       }\n        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp14tawuak.js:30:10)\n    at Object.<anonymous> (/tmp/tmp14tawuak.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\t\n\tfor(var i=0; i<s.length; i++){\n\t\tvar word\
    \ = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp07gua69b.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp07gua69b.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(let i = 0; i < s.length; i++){\n    let letter = s[i];\n    let count\
    \ = 0;\n    \n    for(let j = 0; j < letter.length; j++){\n      if(letter[j]\
    \ === \"a\"){\n        count++;\n      }\n    }\n    \n    if(count == n){\n \
    \     words.push(letter);\n    }\n  }\n  \n  return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpth5cw7b4.js:42:10)\n    at Object.<anonymous> (/tmp/tmpth5cw7b4.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var result = [];\n  \n  if(s.length == 0){\n    return result;\n  }\n\
    \  \n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(var i=0; i<s.length;\
    \ i++){\n    if(vowels.indexOf(s[i]) == -1){\n      result.push(s[i]);\n    }\n\
    \  }\n  \n  if(result.length == n){\n    return result;\n  }\n  \n  if(result.length\
    \ < n){\n    return select_words(s.substr(0, s.length-1), n);\n  }\n  \n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'M',\n  'r',\n  'y',\n  ' ',\n  'h',\n\
    \  'd',\n  ' ',\n  ' ',\n  'l',\n  't',\n  't',\n  'l',\n  ' ',\n  'l',\n  'm',\n\
    \  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp99sp8jgv.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp99sp8jgv.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'M', 'r', 'y', ' ',\n    'h', 'd',\
    \ ' ', ' ',\n    'l', 't', 't', 'l',\n    ' ', 'l', 'm', 'b'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.split(\"\
    \ \");\n\t\tfor(var j = 0; j<word.length; j++){\n\t\t\tif(word[j].length == n){\n\
    \t\t\t\twords.push(word[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp1k3541k0.js:30:10)\n    at Object.<anonymous> (/tmp/tmp1k3541k0.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tvar count = 0;\n\tfor(var i = 0; i<s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tif(count\
    \ == n){\n\t\t\t\twords.push(s.substr(0, i));\n\t\t\t}\n\t\t\tcount = 0;\n\t\t\
    }\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmp9m9a2oi7.js:34:10)\n    at Object.<anonymous> (/tmp/tmp9m9a2oi7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    let index = 0;\n    let count = 0;\n    while(index\
    \ < s.length){\n        if(s.charAt(index) == \" \"){\n            count++;\n\
    \        }\n        if(count == n){\n            words.push(s.substring(index,\
    \ index+n));\n            count = 1;\n        }\n        index++;\n    }\n   \
    \ return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' lam' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp72gn1wdd.js:34:10)\n    at Object.<anonymous> (/tmp/tmp72gn1wdd.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' lam' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.substr(i, n);\n        if(word.length == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpx0rmniuq.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx0rmniuq.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  \n  if(s == \"\"){\n    return words;\n  }\n  \n \
    \ for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+2);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n    }\n  }\n  \n  for(var i=0; i<s.length; i++){\n\
    \    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpujej3uir.js:114\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet consonants = \"bcdfghjklmnpqrstvwxyz\";\n\tlet\
    \ vowels = \"aeiou\";\n\tlet consonants_count = consonants.length;\n\tlet vowels_count\
    \ = vowels.length;\n\tlet vowels_count_in_string = 0;\n\tlet consonants_count_in_string\
    \ = 0;\n\tlet vowels_count_in_word = 0;\n\tlet consonants_count_in_word = 0;\n\
    \tlet vowels_count_in_word_in_string = 0;\n\tlet consonants_count_in_word_in_string\
    \ = 0;\n\tlet vowels_count_in_word_in_word = 0;\n\tlet consonants_count_in_word_in_word\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_string = 0;\n\tlet consonants_count_in_word_in_word_in_string\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word = 0;\n\tlet consonants_count_in_word_in_word_in_word\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_string = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_string\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_word\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word_in_string = 0;\n\t\
    let consonants_count_in_word_in_word_in_word_in_word_in_string = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word_in_word\
    \ = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_word_in_word = 0;\n\t\
    let vowels_count_in_word_in_word_in_word_in_word_in_word_in_string = 0;\n\tlet\
    \ consonants_count_in_word_in_word_in_word_in_word_in_word_in_string = 0;\n\t\
    let vowels_count_in_word_in_word_in_word_in_word_in_word_in_word = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_word_in_word_in_word\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word_in_word_in_word_in_string\
    \ = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_word_in_word_in_word_in_string\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word_in_word_in_word_in_word\
    \ = 0;\n\tlet consonants_count_in_word_in_word_in_word_in_word_in_word_in_word_in_word\
    \ = 0;\n\tlet vowels_count_in_word_in_word_in_word_in_word_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbgsfhpt0.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tvar count = 0;\n\tfor(var i = 0; i<s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \" \"){\n\t\t\tcount--;\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(s.substr(i,\
    \ i+n));\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' lamb', 'lamb', 'amb', 'mb', 'b' ]\n\n\
    should equal\n\n[ 'little' ]\n    at test (/tmp/tmp7dm1ovkg.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7dm1ovkg.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' lamb',\
    \ 'lamb', 'amb', 'mb', 'b' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var result = [];\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n  \n  if(s.length == 0){\n    return result;\n\
    \  }\n  \n  for(var i=0; i<s.length; i++){\n    if(vowels.indexOf(s[i]) > -1){\n\
    \      result.push(s[i]);\n    }\n    else if(consonants.indexOf(s[i]) > -1){\n\
    \      if(result.length == n){\n        return result;\n      }\n      else{\n\
    \        result.push(s[i]);\n      }\n    }\n  }\n  \n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'a',\n  'r',\n  'y',\n  'h',\n  'a',\n\
    \  'd',\n  'a',\n  'l',\n  'i',\n  't',\n  't',\n  'l',\n  'e',\n  'l',\n  'a',\n\
    \  'm',\n  'b' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp0_lfs266.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0_lfs266.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'a', 'r', 'y', 'h', 'a',\n    'd',\
    \ 'a', 'l', 'i', 't',\n    't', 'l', 'e', 'l', 'a',\n    'm', 'b'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.substr(i, n);\n        if(word.length == n){\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpy6zpi_hj.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy6zpi_hj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            i = s.length\
    \ - 1;\n        }\n        for(var j = 0; j<s.length; j++){\n            if(s.charAt(j)\
    \ == s.charAt(i) && s.charAt(j) != \" \" && s.charAt(j) != \"\\n\"){\n       \
    \         words.push(s.substr(i, j));\n                i = j;\n            }\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '', 'a', 'ary ha', 'ad a litt', 'a little\
    \ lamb', 'mb', 'b' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp2t2t6dp8.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2t2t6dp8.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '', 'a', 'ary ha', 'ad a litt', 'a little\
    \ lamb', 'mb', 'b' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  for(var i = 0; i<s.length; i++){\n    var letter =\
    \ s[i];\n    if(letter == \" \"){\n      words.push(\"\");\n    }\n    else if(letter\
    \ == \"a\"){\n      words.push(\"a\");\n    }\n    else if(letter == \"e\"){\n\
    \      words.push(\"e\");\n    }\n    else if(letter == \"i\"){\n      words.push(\"\
    i\");\n    }\n    else if(letter == \"o\"){\n      words.push(\"o\");\n    }\n\
    \    else if(letter == \"u\"){\n      words.push(\"u\");\n    }\n    else if(letter\
    \ == \"y\"){\n      words.push(\"y\");\n    }\n    else if(letter == \"h\"){\n\
    \      words.push(\"h\");\n    }\n    else if(letter == \"l\"){\n      words.push(\"\
    l\");\n    }\n    else if(letter == \"s\"){\n      words.push(\"s\");\n    }\n\
    \    else if(letter == \"t\"){\n      words.push(\"t\");\n    }\n    else if(letter\
    \ == \"n\"){\n      words.push(\"n\");\n    }\n    else if(letter == \"d\"){\n\
    \      words.push(\"d\");\n    }\n    else if(letter == \"r\"){\n      words.push(\"\
    r\");\n    }\n    else if(letter == \"c\"){\n      words.push(\"c\");\n    }\n\
    \    else if(letter == \"m\"){\n      words.push(\"m\");\n    }\n    else if(letter\
    \ == \"p\"){\n      words.push(\"p\");\n    }\n    else if(letter == \"f\"){\n\
    \      words.push(\"f\");\n    }\n    else if(letter == \"v\"){\n      words.push(\"\
    v\");\n    }\n    else if(letter == \"g\"){\n      words.push(\"g\");\n    }\n\
    \    else if(letter == \"b\"){\n      words.push(\"b\");\n    }\n    else if(letter\
    \ == \"k\"){\n      words.push(\"k\");\n    }\n    else if(letter == \"j\"){\n\
    \      words.push(\"j\");\n    }\n    else if(letter == \"q\"){\n      words.push(\"\
    q\");\n    }\n    else if(letter == \"z\"){\n      words.push(\"z\");\n    }\n\
    \    else if(letter == \"x\"){\n      words.push(\"x\");\n    }\n    else if(letter\
    \ == \"q\"){\n      words.push(\"q\");\n    }\n    else if(letter == \"y\"){\n\
    \      words.push(\"y\");\n    }\n    else if(letter == \"z\"){\n      words.push(\"\
    z\");\n    }\n    else if(letter == \"w\"){\n      words.push(\"w\");\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkzyvln0c.js:120\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \twords.push(s.substr(0, i));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmp6or51bd3.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6or51bd3.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  let count = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)\
    \ == \" \"){\n      count++;\n    }\n  }\n  \n  for(let i = 0; i < s.length; i++){\n\
    \    if(s.charAt(i) == \" \"){\n      count++;\n    }\n    if(count == n){\n \
    \     words.push(s.substr(0, i));\n      count = 0;\n    }\n  }\n  \n  return\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '', 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmp3q1ml22y.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3q1ml22y.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '', 'Mary\
    \ had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i)\
    \ != \" \"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \"a\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i) != \"a\"){\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"e\"\
    ){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i) != \"e\"){\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"i\"){\n\t\t\ti++;\n\
    \t\t\twhile(i < s.length && s.charAt(i) != \"i\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"o\"){\n\t\t\ti++;\n\t\t\twhile(i\
    \ < s.length && s.charAt(i) != \"o\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"u\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length\
    \ && s.charAt(i) != \"u\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"y\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i)\
    \ != \"y\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i)\
    \ == \"s\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i) != \"s\"){\n\
    \t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"h\"\
    ){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i) != \"h\"){\n\t\t\t\ti++;\n\
    \t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"l\"){\n\t\t\ti++;\n\
    \t\t\twhile(i < s.length && s.charAt(i) != \"l\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\
    \tcount++;\n\t\t}\n\t\telse if(s.charAt(i) == \"m\"){\n\t\t\ti++;\n\t\t\twhile(i\
    \ < s.length && s.charAt(i) != \"m\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(s.charAt(i) == \"t\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length\
    \ && s.charAt(i) != \"t\"){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t\
    else if(s.charAt(i) == \"w\"){\n\t\t\ti++;\n\t\t\twhile(i < s.length && s.charAt(i)\
    \ != \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph51gpij3.js:104\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    for(var i = 0; i<s.length; i++){\n    \
    \    var word = s.substr(i, n);\n        if(word.length == n){\n            result.push(word);\n\
    \        }\n    }\n    \n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpnxr9rucr.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnxr9rucr.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var result = [];\n  \n  if(s.length == 0){\n    return result;\n  }\n\
    \  \n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n     \
    \ result.push(s.substr(i, i+n));\n      i = i + n;\n    }\n  }\n  \n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' had a l', ' little lamb', ' lamb' ]\n\
    \nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp1t2mk7m_.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1t2mk7m_.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ ' had a\
    \ l', ' little lamb', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    let words = [];\n    for(let i = 0; i < s.length;\
    \ i++){\n        let char = s[i];\n        if(char.match(/[aeiou]/)){\n      \
    \      words.push(char);\n        }\n    }\n    for(let i = 0; i < words.length;\
    \ i++){\n        let word = words[i];\n        let count = 0;\n        for(let\
    \ j = 0; j < word.length; j++){\n            if(word[j] === word[i]){\n      \
    \          count++;\n            }\n        }\n        if(count === n){\n    \
    \        result.push(word);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpb1iq_apq.js:41:10)\n    at Object.<anonymous> (/tmp/tmpb1iq_apq.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s.substr(i);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'Mary had', 'Mary had a', 'Mary\
    \ had a little' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpcaqzfpdi.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcaqzfpdi.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', 'Mary had', 'Mary had a', 'Mary\
    \ had a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet letter = s[i];\n\t\tlet j = i;\n\t\twhile(j < s.length && s[j] == letter){\n\
    \t\t\tj++;\n\t\t}\n\t\tif(j - i == n){\n\t\t\twords.push(s.substring(i, j));\n\
    \t\t\ti = j;\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif(count > 0){\n\t\treturn\
    \ words;\n\t}\n\treturn [];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpqkby597x.js:40:10)\n    at Object.<anonymous> (/tmp/tmpqkby597x.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet letter = s.charAt(index);\n\t\tif(letter == \" \"){\n\t\t\
    \tindex++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\twhile(index < s.length){\n\
    \t\t\tlet letter = s.charAt(index);\n\t\t\tif(letter == \" \"){\n\t\t\t\tindex++;\n\
    \t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tif(count == n){\n\t\t\t\twords.push(s.substring(index,\
    \ index+n));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\tindex++;\n\t\
    }\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'y ha', 'a li', 'tle ', 'amb' ]\n\nshould\
    \ equal\n\n[ 'little' ]\n    at test (/tmp/tmpf9jwaf1f.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf9jwaf1f.js:55:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'y ha',\
    \ 'a li', 'tle ', 'amb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            words.push(s.substr(0, i));\n            s = s.substr(i\
    \ + 1);\n        }\n        else if(s.charAt(i) == \".\" || s.charAt(i) == \"\
    !\" || s.charAt(i) == \"?\" || s.charAt(i) == \":\" || s.charAt(i) == \",\" ||\
    \ s.charAt(i) == \"-\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i)\
    \ == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i) == \"\
    }\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) == \"/\"\
    \ || s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"<\" || s.charAt(i)\
    \ == \">\" || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" || s.charAt(i) == \"\
    ?\" || s.charAt(i) == \"@\" || s.charAt(i) == \"#\" || s.charAt(i) == \"$\" ||\
    \ s.charAt(i) == \"%\" || s.charAt(i) == \"^\" || s.charAt(i) == \"&\" || s.charAt(i)\
    \ == \"*\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"\
    |\" || s.charAt(i) == \"\\\\\" || s.charAt(i) == \"/\" || s.charAt(i) == \":\"\
    \ || s.charAt(i) == \";\" || s.charAt(i) == \"<\" || s.charAt(i) == \">\" || s.charAt(i)\
    \ == \"=\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"\
    @\" || s.charAt(i) == \"#\" || s.charAt(i) == \"$\" || s.charAt(i) == \"%\" ||\
    \ s.charAt(i) == \"^\" || s.charAt(i) == \"&\" || s.charAt(i) == \"*\" || s.charAt(i)\
    \ == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\
    \\\\\" || s.charAt(i) == \"/\" || s.charAt(i) == \":\" || s.charAt(i) == \";\"\
    \ || s.charAt(i) == \"<\" || s.charAt(i) == \">\" || s.charAt(i) == \"=\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"@\" || s.charAt(i) == \"\
    #\" || s.charAt(i) == \"$\" || s.charAt(i) == \"%\" || s.charAt(i) == \"^\" ||\
    \ s.charAt(i) == \"&\" || s.charAt(i) == \"*\" || s.charAt(i) == \"(\" || s.charAt(i)\
    \ == \")\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) ==\
    \ \"/\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"<\"\
    \ || s.charAt(i) == \">\" || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \"?\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcbo7y4r3.js:19\n        else if(s.charAt(i) == \".\" || s.charAt(i)\
    \ == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \":\" || s.charAt(i) == \"\
    ,\" || s.charAt(i) == \"-\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" ||\
    \ s.charAt(i) == \"[\" || s.charAt(i) == \"]\" || s.charAt(i) == \"{\" || s.charAt(i)\
    \ == \"}\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) ==\
    \ \"/\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"<\"\
    \ || s.charAt(i) == \">\" || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" || s.charAt(i)\
    \ == \"?\" || s.charAt(i) == \"@\" || s.charAt(i) == \"#\" || s.charAt(i) == \"\
    $\" || s.charAt(i) == \"%\" || s.charAt(i) == \"^\" || s.charAt(i) == \"&\" ||\
    \ s.charAt(i) == \"*\" || s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i)\
    \ == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i) == \"/\" || s.charAt(i) ==\
    \ \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"<\" || s.charAt(i) == \">\"\
    \ || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i)\
    \ == \"@\" || s.charAt(i) == \"#\" || s.charAt(i) == \"$\" || s.charAt(i) == \"\
    %\" || s.charAt(i) == \"^\" || s.charAt(i) == \"&\" || s.charAt(i) == \"*\" ||\
    \ s.charAt(i) == \"(\" || s.charAt(i) == \")\" || s.charAt(i) == \"|\" || s.charAt(i)\
    \ == \"\\\\\" || s.charAt(i) == \"/\" || s.charAt(i) == \":\" || s.charAt(i) ==\
    \ \";\" || s.charAt(i) == \"<\" || s.charAt(i) == \">\" || s.charAt(i) == \"=\"\
    \ || s.charAt(i) == \"!\" || s.charAt(i) == \"?\" || s.charAt(i) == \"@\" || s.charAt(i)\
    \ == \"#\" || s.charAt(i) == \"$\" || s.charAt(i) == \"%\" || s.charAt(i) == \"\
    ^\" || s.charAt(i) == \"&\" || s.charAt(i) == \"*\" || s.charAt(i) == \"(\" ||\
    \ s.charAt(i) == \")\" || s.charAt(i) == \"|\" || s.charAt(i) == \"\\\\\" || s.charAt(i)\
    \ == \"/\" || s.charAt(i) == \":\" || s.charAt(i) == \";\" || s.charAt(i) == \"\
    <\" || s.charAt(i) == \">\" || s.charAt(i) == \"=\" || s.charAt(i) == \"!\" ||\
    \ s.charAt(i) == \"?\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                "
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet result = [];\n\tlet words = [];\n\tlet count = 0;\n\tlet index =\
    \ 0;\n\twhile(index < s.length){\n\t\tlet char = s[index];\n\t\tlet isConsonant\
    \ = false;\n\t\tfor(let i = 0; i < consonants.length; i++){\n\t\t\tif(char ===\
    \ consonants[i]){\n\t\t\t\tisConsonant = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif(isConsonant){\n\t\t\twords.push(char);\n\t\t\tcount++;\n\t\t}\n\t\t\
    if(count === n){\n\t\t\tresult.push(words.join(\"\"));\n\t\t\twords = [];\n\t\t\
    \tcount = 0;\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnwtxdk5i.js:20\n\t\tfor(let i = 0; i < consonants.length; i++){\n\
    \t\t                   ^\n\nReferenceError: consonants is not defined\n    at\
    \ select_words (/tmp/tmpnwtxdk5i.js:20:22)\n    at test (/tmp/tmpnwtxdk5i.js:45:20)\n\
    \    at Object.<anonymous> (/tmp/tmpnwtxdk5i.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \twords.push(s.slice(i, i+1));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' ' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpbhe5l8al.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbhe5l8al.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet word = \"\";\n\tlet count = 0;\n\tfor(let i = 0;\
    \ i < s.length; i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tif(count > n){\n\t\
    \t\t\tlist.push(word);\n\t\t\t\tword = \"\";\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\
    }\n\t\telse{\n\t\t\tword += s.charAt(i);\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count\
    \ > n){\n\t\tlist.push(word);\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Maryhad', 'alittle' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpvxvz2b99.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvxvz2b99.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Maryhad',\
    \ 'alittle' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\twords.push(word);\n\t\ti += n;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpmo6vpidm.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmo6vpidm.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    for(var i = 0; i<s.length; i++){\n        var word = s.split(\" \"\
    );\n        for(var j = 0; j<word.length; j++){\n            if(word[j].indexOf(vowels[i])\
    \ == -1){\n                if(word[j].indexOf(n) == -1){\n                   \
    \ result.push(word[j]);\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'little',\n  'Mary',\n  'had',\n  'a',\n\
    \  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n\
    \  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb',\n\
    \  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n\
    \  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb',\n\
    \  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n\
    \  'little',\n  'lamb',\n  'Mary',\n  'had',\n  'a',\n  'little',\n  'lamb',\n\
    \  'Mary',\n  'had',\n  'a',\n  'little',\n  '...\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpl3_g7ar5.js:33:10)\n    at Object.<anonymous> (/tmp/tmpl3_g7ar5.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'little', 'Mary',   'had',    'a',\
    \      'lamb',   'Mary',   'had',\n    'a',      'lamb',   'Mary',   'had',  \
    \  'a',      'little', 'lamb',\n    'Mary',   'had',    'a',      'little', 'lamb',\
    \   'Mary',   'had',\n    'a',      'little', 'lamb',   'Mary',   'had',    'a',\
    \      'little',\n    'lamb',   'Mary',   'had',    'a',      'little', 'lamb',\
    \   'Mary',\n    'had',    'a',      'little', 'lamb',   'Mary',   'had',    'a',\n\
    \    'little', 'lamb',   'Mary',   'had',    'a',      'little', 'lamb',\n   \
    \ 'Mary',   'had',    'a',      'little', 'lamb',   'Mary',   'had',\n    'a',\
    \      'little', 'lamb',   'Mary',   'had',    'a',      'little',\n    'lamb',\
    \   'Mary',   'had',    'a',      'little', 'lamb',   'Mary',\n    'had',    'a',\
    \      '"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\twords.push(word);\n\t\ti += n;\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpxp3adn76.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxp3adn76.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la',\
    \ 'mb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var arr = [];\n  for(var i = 0; i<s.length; i++){\n    var word = s.split(\"\
    \ \");\n    for(var j = 0; j<word.length; j++){\n      if(word[j].split(\"\").length\
    \ == n){\n        arr.push(word[j]);\n      }\n    }\n  }\n  return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp1v_u3uqk.js:30:10)\n    at Object.<anonymous> (/tmp/tmp1v_u3uqk.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar letter\
    \ = s[i];\n\t\t\n\t\tfor(var j = 0; j<s.length; j++){\n\t\t\tif(j == i){\n\t\t\
    \t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(letter == s[j]){\n\t\t\t\twords.push(s.slice(i,\
    \ j+1).join(\"\"));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzo_vz9lm.js:24\n\t\t\t\twords.push(s.slice(i, j+1).join(\"\"));\n\
    \t\t\t\t                           ^\n\nTypeError: s.slice(...).join is not a\
    \ function\n    at select_words (/tmp/tmpzo_vz9lm.js:24:32)\n    at test (/tmp/tmpzo_vz9lm.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzo_vz9lm.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar list = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word = s.split(\"\
    \ \");\n\t\tfor(var j = 0; j<word.length; j++){\n\t\t\tif(word[j].length == n){\n\
    \t\t\t\tlist.push(word[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp0nb842pg.js:30:10)\n    at Object.<anonymous> (/tmp/tmp0nb842pg.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet str = \"\";\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tstr += s[i];\n\t}\n\tfor(let i = 0; i < str.length; i++){\n\t\tif(str.charAt(i)\
    \ == \" \"){\n\t\t\tlist.push(str.substring(i));\n\t\t\tstr = \"\";\n\t\t}\n\t\
    \telse if(str.charAt(i) == \"a\"){\n\t\t\tlist.push(str.substring(i));\n\t\t\t\
    str = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"e\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"i\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"o\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"u\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"y\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"h\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"l\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"s\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"t\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"r\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"n\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"m\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"p\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"f\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"v\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"b\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"c\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"k\"){\n\t\t\tlist.push(str.substring(i));\n\
    \t\t\tstr = \"\";\n\t\t}\n\t\telse if(str.charAt(i) == \"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy60v1dqn.js:99\n\t\telse if(str.charAt(i) == \"\n\t\t         \
    \                ^\n\nSyntaxError: Invalid or unexpected token\n    at wrapSafe\
    \ (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var words = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.split(\"\").filter(function(x){\n            return x.match(/[aeiou]/);\n\
    \        }).join(\"\");\n        if(word.length == n){\n            words.push(word);\n\
    \        }\n    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpi6utjm8p.js:30:10)\n    at Object.<anonymous> (/tmp/tmpi6utjm8p.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    for(var i = 0; i<s.length; i++){\n    \
    \    var word = s.split(\" \");\n        for(var j = 0; j<word.length; j++){\n\
    \            if(word[j].length == n){\n                result.push(word[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp6oefh6f0.js:31:10)\n    at Object.<anonymous> (/tmp/tmp6oefh6f0.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet list = [];\n\tlet index = 0;\n\tlet count = 0;\n\tlet temp = \"\"\
    ;\n\twhile(index < s.length){\n\t\ttemp = s.charAt(index);\n\t\tif(temp.match(/[aeiou]/i)){\n\
    \t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\twhile(count < n){\n\t\tlist.push(temp);\n\
    \t\tcount++;\n\t\tindex++;\n\t\twhile(index < s.length){\n\t\t\ttemp = s.charAt(index);\n\
    \t\t\tif(temp.match(/[aeiou]/i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tindex++;\n\
    \t\t}\n\t}\n\treturn list;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpyvbf17_7.js:44:10)\n    at Object.<anonymous> (/tmp/tmpyvbf17_7.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  \n  if(s.length == 0){\n    return list;\n  }\n  \n\
    \  if(s.length == 1){\n    if(s.charAt(0) == s.charAt(1)){\n      list.push(s);\n\
    \    }\n    return list;\n  }\n  \n  for(var i = 0; i <= s.length - n; i++){\n\
    \    if(s.charAt(i) == s.charAt(i + n)){\n      list.push(s.substr(0, i + 1));\n\
    \    }\n  }\n  \n  return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary ', 'Mary had a l' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmpce49m356.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpce49m356.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary ',\
    \ 'Mary had a l' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    for(var i = 0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            list.push(s.substr(0, i));\n            list.push(s.substr(i+1,\
    \ s.length-i-1));\n        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'had a little lamb',\n  'Mary\
    \ had',\n  'a little lamb',\n  'Mary had a',\n  'little lamb',\n  'Mary had a\
    \ little',\n  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpnu6yfnw_.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnu6yfnw_.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\n    'had a little lamb',\n\
    \    'Mary had',\n    'a little lamb',\n    'Mary had a',\n    'little lamb',\n\
    \    'Mary had a little',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tvar word = s.substr(i,\
    \ n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\t}\n\treturn\
    \ words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp1sboudmm.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1sboudmm.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let res = [];\n  s = s.split(\" \");\n  for (let i = 0; i < s.length;\
    \ i++){\n    let count = 0;\n    for (let j = 0; j < s[i].length; j++){\n    \
    \  if (s[i].charAt(j) == s[i].charAt(j)){\n        count++;\n      }\n    }\n\
    \    if (count == n){\n      res.push(s[i]);\n    }\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'lamb' ]\n\nshould equal\n\n[\
    \ 'little' ]\n    at test (/tmp/tmp0ch2m8hi.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ch2m8hi.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  if(s.length == 0){\n    return [];\n  }\n  let words = [];\n  let index\
    \ = 0;\n  let count = 0;\n  while(index < s.length){\n    let char = s[index];\n\
    \    if(char == \" \"){\n      index++;\n      continue;\n    }\n    if(char ==\
    \ \"a\"){\n      index++;\n      continue;\n    }\n    if(char == \"e\"){\n  \
    \    index++;\n      continue;\n    }\n    if(char == \"i\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"o\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"u\"){\n      index++;\n      continue;\n    }\n    if(char\
    \ == \"y\"){\n      index++;\n      continue;\n    }\n    if(char == \"s\"){\n\
    \      index++;\n      continue;\n    }\n    if(char == \"t\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"h\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"l\"){\n      index++;\n      continue;\n    }\n    if(char\
    \ == \"d\"){\n      index++;\n      continue;\n    }\n    if(char == \"n\"){\n\
    \      index++;\n      continue;\n    }\n    if(char == \"g\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"m\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"p\"){\n      index++;\n      continue;\n    }\n    if(char\
    \ == \"f\"){\n      index++;\n      continue;\n    }\n    if(char == \"v\"){\n\
    \      index++;\n      continue;\n    }\n    if(char == \"b\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"j\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"q\"){\n      index++;\n      continue;\n    }\n    if(char\
    \ == \"z\"){\n      index++;\n      continue;\n    }\n    if(char == \"x\"){\n\
    \      index++;\n      continue;\n    }\n    if(char == \"c\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"v\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"b\"){\n      index++;\n      continue;\n    }\n    if(char\
    \ == \"j\"){\n      index++;\n      continue;\n    }\n    if(char == \"q\"){\n\
    \      index++;\n      continue;\n    }\n    if(char == \"z\"){\n      index++;\n\
    \      continue;\n    }\n    if(char == \"x\"){\n      index++;\n      continue;\n\
    \    }\n    if(char == \"c\"){\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgy3llq3i.js:157\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  if(s.length == 0){\n    return [];\n  }\n  var words = [];\n  var count\
    \ = 0;\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n    \
    \  count++;\n      if(count == n){\n        words.push(s.substr(0, i));\n    \
    \  }\n    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary had a little' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmp5d_v6ibh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5d_v6ibh.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary had\
    \ a little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\tlet temp = \"\"\
    ;\n\twhile(index < s.length){\n\t\ttemp = s.charAt(index);\n\t\tif(temp.match(/[aeiou]/)){\n\
    \t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(count === n){\n\t\twords.push(s);\n\
    \t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpjr0pc57u.js:35:10)\n    at Object.<anonymous> (/tmp/tmpjr0pc57u.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    for(var i = 0; i<s.length; i++){\n        var word\
    \ = s.substr(i, n);\n        if(word.length == n){\n            list.push(word);\n\
    \        }\n    }\n    return list;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmptkuum9dr.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmptkuum9dr.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word\
    \ = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\t\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'ary ',\n  'ry h',\n  'y ha',\n\
    \  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n  ' a l',\n  'a li',\n  ' lit',\n\
    \  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n  'le l',\n  'e la',\n  ' lam',\n\
    \  'lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpho2y8ona.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpho2y8ona.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'ary ', 'ry h',\n    'y ha',\
    \ ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n    'a li', ' lit', 'litt',\n\
    \    'ittl', 'ttle', 'tle ',\n    'le l', 'e la', ' lam',\n    'lamb'\n  ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i = 0; i<s.length; i++){\n        var\
    \ word = s.split(\" \");\n        for(var j = 0; j<word.length; j++){\n      \
    \      if(word[j].length == n){\n                result.push(word[j]);\n     \
    \       }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmp11pxk99s.js:30:10)\n    at Object.<anonymous> (/tmp/tmp11pxk99s.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet index = 0;\n\tlet count = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char == \" \"){\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants = count_consonants(char);\n\
    \t\tif(consonants == n){\n\t\t\twords.push(s.substring(index, index+consonants));\n\
    \t\t\tindex += consonants;\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\tif(count\
    \ == 0){\n\t\treturn [];\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpul_82j6a.js:22\n\t\tlet consonants = count_consonants(char);\n\t\
    \t                 ^\n\nReferenceError: count_consonants is not defined\n    at\
    \ select_words (/tmp/tmpul_82j6a.js:22:20)\n    at test (/tmp/tmpul_82j6a.js:41:20)\n\
    \    at Object.<anonymous> (/tmp/tmpul_82j6a.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet word =\
    \ s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\t\t}\n\
    \t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpiapfr0dn.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiapfr0dn.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet consonants = \"bcdfghjklmnpqrstvwxyz\";\n\tlet\
    \ vowels = \"aeiou\";\n\tlet vowel_consonants = \"aeiouy\";\n\tlet consonant_vowels\
    \ = \"bcdfghjklmnpqrstvwxyzaeiou\";\n\tlet consonant_vowel_consonants = \"bcdfghjklmnpqrstvwxyzaeiouy\"\
    ;\n\tlet vowel_consonant_vowels = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyz\"\
    ;\n\tlet vowel_consonant_vowel_consonants = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyz\"\
    ;\n\tlet consonant_vowel_consonant_vowels = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzaeiou\"\
    ;\n\tlet consonant_vowel_consonant_vowel_consonants = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyz\"\
    ;\n\tlet vowel_consonant_vowel_consonant_vowels = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzaeiou\"\
    ;\n\tlet vowel_consonant_vowel_consonant_vowel_consonants = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyz\"\
    ;\n\tlet vowel_consonant_vowel_consonant_vowel_consonant_vowels = \"bcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzbcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzaeiouybcdfghjklmnpqrstvwxyzaeiou\"\
    ;\n\t\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpaz16k_1n.js:41\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i < s.length){\n\t\tlet letter\
    \ = s[i];\n\t\tlet count = 0;\n\t\twhile(i < s.length && s[i] !== letter){\n\t\
    \t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\tif(count === n){\n\t\t\twords.push(letter);\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpjl_k2kon.js:35:10)\n    at Object.<anonymous> (/tmp/tmpjl_k2kon.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    \n    for(var i = 0; i<s.length; i++){\n    \
    \    var word = s.split(\" \");\n        for(var j = 0; j<word.length; j++){\n\
    \            if(word[j].length == n){\n                result.push(word[j]);\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpia8mhrgy.js:32:10)\n    at Object.<anonymous> (/tmp/tmpia8mhrgy.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(let i = 0; i < s.length; i++){\n    let letter = s[i];\n    \n    if(letter\
    \ == \" \"){\n      continue;\n    }\n    \n    let count = 0;\n    for(let j\
    \ = 0; j < letter.length; j++){\n      if(letter[j] == \" \"){\n        continue;\n\
    \      }\n      \n      if(letter[j] != \"a\"){\n        count += 1;\n      }\n\
    \    }\n    \n    if(count == n){\n      words.push(letter);\n    }\n  }\n  \n\
    \  return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpuc54y4mf.js:50:10)\n    at Object.<anonymous> (/tmp/tmpuc54y4mf.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet i = 0;\n\twhile(i < s.length){\n\
    \t\tlet char = s.charAt(i);\n\t\tif(char == \" \"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"a\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"e\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"i\"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"o\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"u\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"y\"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"s\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"t\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"n\"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"g\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"h\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"l\"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"d\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"r\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    \t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"c\"){\n\t\t\twords.push(s.substring(i+1,\
    \ s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(char == \"m\"){\n\
    \t\t\twords.push(s.substring(i+1, s.length));\n\t\t\ti++;\n\t\t\tcount++;\n\t\t\
    }\n\t\telse if(char == \"p\"){\n\t\t\twords.push(s.substring(i+1, s.length));\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphmwbiu67.js:119\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet i = 0;\n\t\
    let j = 0;\n\tlet k = 0;\n\tlet l = s.length - 1;\n\twhile(i < l){\n\t\twhile(j\
    \ < l && s[k] === s[i + j]){\n\t\t\tj++;\n\t\t}\n\t\twords.push(s.substring(last,\
    \ i + j));\n\t\tlast = i + j;\n\t\ti = j;\n\t\tj = 0;\n\t\tk++;\n\t\tif(k ===\
    \ n){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'M', 'a', 'a', 'M' ]\n\nshould equal\n\
    \n[ 'little' ]\n    at test (/tmp/tmp3ao7qk1v.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3ao7qk1v.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'M', 'a',\
    \ 'a', 'M' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var list = [];\n  if(s.length == 0){\n    return list;\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \"\
    \ \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+2);\n      i =\
    \ s.length - 1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var i = 0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) != \" \"){\n      list.push(s.substr(0, i));\n      s\
    \ = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0,\
    \ i));\n      s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var\
    \ i = 0; i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \"\
    \ \"){\n      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i =\
    \ s.length - 1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n   \
    \   s = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var i = 0;\
    \ i<s.length; i++){\n    if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n\
    \      list.push(s.substr(0, i));\n      s = s.substr(i+1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  for(var i = 0; i<s.length; i++){\n    if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \"){\n      list.push(s.substr(0, i));\n      s\
    \ = s.substr(i+1);\n      i = s.length - 1;\n    }\n  }\n  for(var i = 0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \" && s.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpufxx8ei_.js:89\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\tfor(var i=0; i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\
    \t\tif(c == \" \"){\n\t\t\twords.push(s.substring(i));\n\t\t}\n\t\telse{\n\t\t\
    \tfor(var j=0; j<n; j++){\n\t\t\t\tif(c == consonants[j]){\n\t\t\t\t\twords.push(s.substring(i,i+j+1));\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplmwl7gmf.js:21\n\t\t\t\tif(c == consonants[j]){\n\t\t\t\t     \
    \   ^\n\nReferenceError: consonants is not defined\n    at select_words (/tmp/tmplmwl7gmf.js:21:13)\n\
    \    at test (/tmp/tmplmwl7gmf.js:36:20)\n    at Object.<anonymous> (/tmp/tmplmwl7gmf.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar word =\
    \ s.split(\" \");\n\t\tvar count = 0;\n\t\tfor(var j = 0; j<word.length; j++){\n\
    \t\t\tif(word[j].indexOf(word[i]) != -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \tif(count == n){\n\t\t\tresult.push(word[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'a' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpkycwq0am.js:34:10)\n    at Object.<anonymous> (/tmp/tmpkycwq0am.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'a' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        let\
    \ word = s.split(\" \").filter(word => word.includes(s[i]));\n        if(word.length\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 'Mary', 'had', 'a', 'lamb' ],\n  [ 'Mary',\
    \ 'had', 'a', 'lamb' ],\n  [ 'Mary', 'had', 'a', 'lamb' ],\n  [ 'Mary', 'had',\
    \ 'a', 'lamb' ] ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpn1qk6wob.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn1qk6wob.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [ 'Mary', 'had', 'a', 'lamb' ],\n\
    \    [ 'Mary', 'had', 'a', 'lamb' ],\n    [ 'Mary', 'had', 'a', 'lamb' ],\n  \
    \  [ 'Mary', 'had', 'a', 'lamb' ]\n  ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  var words = [];\n  \n  if(s.length == 0){\n    return words;\n  }\n \
    \ \n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substring(i));\n\
    \    }\n  }\n  \n  for(var i=0; i<words.length; i++){\n    if(words[i].length\
    \ == n){\n      words[i] = words[i].split(\" \");\n      for(var j=0; j<words[i].length;\
    \ j++){\n        words[i][j] = words[i][j].toLowerCase();\n      }\n      words[i]\
    \ = words[i].join(\" \");\n    }\n  }\n  \n  return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' had a little lamb',\n  ' a little lamb',\n\
    \  ' little lamb',\n  ' lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpahmjr51x.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpahmjr51x.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' had a little lamb', ' a little lamb',\
    \ ' little lamb', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i=0; i<s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substring(i));\n        }\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' had a little lamb',\n  ' a little lamb',\n\
    \  ' little lamb',\n  ' lamb' ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmpr01kzgcv.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr01kzgcv.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' had a little lamb', ' a little lamb',\
    \ ' little lamb', ' lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar result = [];\n\t\n\ts = s.toLowerCase();\n\tn = parseInt(n);\n\t\n\
    \tfor(var i=0; i<s.length; i++){\n\t\tvar c = s.charAt(i);\n\t\t\n\t\tif(c ==\
    \ \" \"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t\
    if(c == \"a\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\t\t}\n\t\t\
    \n\t\tif(c == \"e\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\t\t\
    }\n\t\t\n\t\tif(c == \"i\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"o\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"u\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"y\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"h\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"l\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"m\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"n\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"s\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"t\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"w\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"d\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"g\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"b\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"f\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"v\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"k\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c == \"j\"){\n\t\t\tresult.push(s.substring(i));\n\t\t\tbreak;\n\
    \t\t}\n\t\t\n\t\tif(c\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8lpu1v3x.js:127\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet res = [];\n\tlet count = 0;\n\tfor(let i = 0; i < s.length; i++){\n\
    \t\tif(s.charAt(i) == \" \"){\n\t\t\tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\
    \tres.push(s.slice(i, i + 1));\n\t\t\tcount = 0;\n\t\t}\n\t}\n\treturn res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ ' ' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpgen3g8fw.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgen3g8fw.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ ' ' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  if(s == \"\"){\n    return [];\n  }\n  let words = [];\n  for(let i =\
    \ 0; i < s.length; i++){\n    if(s.charAt(i) == \" \"){\n      words.push(s.substr(0,\
    \ i));\n      s = s.substr(i + 1);\n      i = s.length - 1;\n    }\n  }\n  for(let\
    \ i = 0; i < s.length; i++){\n    if(s.charAt(i) == \" \" && words.length == n){\n\
    \      words.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      i = s.length\
    \ - 1;\n    }\n  }\n  return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpcs6hnpma.js:39:10)\n    at Object.<anonymous> (/tmp/tmpcs6hnpma.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary' ],\n  expected: [ 'little' ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tvar letter\
    \ = s[i];\n\t\tvar count = 0;\n\t\tfor(var j = 0; j<s.length; j++){\n\t\t\tif(j\
    \ != i){\n\t\t\t\tif(s[j] == letter){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t\tif(count == n){\n\t\t\twords.push(letter);\n\t\t}\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpv7srx302.js:37:10)\n    at Object.<anonymous> (/tmp/tmpv7srx302.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tvar words = [];\n\t\n\tfor(var i = 0; i<s.length; i++){\n\t\tfor(var\
    \ j = 0; j<s.length; j++){\n\t\t\tif(s[i] == s[j]){\n\t\t\t\twords.push(s.slice(i,\
    \ j));\n\t\t\t\ti = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    for(var i=0; i<s.length; i++){\n        var word\
    \ = s.split(\" \");\n        for(var j=0; j<word.length; j++){\n            if(word[j].length\
    \ == n){\n                result.push(word[j]);\n            }\n        }\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpeq3wlm03.js:30:10)\n    at Object.<anonymous> (/tmp/tmpeq3wlm03.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n        if(s.charAt(i)\
    \ == \" \"){\n            result.push(s.substr(0, i));\n        }\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n            result.push(s.substr(0, i+1));\n\
    \        }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"){\n    \
    \        result.push(s.substr(0, i+1));\n        }\n        if(s.charAt(i) ==\
    \ \" \" && s.charAt(i+1) == \" \" && s.charAt(i+2) == \" \"){\n            result.push(s.substr(0,\
    \ i+2));\n        }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) == \" \"\
    \ && s.charAt(i+2) != \" \"){\n            result.push(s.substr(0, i+2));\n  \
    \      }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2)\
    \ == \" \"){\n            result.push(s.substr(0, i+2));\n        }\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2) != \" \"){\n           \
    \ result.push(s.substr(0, i+2));\n        }\n        if(s.charAt(i) == \" \" &&\
    \ s.charAt(i+1) != \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \"){\n\
    \            result.push(s.substr(0, i+3));\n        }\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3)\
    \ != \" \"){\n            result.push(s.substr(0, i+3));\n        }\n        if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3)\
    \ == \" \" && s.charAt(i+4) == \" \"){\n            result.push(s.substr(0, i+4));\n\
    \        }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2)\
    \ == \" \" && s.charAt(i+3) == \" \" && s.charAt(i+4) != \" \"){\n           \
    \ result.push(s.substr(0, i+4));\n        }\n        if(s.charAt(i) == \" \" &&\
    \ s.charAt(i+1) != \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \" &&\
    \ s.charAt(i+4) == \" \" && s.charAt(i+5) == \" \"){\n            result.push(s.substr(0,\
    \ i+5));\n        }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \"\
    \ && s.charAt(i+2) == \" \" && s.charAt(i+3) == \" \" && s.charAt(i+4) == \" \"\
    \ && s.charAt(i+5) != \" \"){\n            result.push(s.substr(0, i+5));\n  \
    \      }\n        if(s.charAt(i) == \" \" && s.charAt(i+1) != \" \" && s.charAt(i+2)\
    \ == \" \" && s.charAt(i+3\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5ty01kh6.js:54\n        if(s.charAt(i) == \" \" && s.charAt(i+1)\
    \ != \" \" && s.charAt(i+2) == \" \" && s.charAt(i+3\n                       \
    \                                                                     ^\n\nSyntaxError:\
    \ missing ) after argument list\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    let words = [];\n    let i = 0;\n    while (i < s.length){\n      \
    \  let word = s.substr(i, n);\n        if (word.length == n){\n            words.push(word);\n\
    \            i += n;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ]\n\nshould equal\n\n[ 'little' ]\n    at test (/tmp/tmp4c3hgcnp.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4c3hgcnp.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Mary', ' had', ' a l', 'ittl', 'e la'\
    \ ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var list = [];\n    for(var i=0; i<s.length; i++){\n        var word\
    \ = s.split(\" \");\n        for(var j=0; j<word.length; j++){\n            if(word[j].length\
    \ == n){\n                list.push(word[j]);\n            }\n        }\n    }\n\
    \    return list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb' ]\n\nshould equal\n\n[ 'little'\
    \ ]\n    at test (/tmp/tmpr3gg6pzs.js:30:10)\n    at Object.<anonymous> (/tmp/tmpr3gg6pzs.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n\
    \    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb',\
    \ 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary',\
    \ 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb',\
    \ 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet last = 0;\n\tlet i = 0;\n\t\
    while(i < s.length){\n\t\tlet letter = s[i];\n\t\tlet nextLetter = s[i+1];\n\t\
    \tlet nextNextLetter = s[i+2];\n\t\tlet nextNextNextLetter = s[i+3];\n\t\tlet\
    \ nextNextNextNextLetter = s[i+4];\n\t\tlet nextNextNextNextNextLetter = s[i+5];\n\
    \t\tlet nextNextNextNextNextNextLetter = s[i+6];\n\t\tlet nextNextNextNextNextNextNextLetter\
    \ = s[i+7];\n\t\tlet nextNextNextNextNextNextNextNextLetter = s[i+8];\n\t\tlet\
    \ nextNextNextNextNextNextNextNextNextLetter = s[i+9];\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+10];\n\t\tlet nextNextNextNextNextNextNextNextNextLetter = s[i+11];\n\t\
    \tlet nextNextNextNextNextNextNextNextNextLetter = s[i+12];\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+13];\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s[i+14];\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextLetter = s[i+15];\n\t\tlet nextNextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+16];\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+17];\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+18];\n\t\tlet\
    \ nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+19];\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+20];\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+21];\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+22];\n\t\tlet\
    \ nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+23];\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+24];\n\t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+25];\n\
    \t\tlet nextNextNextNextNextNextNextNextNextNextNextLetter = s[i+26];\n\t\tlet\
    \ nextNextNextNextNextNextNextNextNextNextNextNextLetter = s[i+27];\n\t\tlet nextNextNextNextNext\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_5kr8p6t.js:28\n\t\tlet nextNextNextNextNextNextNextNextNextLetter\
    \ = s[i+10];\n\t\t    ^\n\nSyntaxError: Identifier 'nextNextNextNextNextNextNextNextNextLetter'\
    \ has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n\tlet words = [];\n\tlet count = 0;\n\tlet index = 0;\n\twhile(index <\
    \ s.length){\n\t\tlet char = s.charAt(index);\n\t\tif(char === \" \"){\n\t\t\t\
    index++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet consonants = countConsonants(char);\n\
    \t\tif(consonants === n){\n\t\t\twords.push(s.substring(index, index+consonants));\n\
    \t\t\tindex += consonants;\n\t\t\tcount += consonants;\n\t\t}\n\t\telse{\n\t\t\
    \tindex++;\n\t\t}\n\t}\n\tif(count === 0){\n\t\treturn [];\n\t}\n\treturn words;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoxa6et8u.js:22\n\t\tlet consonants = countConsonants(char);\n\t\
    \t                 ^\n\nReferenceError: countConsonants is not defined\n    at\
    \ select_words (/tmp/tmpoxa6et8u.js:22:20)\n    at test (/tmp/tmpoxa6et8u.js:43:20)\n\
    \    at Object.<anonymous> (/tmp/tmpoxa6et8u.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n  let result = [];\n  s = s.split(\" \");\n  for(let i = 0; i < s.length;\
    \ i++){\n    let word = s[i];\n    let count = 0;\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(word[j] === \"a\"){\n        count++;\n      }\n    }\n    if(count\
    \ === n){\n      result.push(word);\n    }\n  }\n  return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpr3ukd5de.js:35:10)\n    at Object.<anonymous> (/tmp/tmpr3ukd5de.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns a list of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty list.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s,\
    \ n){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = s.length - 1;\n    var m = n - 1;\n    while(i < l && j < m){\n \
    \       if(s.charAt(i) == s.charAt(j)){\n            i++;\n            j++;\n\
    \        }\n        else if(s.charAt(i) == s.charAt(k)){\n            i++;\n \
    \           k++;\n        }\n        else if(s.charAt(j) == s.charAt(k)){\n  \
    \          j++;\n            k++;\n        }\n        else if(s.charAt(i) == s.charAt(l)){\n\
    \            i++;\n            l--;\n        }\n        else if(s.charAt(j) ==\
    \ s.charAt(l)){\n            j--;\n            l--;\n        }\n        else{\n\
    \            result.push(s.substring(i, j + 1));\n            i = j;\n       \
    \     j = k;\n            k = l;\n        }\n    }\n    result.push(s.substring(i,\
    \ j + 1));\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'y' ]\n\nshould equal\n\n[ 'little' ]\n\
    \    at test (/tmp/tmpuos2cbtv.js:56:10)\n    at Object.<anonymous> (/tmp/tmpuos2cbtv.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'y' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
