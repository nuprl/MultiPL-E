name: HumanEval_95_check_dict_case
language: js
results:
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmper4801hn.js:26:10)\n    at Object.<anonymous> (/tmp/tmper4801hn.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                continue;\n            }\n            else if(dict[key].toUpperCase()\
    \ === dict[key].toUpperCase()){\n                continue;\n            }\n  \
    \          else{\n                return false;\n            }\n        }\n  \
    \      else{\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1ldssfqe.js:36:10)\n    at Object.<anonymous> (/tmp/tmp1ldssfqe.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(Object.keys(dict).length == 0){\n    return\
    \ false;\n  }\n  for(var key in dict){\n    if(typeof dict[key] != \"string\"\
    ){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxpffj76l.js:28:10)\n    at Object.<anonymous> (/tmp/tmpxpffj76l.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key] === \"\
    string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key]\
    \ === \"number\"){\n\t\t\tif(dict[key] === key){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key]\
    \ === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzg_impzb.js:51:10)\n    at Object.<anonymous> (/tmp/tmpzg_impzb.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key].toLowerCase()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"\
    ){\n\t\t\tif(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !==\
    \ dict[key]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key]\
    \ === \"object\"){\n\t\t\tif(check_dict_case(dict[key]) === false){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4che7gcj.js:42:10)\n    at Object.<anonymous> (/tmp/tmp4che7gcj.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                continue;\n            }\n            else if(dict[key].toUpperCase()\
    \ === dict[key].toLowerCase()){\n                continue;\n            }\n  \
    \          else{\n                return false;\n            }\n        }\n  \
    \      else{\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr23nbxsi.js:36:10)\n    at Object.<anonymous> (/tmp/tmpr23nbxsi.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\t// Your code here\n\t\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmpehej5r62.js:21:10)\n    at Object.<anonymous> (/tmp/tmpehej5r62.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"){\n\
    \t\t\tif(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !==\
    \ Boolean(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(dict[key] !== null){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"undefined\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp43je2lwz.js:45:10)\n    at Object.<anonymous> (/tmp/tmp43je2lwz.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplas56kop.js:32:10)\n    at Object.<anonymous> (/tmp/tmplas56kop.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7h4xgl8_.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7h4xgl8_.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(!check_dict_case(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpivj89hje.js:34:10)\n    at Object.<anonymous> (/tmp/tmpivj89hje.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] === dict[key]){\n     \
    \           return true;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"boolean\"){\n            if(dict[key] === dict[key]){\n              \
    \  return true;\n            }\n        }\n        else if(typeof dict[key] ===\
    \ \"object\"){\n            if(check_dict_case(dict[key])){\n                return\
    \ true;\n            }\n        }\n        else if(typeof dict[key] === \"undefined\"\
    ){\n            return false;\n        }\n    }\n    return false;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2c6r7sau.js:45:10)\n    at Object.<anonymous> (/tmp/tmp2c6r7sau.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n        if(typeof dict[key] === \"object\"){\n            if(check_dict_case(dict[key])\
    \ === false){\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpgxezi60j.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgxezi60j.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm1pmirgv.js:35:10)\n    at Object.<anonymous> (/tmp/tmpm1pmirgv.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(dict.length == 0){\n    return false;\n\
    \  }\n  for(var key in dict){\n    if(typeof dict[key] != \"string\"){\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwfn_ka8n.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwfn_ka8n.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n        }\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpjjgfy98_.js:27:10)\n    at Object.<anonymous> (/tmp/tmpjjgfy98_.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpnvhgdt0c.js:27:10)\n    at Object.<anonymous> (/tmp/tmpnvhgdt0c.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  for(var key in dict){\n    if(typeof dict[key]\
    \ === \"string\"){\n      if(dict[key].toLowerCase() !== dict[key].toUpperCase()){\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmppu7y3wu5.js:26:10)\n    at Object.<anonymous> (/tmp/tmppu7y3wu5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6jd4skrm.js:33:10)\n    at Object.<anonymous> (/tmp/tmp6jd4skrm.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tlet flag =\
    \ true;\n\tfor (let i = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\t\
    let value = dict[key];\n\t\tlet lowerCase = key.toLowerCase();\n\t\tlet upperCase\
    \ = key.toUpperCase();\n\t\tif (typeof(value) === \"string\"){\n\t\t\tif (value.toLowerCase()\
    \ !== value){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (value.toUpperCase()\
    \ !== value){\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse{\n\
    \t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpupspzgm7.js:41:10)\n    at Object.<anonymous> (/tmp/tmpupspzgm7.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpftan0ucr.js:26:10)\n    at Object.<anonymous> (/tmp/tmpftan0ucr.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\" && dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbf430qmy.js:30:10)\n    at Object.<anonymous> (/tmp/tmpbf430qmy.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpft_q5u2g.js:26:10)\n    at Object.<anonymous> (/tmp/tmpft_q5u2g.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(!check_dict_case(dict[key])){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpntwx4mat.js:38:10)\n    at Object.<anonymous> (/tmp/tmpntwx4mat.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpq44b51hg.js:26:10)\n    at Object.<anonymous> (/tmp/tmpq44b51hg.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tif(keys[i].toLowerCase()\
    \ != keys[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]]\
    \ == \"string\"){\n\t\t\tif(keys[i].toUpperCase() != keys[i]){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprw4rjvlg.js:37:10)\n    at Object.<anonymous> (/tmp/tmprw4rjvlg.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif((dict[key].toLowerCase() === dict[key].toLowerCase())\
    \ || (dict[key].toUpperCase() === dict[key].toUpperCase())){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqe_qfvcw.js:27:10)\n    at Object.<anonymous> (/tmp/tmpqe_qfvcw.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpb6dhr98j.js:29:10)\n    at Object.<anonymous> (/tmp/tmpb6dhr98j.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4l_0_qsj.js:26:10)\n    at Object.<anonymous> (/tmp/tmp4l_0_qsj.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpx9ssrd6c.js:27:10)\n    at Object.<anonymous> (/tmp/tmpx9ssrd6c.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}else if(typeof dict[key] === \"number\"){\n\t\t\t\
    if(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else\
    \ if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !== Boolean(dict[key])){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}else if(typeof dict[key] === \"object\"){\n\
    \t\t\tif(!(dict[key] instanceof Object)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp144fr4jb.js:39:10)\n    at Object.<anonymous> (/tmp/tmp144fr4jb.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d2l7fsk.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1d2l7fsk.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  for(var key in dict){\n    if(typeof dict[key]\
    \ === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpuimajjlo.js:26:10)\n    at Object.<anonymous> (/tmp/tmpuimajjlo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tif (Object.keys(dict).length == 0){\n\t\
    \treturn false;\n\t}\n\t\n\tfor (let key in dict){\n\t\t\n\t\tif (typeof(dict[key])\
    \ == \"string\"){\n\t\t\tif (dict[key].toLowerCase() == dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (typeof(dict[key]) == \"number\"\
    ){\n\t\t\tif (dict[key] == dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if (typeof(dict[key]) == \"object\"){\n\t\t\tif (check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (typeof(dict[key]) == \"boolean\"\
    ){\n\t\t\tif (dict[key] == dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if (typeof(dict[key]) == \"undefined\"){\n\t\t\tif (dict[key] == dict[key]){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\treturn false;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhkk57l4.js:55:10)\n    at Object.<anonymous> (/tmp/tmplhkk57l4.js:63:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3lbs2d_p.js:35:10)\n    at Object.<anonymous> (/tmp/tmp3lbs2d_p.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnm1xytm_.js:35:10)\n    at Object.<anonymous> (/tmp/tmpnm1xytm_.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\t\tif(keys[i].toLowerCase()\
    \ === keys[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbwb_xr6d.js:34:10)\n    at Object.<anonymous> (/tmp/tmpbwb_xr6d.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tif(keys[i].toLowerCase()\
    \ == keys[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp97tuqkx0.js:34:10)\n    at Object.<anonymous> (/tmp/tmp97tuqkx0.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tlet result\
    \ = true;\n\tfor(let i=0; i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] !==\
    \ \"string\"){\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp51g_ox1b.js:28:10)\n    at Object.<anonymous> (/tmp/tmp51g_ox1b.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tif (Object.keys(dict).length == 0){\n\t\
    \treturn false;\n\t}\n\t\n\tfor (let key in dict){\n\t\t\n\t\tif (typeof(dict[key])\
    \ == \"string\"){\n\t\t\tif (dict[key].toLowerCase() == dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (typeof(dict[key]) == \"string\"\
    ){\n\t\t\tif (dict[key].toUpperCase() == dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp160f_k64.js:40:10)\n    at Object.<anonymous> (/tmp/tmp160f_k64.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt0cal_le.js:32:10)\n    at Object.<anonymous> (/tmp/tmpt0cal_le.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(check_dict_case(dict[key])){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    }\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpn5t80351.js:34:10)\n    at Object.<anonymous> (/tmp/tmpn5t80351.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpvjdqvrnv.js:26:10)\n    at Object.<anonymous> (/tmp/tmpvjdqvrnv.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpguixedqc.js:35:10)\n    at Object.<anonymous> (/tmp/tmpguixedqc.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjg4jewp5.js:26:10)\n    at Object.<anonymous> (/tmp/tmpjg4jewp5.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() === keys[i].toLowerCase()){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]] === \"string\"){\n\t\t\tif(keys[i].toUpperCase()\
    \ === keys[i].toLowerCase()){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy05t1o0d.js:36:10)\n    at Object.<anonymous> (/tmp/tmpy05t1o0d.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpuc29i8ob.js:26:10)\n    at Object.<anonymous> (/tmp/tmpuc29i8ob.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif((dict[key].toLowerCase() === dict[key].toLowerCase())\
    \ || (dict[key].toUpperCase() === dict[key].toUpperCase())){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu5tqdlz.js:27:10)\n    at Object.<anonymous> (/tmp/tmpdu5tqdlz.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6hkarcbw.js:35:10)\n    at Object.<anonymous> (/tmp/tmp6hkarcbw.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0v5vgejj.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0v5vgejj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tif (Object.keys(dict).length == 0){\n\t\
    \treturn false;\n\t}\n\t\n\tfor (let key in dict){\n\t\t\n\t\tif (typeof(dict[key])\
    \ == \"string\"){\n\t\t\tif (dict[key].toLowerCase() == dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (typeof(dict[key]) == \"number\"\
    ){\n\t\t\tif (dict[key] == dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if (typeof(dict[key]) == \"object\"){\n\t\t\tif (check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\treturn false;\n\t\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpu1p_gx6z.js:46:10)\n    at Object.<anonymous> (/tmp/tmpu1p_gx6z.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(dict.length == 0){\n    return false;\n\
    \  }\n  for(var key in dict){\n    if(typeof dict[key] != \"string\"){\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkhuqlb3d.js:28:10)\n    at Object.<anonymous> (/tmp/tmpkhuqlb3d.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"number\"){\n\t\t\tif(dict[key] === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"boolean\"){\n\t\t\tif(dict[key] === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key]) === true){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl186nhjo.js:59:10)\n    at Object.<anonymous> (/tmp/tmpl186nhjo.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpj8taqzuh.js:38:10)\n    at Object.<anonymous> (/tmp/tmpj8taqzuh.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() !== dict[key].toLowerCase()){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] !== parseInt(dict[key])){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"boolean\"){\n            if(dict[key] !== dict[key]){\n    \
    \            return false;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"object\"){\n            if(check_dict_case(dict[key]) === false){\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3oyarg_a.js:42:10)\n    at Object.<anonymous> (/tmp/tmp3oyarg_a.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp11df3isx.js:33:10)\n    at Object.<anonymous> (/tmp/tmp11df3isx.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tlet\
    \ lower = keys[i].toLowerCase();\n\t\t\tlet upper = keys[i].toUpperCase();\n\t\
    \t\tif(lower == upper){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[keys[i]] == \"number\"){\n\t\t\tlet lower = keys[i].toLowerCase();\n\t\t\
    \tlet upper = keys[i].toUpperCase();\n\t\t\tif(lower == upper){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpa61s7hp_.js:36:10)\n    at Object.<anonymous> (/tmp/tmpa61s7hp_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiuf_fnvf.js:26:10)\n    at Object.<anonymous> (/tmp/tmpiuf_fnvf.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpspxglgzr.js:33:10)\n    at Object.<anonymous> (/tmp/tmpspxglgzr.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphnwdl6mc.js:38:10)\n    at Object.<anonymous> (/tmp/tmphnwdl6mc.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq4yw825v.js:38:10)\n    at Object.<anonymous> (/tmp/tmpq4yw825v.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphps6563_.js:33:10)\n    at Object.<anonymous> (/tmp/tmphps6563_.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp__c77645.js:33:10)\n    at Object.<anonymous> (/tmp/tmp__c77645.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    var is_all_strings\
    \ = keys.every(function(key){\n        return typeof dict[key] === \"string\"\
    ;\n    });\n    var is_all_upper_case = keys.every(function(key){\n        return\
    \ dict[key].toUpperCase() === dict[key];\n    });\n    return is_all_strings &&\
    \ is_all_upper_case;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmppuecuxsn.js:26:10)\n    at Object.<anonymous> (/tmp/tmppuecuxsn.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\t\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp9h4lg2y3.js:34:10)\n    at Object.<anonymous> (/tmp/tmp9h4lg2y3.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key].toUpperCase()){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(!check_dict_case(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpiebwvgxg.js:34:10)\n    at Object.<anonymous> (/tmp/tmpiebwvgxg.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ !== \"string\"){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpofq7a4pi.js:27:10)\n    at Object.<anonymous> (/tmp/tmpofq7a4pi.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqndlshw7.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqndlshw7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() === keys[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    }\n\t\telse if(typeof dict[keys[i]] === \"string\"){\n\t\t\tif(keys[i].toUpperCase()\
    \ === keys[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjsl3klzw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjsl3klzw.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if(key.toUpperCase() === key){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpu6g_p7ai.js:37:10)\n    at Object.<anonymous> (/tmp/tmpu6g_p7ai.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi787xq1n.js:35:10)\n    at Object.<anonymous> (/tmp/tmpi787xq1n.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxx7919ae.js:32:10)\n    at Object.<anonymous> (/tmp/tmpxx7919ae.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"\
    ){\n\t\t\tif(dict[key] === dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] === dict[key]){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(check_dict_case(dict[key]) === false){\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"undefined\"){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa3figh0u.js:45:10)\n    at Object.<anonymous> (/tmp/tmpa3figh0u.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    var is_all_strings\
    \ = keys.every(function(key){\n        return typeof dict[key] === \"string\"\
    ;\n    });\n    var is_all_upper_case = keys.every(function(key){\n        return\
    \ dict[key].toUpperCase() === dict[key];\n    });\n    return is_all_strings &&\
    \ is_all_upper_case;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp54gkc60x.js:26:10)\n    at Object.<anonymous> (/tmp/tmp54gkc60x.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_ywnu66r.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_ywnu66r.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp1l86vjes.js:26:10)\n    at Object.<anonymous> (/tmp/tmp1l86vjes.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsyful229.js:26:10)\n    at Object.<anonymous> (/tmp/tmpsyful229.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"\
    ){\n\t\t\tif(dict[key] === dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp55hh4ayh.js:40:10)\n    at Object.<anonymous> (/tmp/tmp55hh4ayh.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] !== \"string\"){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzqlud1fi.js:25:10)\n    at Object.<anonymous> (/tmp/tmpzqlud1fi.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    for(var\
    \ i=0; i<keys.length; i++){\n        if(typeof dict[keys[i]] === \"string\"){\n\
    \            if(keys[i].toLowerCase() === keys[i]){\n                return true;\n\
    \            }\n        }\n        else if(typeof dict[keys[i]] === \"string\"\
    ){\n            if(keys[i].toUpperCase() === keys[i]){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr41mtyug.js:33:10)\n    at Object.<anonymous> (/tmp/tmpr41mtyug.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpwhqffm5t.js:26:10)\n    at Object.<anonymous> (/tmp/tmpwhqffm5t.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(key.toUpperCase()\
    \ === key){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6tge8lem.js:37:10)\n    at Object.<anonymous> (/tmp/tmp6tge8lem.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0u486fop.js:26:10)\n    at Object.<anonymous> (/tmp/tmp0u486fop.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppabty97t.js:32:10)\n    at Object.<anonymous> (/tmp/tmppabty97t.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphb5d_uiv.js:35:10)\n    at Object.<anonymous> (/tmp/tmphb5d_uiv.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tif(keys[i].toLowerCase()\
    \ != keys[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]]\
    \ == \"string\"){\n\t\t\tif(keys[i].toUpperCase() != keys[i]){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1dbv4by6.js:37:10)\n    at Object.<anonymous> (/tmp/tmp1dbv4by6.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpltqn1ti2.js:26:10)\n    at Object.<anonymous> (/tmp/tmpltqn1ti2.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(dict.length == 0){\n    return false;\n\
    \  }\n  for(var key in dict){\n    if(typeof dict[key] === \"string\"){\n    \
    \  if(dict[key].toLowerCase() != dict[key]){\n        return false;\n      }\n\
    \    }\n    else{\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_f9loofk.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_f9loofk.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() === keys[i].toLowerCase()){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]] === \"string\"){\n\t\t\tif(keys[i].toUpperCase()\
    \ === keys[i].toLowerCase()){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvxvm0912.js:36:10)\n    at Object.<anonymous> (/tmp/tmpvxvm0912.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbt7xiqks.js:26:10)\n    at Object.<anonymous> (/tmp/tmpbt7xiqks.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tif (Object.keys(dict).length == 0){\n\t\
    \treturn false;\n\t}\n\t\n\tfor (let key in dict){\n\t\t\n\t\tif (typeof dict[key]\
    \ === \"string\"){\n\t\t\tif (dict[key].toLowerCase() != dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\telse if (typeof dict[key] === \"number\"){\n\
    \t\t\tif (dict[key] != dict[key]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    else if (typeof dict[key] === \"object\"){\n\t\t\tif (!check_dict_case(dict[key])){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl0ns8a59.js:45:10)\n    at Object.<anonymous> (/tmp/tmpl0ns8a59.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n        }\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpg8pdyenc.js:27:10)\n    at Object.<anonymous> (/tmp/tmpg8pdyenc.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tfor(let j = 0; j < keys.length; j++){\n\t\t\t\tif(keys[j] === keys[i]){\n\t\
    \t\t\t\tif(dict[keys[i]].toLowerCase() !== dict[keys[j]]) return false;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]] === \"object\"){\n\t\t\t\
    let bool = check_dict_case(dict[keys[i]]);\n\t\t\tif(bool === false) return false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjq7cffa9.js:34:10)\n    at Object.<anonymous> (/tmp/tmpjq7cffa9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() !== dict[key]){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] !== parseInt(dict[key])){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1k3jzdl1.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1k3jzdl1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpswd70q1n.js:35:10)\n    at Object.<anonymous> (/tmp/tmpswd70q1n.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(check_dict_case(dict[key]) === false){\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp51l96ez7.js:34:10)\n    at Object.<anonymous> (/tmp/tmp51l96ez7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() !== keys[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[keys[i]] === \"string\"){\n\t\t\tif(keys[i].toUpperCase()\
    \ !== keys[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdy07wd2k.js:34:10)\n    at Object.<anonymous> (/tmp/tmpdy07wd2k.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4d17ku28.js:26:10)\n    at Object.<anonymous> (/tmp/tmp4d17ku28.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp9_fk1zbm.js:27:10)\n    at Object.<anonymous> (/tmp/tmp9_fk1zbm.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tlet lower = key.toLowerCase();\n\t\t\tlet upper = key.toUpperCase();\n\
    \t\t\tif(lower === upper || lower === upper){\n\t\t\t\treturn true;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"number\"){\n\t\t\tlet lower = key.toLowerCase();\n\
    \t\t\tlet upper = key.toUpperCase();\n\t\t\tif(lower === upper || lower === upper){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"boolean\"\
    ){\n\t\t\tlet lower = key.toLowerCase();\n\t\t\tlet upper = key.toUpperCase();\n\
    \t\t\tif(lower === upper || lower === upper){\n\t\t\t\treturn true;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcj0k_3jp.js:49:10)\n    at Object.<anonymous> (/tmp/tmpcj0k_3jp.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp63ijw8qy.js:35:10)\n    at Object.<anonymous> (/tmp/tmp63ijw8qy.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\t\t\t\t\
    return true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl8nzyt_a.js:43:10)\n    at Object.<anonymous> (/tmp/tmpl8nzyt_a.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp66pfsw_.js:26:10)\n    at Object.<anonymous> (/tmp/tmpp66pfsw_.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tlet value = dict[key];\n\
    \t\tif(typeof value === \"string\"){\n\t\t\tif(value.toLowerCase() === key.toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(value.toUpperCase() === key.toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"\
    ){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    \telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpv83c8zgy.js:40:10)\n    at Object.<anonymous> (/tmp/tmpv83c8zgy.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0hfwm0nz.js:27:10)\n    at Object.<anonymous> (/tmp/tmp0hfwm0nz.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpu7tqsdrj.js:27:10)\n    at Object.<anonymous> (/tmp/tmpu7tqsdrj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if(key.toUpperCase() === key){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp45svavar.js:35:10)\n    at Object.<anonymous> (/tmp/tmp45svavar.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmps_q2rz7p.js:26:10)\n    at Object.<anonymous> (/tmp/tmps_q2rz7p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() === keys[i]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    \telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqz14apyh.js:34:10)\n    at Object.<anonymous> (/tmp/tmpqz14apyh.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tlet value = dict[key];\n\
    \t\tif(typeof value === \"string\"){\n\t\t\tif(value.toLowerCase() === key.toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(value.toUpperCase() === key.toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"\
    ){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpg07npnx2.js:37:10)\n    at Object.<anonymous> (/tmp/tmpg07npnx2.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp17ntzzyd.js:27:10)\n    at Object.<anonymous> (/tmp/tmp17ntzzyd.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbnm9tjpm.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbnm9tjpm.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpitwo11sf.js:32:10)\n    at Object.<anonymous> (/tmp/tmpitwo11sf.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"\
    ){\n\t\t\tif(dict[key] === parseInt(dict[key])){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] ===\
    \ Boolean(dict[key])){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key]) === true){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"undefined\"\
    ){\n\t\t\t//do nothing\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmph7krsljp.js:47:10)\n    at Object.<anonymous> (/tmp/tmph7krsljp.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key] === \"\
    string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\t\
    \t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8k55oiga.js:37:10)\n    at Object.<anonymous> (/tmp/tmp8k55oiga.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tlet value = dict[key];\n\
    \t\tif(typeof value === \"string\"){\n\t\t\tif(value.toLowerCase() === value.toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"number\"\
    ){\n\t\t\tif(value === parseInt(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\
    }\n\t\telse if(typeof value === \"boolean\"){\n\t\t\tif(value === Boolean(value)){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"\
    ){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    \telse if(typeof value === \"symbol\"){\n\t\t\tif(value === Symbol(value)){\n\t\
    \t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"bigint\"){\n\
    \t\t\tif(value === BigInt(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\
    else if(typeof value === \"symbol\"){\n\t\t\tif(value === Symbol(value)){\n\t\t\
    \t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"bigint\"){\n\t\
    \t\tif(value === BigInt(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(typeof value === \"object\"){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\t\
    return true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"symbol\"){\n\t\t\t\
    if(value === Symbol(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ value === \"bigint\"){\n\t\t\tif(value === BigInt(value)){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"){\n\t\t\tif(check_dict_case(value)){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"symbol\"\
    ){\n\t\t\tif(value === Symbol(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\telse if(typeof value === \"bigint\"){\n\t\t\tif(value === BigInt(value)){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"\
    ){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    \telse if(typeof value === \"symbol\"){\n\t\t\tif(value === Symbol(value)){\n\t\
    \t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"bigint\"){\n\
    \t\t\tif(value === BigInt(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\
    else if(typeof value === \"object\"){\n\t\t\tif(check_dict_case(value)){\n\t\t\
    \t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"symbol\"){\n\t\
    \t\tif(value === Symbol(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(typeof value === \"bigint\"){\n\t\t\tif(value === BigInt(value)){\n\t\t\t\
    \treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"){\n\t\t\
    \tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse\
    \ if(\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn3i9x1z9.js:121\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tfor(let j = 0; j < keys.length; j++){\n\t\t\t\tif(keys[j] === keys[i]){\n\t\
    \t\t\t\tif(dict[keys[i]].toLowerCase() !== dict[keys[i]]){\n\t\t\t\t\t\treturn\
    \ false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]]\
    \ === \"number\"){\n\t\t\tfor(let j = 0; j < keys.length; j++){\n\t\t\t\tif(keys[j]\
    \ === keys[i]){\n\t\t\t\t\tif(dict[keys[i]] !== dict[keys[i]]){\n\t\t\t\t\t\t\
    return false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp25f0hz4a.js:41:10)\n    at Object.<anonymous> (/tmp/tmp25f0hz4a.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpg3i4zre5.js:26:10)\n    at Object.<anonymous> (/tmp/tmpg3i4zre5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7iq8dlnd.js:26:10)\n    at Object.<anonymous> (/tmp/tmp7iq8dlnd.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2eew1vi1.js:26:10)\n    at Object.<anonymous> (/tmp/tmp2eew1vi1.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tlet value = dict[key];\n\
    \t\tif(typeof value === \"string\"){\n\t\t\tif(value.toLowerCase() === key.toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if(value.toUpperCase() === key.toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"object\"\
    ){\n\t\t\tif(check_dict_case(value)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3ctj8mi_.js:37:10)\n    at Object.<anonymous> (/tmp/tmp3ctj8mi_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpoznqps3j.js:35:10)\n    at Object.<anonymous> (/tmp/tmpoznqps3j.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxd1phaq_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpxd1phaq_.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if(key.toUpperCase() === key){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl4wxpaam.js:37:10)\n    at Object.<anonymous> (/tmp/tmpl4wxpaam.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpd51n0t67.js:32:10)\n    at Object.<anonymous> (/tmp/tmpd51n0t67.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            else{\n               \
    \ return false;\n            }\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpj2n2s3t9.js:32:10)\n    at Object.<anonymous> (/tmp/tmpj2n2s3t9.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmph45cbypf.js:27:10)\n    at Object.<anonymous> (/tmp/tmph45cbypf.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tfor(let\
    \ j=0; j<keys.length; j++){\n\t\t\t\tif(typeof dict[keys[j]] == \"string\" &&\
    \ keys[i].toLowerCase() != keys[j].toLowerCase()){\n\t\t\t\t\treturn false;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]] == \"string\" && keys[i].toUpperCase()\
    \ != keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpep874lqq.js:32:10)\n    at Object.<anonymous> (/tmp/tmpep874lqq.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7mzdu6uj.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7mzdu6uj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpidxgi8k6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpidxgi8k6.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(Object.keys(dict).length == 0){\n    return\
    \ false;\n  }\n  for(var key in dict){\n    if(typeof dict[key] != \"string\"\
    ){\n      return false;\n    }\n  }\n  for(var key in dict){\n    if(dict[key].toUpperCase()\
    \ != dict[key]){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp6sojaah4.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6sojaah4.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpaz60j48v.js:35:10)\n    at Object.<anonymous> (/tmp/tmpaz60j48v.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ !== \"string\"){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi_sr6qs9.js:25:10)\n    at Object.<anonymous> (/tmp/tmpi_sr6qs9.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tlet k = keys[i];\n\t\tif(typeof dict[k] === \"string\"\
    ){\n\t\t\tif(k.toLowerCase() === k){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\
    \ if(k.toUpperCase() === k){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[k] === \"object\"){\n\t\t\tif(check_dict_case(dict[k]) === false){\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzcw6uq9q.js:37:10)\n    at Object.<anonymous> (/tmp/tmpzcw6uq9q.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\t\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8x16upcr.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8x16upcr.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmprp7xsisc.js:26:10)\n    at Object.<anonymous> (/tmp/tmprp7xsisc.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8_asmmxr.js:26:10)\n    at Object.<anonymous> (/tmp/tmp8_asmmxr.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpez8t_59i.js:32:10)\n    at Object.<anonymous> (/tmp/tmpez8t_59i.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_t3avmct.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_t3avmct.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(check_dict_case(dict[key]) === false){\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp9mu4at0p.js:34:10)\n    at Object.<anonymous> (/tmp/tmp9mu4at0p.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpm94cr0ui.js:27:10)\n    at Object.<anonymous> (/tmp/tmpm94cr0ui.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() !== dict[key]){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] !== parseInt(dict[key])){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"boolean\"){\n            if(dict[key] !== dict[key]){\n    \
    \            return false;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"object\"){\n            if(check_dict_case(dict[key]) === false){\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpoqzpo2pa.js:42:10)\n    at Object.<anonymous> (/tmp/tmpoqzpo2pa.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpw_ihy0p3.js:32:10)\n    at Object.<anonymous> (/tmp/tmpw_ihy0p3.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp66kz576r.js:32:10)\n    at Object.<anonymous> (/tmp/tmp66kz576r.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"\
    ){\n\t\t\tif(dict[key] === parseInt(dict[key])){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] ===\
    \ dict[key]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key]\
    \ === \"object\"){\n\t\t\tif(check_dict_case(dict[key])){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"undefined\"){\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpkejr4f_y.js:44:10)\n    at Object.<anonymous> (/tmp/tmpkejr4f_y.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"object\"\
    ){\n\t\t\tif(!check_dict_case(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyx59tbum.js:34:10)\n    at Object.<anonymous> (/tmp/tmpyx59tbum.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] !== \"string\"){\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp69m_ligi.js:25:10)\n    at Object.<anonymous> (/tmp/tmp69m_ligi.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] === dict[key]){\n     \
    \           return true;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"boolean\"){\n            if(dict[key] === dict[key]){\n              \
    \  return true;\n            }\n        }\n        else if(typeof dict[key] ===\
    \ \"object\"){\n            if(check_dict_case(dict[key])){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2z15_jz7.js:42:10)\n    at Object.<anonymous> (/tmp/tmp2z15_jz7.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    \ && dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\treturn true;\n\
    \t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyeicik5k.js:33:10)\n    at Object.<anonymous> (/tmp/tmpyeicik5k.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"number\"){\n\t\t\tif(dict[key] === dict[key]){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] === dict[key]){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])\
    \ === true){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp47hzipg9.js:57:10)\n    at Object.<anonymous> (/tmp/tmp47hzipg9.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfp4qs5h5.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfp4qs5h5.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    var i;\n\
    \    var flag = true;\n    for(i = 0; i < keys.length; i++){\n        if(typeof\
    \ dict[keys[i]] !== \"string\"){\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqwn9569c.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqwn9569c.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"){\n\
    \t\t\tif(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !==\
    \ Boolean(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(dict[key] !== null){\n\t\t\t\tif(!check_dict_case(dict[key])){\n\
    \t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy97sh9tj.js:44:10)\n    at Object.<anonymous> (/tmp/tmpy97sh9tj.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse if(key.toUpperCase() === key){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7cj0dl2p.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7cj0dl2p.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsfmjx5q5.js:26:10)\n    at Object.<anonymous> (/tmp/tmpsfmjx5q5.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] === \"string\"){\n\t\
    \t\tif(keys[i].toLowerCase() === keys[i].toLowerCase()){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq_c8bh9x.js:34:10)\n    at Object.<anonymous> (/tmp/tmpq_c8bh9x.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif((key.toLowerCase() === key) || (key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkyq943hd.js:27:10)\n    at Object.<anonymous> (/tmp/tmpkyq943hd.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmaexzxo2.js:26:10)\n    at Object.<anonymous> (/tmp/tmpmaexzxo2.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key] === \"\
    string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t\telse if(key.toUpperCase() === key){\n\t\t\t\treturn true;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])\
    \ === false){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0c6iyx8b.js:40:10)\n    at Object.<anonymous> (/tmp/tmp0c6iyx8b.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpuqwu8gj7.js:27:10)\n    at Object.<anonymous> (/tmp/tmpuqwu8gj7.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0i8hmdzf.js:26:10)\n    at Object.<anonymous> (/tmp/tmp0i8hmdzf.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"){\n\
    \t\t\tif(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !==\
    \ Boolean(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(!check_dict_case(dict[key])){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp50vns_ot.js:42:10)\n    at Object.<anonymous> (/tmp/tmp50vns_ot.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tif(keys[i].toLowerCase()\
    \ != keys[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]]\
    \ == \"string\"){\n\t\t\tif(keys[i].toUpperCase() != keys[i]){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7kaakmha.js:37:10)\n    at Object.<anonymous> (/tmp/tmp7kaakmha.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp01zasd65.js:32:10)\n    at Object.<anonymous> (/tmp/tmp01zasd65.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5c1ncltu.js:27:10)\n    at Object.<anonymous> (/tmp/tmp5c1ncltu.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    ){\n\t\t\tif(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8e6h7u80.js:35:10)\n    at Object.<anonymous> (/tmp/tmp8e6h7u80.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjm1hffel.js:35:10)\n    at Object.<anonymous> (/tmp/tmpjm1hffel.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tlet key = keys[i];\n\t\tlet value = dict[key];\n\t\
    \tif(typeof value === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof value === \"string\"){\n\
    \t\t\tif(!(key.toUpperCase() === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpid0l07qn.js:36:10)\n    at Object.<anonymous> (/tmp/tmpid0l07qn.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppi6pdwke.js:26:10)\n    at Object.<anonymous> (/tmp/tmppi6pdwke.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    for(var\
    \ i = 0; i < keys.length; i++){\n        if(typeof dict[keys[i]] === \"string\"\
    ){\n            if(keys[i].toLowerCase() === keys[i].toLowerCase()){\n       \
    \         return true;\n            }\n        }\n        else if(typeof dict[keys[i]]\
    \ === \"string\"){\n            if(keys[i].toUpperCase() === keys[i].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa9j0opch.js:36:10)\n    at Object.<anonymous> (/tmp/tmpa9j0opch.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpe0wy12in.js:27:10)\n    at Object.<anonymous> (/tmp/tmpe0wy12in.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] === dict[key]){\n     \
    \           return true;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"boolean\"){\n            if(dict[key] === dict[key]){\n              \
    \  return true;\n            }\n        }\n        else if(typeof dict[key] ===\
    \ \"object\"){\n            if(check_dict_case(dict[key])){\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo6okb5a0.js:42:10)\n    at Object.<anonymous> (/tmp/tmpo6okb5a0.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmptzl3conm.js:26:10)\n    at Object.<anonymous> (/tmp/tmptzl3conm.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n        if(typeof dict[key] === \"object\"){\n            if(check_dict_case(dict[key])\
    \ === false){\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcuwrguo2.js:32:10)\n    at Object.<anonymous> (/tmp/tmpcuwrguo2.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(keys[i].toLowerCase()\
    \ !== keys[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9qfh_69v.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9qfh_69v.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n        else{\n     \
    \       return false;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp55j692o4.js:35:10)\n    at Object.<anonymous> (/tmp/tmp55j692o4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8u56ikyv.js:26:10)\n    at Object.<anonymous> (/tmp/tmp8u56ikyv.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    \ && dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe1saj0nq.js:30:10)\n    at Object.<anonymous> (/tmp/tmpe1saj0nq.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var flag = true;\n    for(var key in dict){\n\
    \        if(typeof dict[key] === \"string\"){\n            flag = flag && key.toLowerCase()\
    \ === key;\n            flag = flag && key.toUpperCase() === key;\n        }\n\
    \    }\n    return flag;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpbxahgby9.js:26:10)\n    at Object.<anonymous> (/tmp/tmpbxahgby9.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphw8kljdb.js:26:10)\n    at Object.<anonymous> (/tmp/tmphw8kljdb.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    var keys = Object.keys(dict);\n    var flag\
    \ = true;\n    for(var i=0; i<keys.length; i++){\n        if(typeof dict[keys[i]]\
    \ !== \"string\"){\n            flag = false;\n        }\n    }\n    return flag;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpytgd82fr.js:27:10)\n    at Object.<anonymous> (/tmp/tmpytgd82fr.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() !== dict[key]){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] !== parseInt(dict[key])){\n\
    \                return false;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"boolean\"){\n            if(dict[key] !== Boolean(dict[key])){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy3vq_wc6.js:37:10)\n    at Object.<anonymous> (/tmp/tmpy3vq_wc6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"\
    \ && dict[key].toUpperCase() === dict[key].toUpperCase()){\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcgl5ssec.js:30:10)\n    at Object.<anonymous> (/tmp/tmpcgl5ssec.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp55f5vn4_.js:26:10)\n    at Object.<anonymous> (/tmp/tmp55f5vn4_.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  for(var key in dict){\n    if(typeof dict[key]\
    \ === \"string\"){\n      if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpha8psqey.js:26:10)\n    at Object.<anonymous> (/tmp/tmpha8psqey.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"number\"){\n            if(dict[key] === dict[key]){\n     \
    \           return true;\n            }\n        }\n        else if(typeof dict[key]\
    \ === \"boolean\"){\n            if(dict[key] === dict[key]){\n              \
    \  return true;\n            }\n        }\n        else if(typeof dict[key] ===\
    \ \"object\"){\n            if(check_dict_case(dict[key]) === false){\n      \
    \          return false;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpah_yjy3g.js:42:10)\n    at Object.<anonymous> (/tmp/tmpah_yjy3g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n  if(dict.length == 0){\n    return false;\n\
    \  }\n  for(var key in dict){\n    if(typeof dict[key] != \"string\"){\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6psf651h.js:28:10)\n    at Object.<anonymous> (/tmp/tmp6psf651h.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \                return true;\n            }\n        }\n        else if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toUpperCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc58zl5ih.js:32:10)\n    at Object.<anonymous> (/tmp/tmpc58zl5ih.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpavkuu770.js:26:10)\n    at Object.<anonymous> (/tmp/tmpavkuu770.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tlet key = keys[i];\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(key.toLowerCase() === key){\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm3mzmf94.js:35:10)\n    at Object.<anonymous> (/tmp/tmpm3mzmf94.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(!(key.toLowerCase() === key)){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"string\"){\n\t\t\tif(!(key.toUpperCase()\
    \ === key)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdbovahfm.js:33:10)\n    at Object.<anonymous> (/tmp/tmpdbovahfm.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpebm3lfuq.js:27:10)\n    at Object.<anonymous> (/tmp/tmpebm3lfuq.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] !== \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe2k3c9n_.js:26:10)\n    at Object.<anonymous> (/tmp/tmpe2k3c9n_.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n    for(var key in dict){\n        if(typeof\
    \ dict[key] === \"string\"){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n\
    \                continue;\n            }\n            else{\n               \
    \ return false;\n            }\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpzrt554be.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzrt554be.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tlet isString\
    \ = true;\n\tfor(let i = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]]\
    \ !== \"string\"){\n\t\t\tisString = false;\n\t\t}\n\t}\n\treturn isString;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpceehbyu3.js:27:10)\n    at Object.<anonymous> (/tmp/tmpceehbyu3.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ != \"string\"){\n\t\t\treturn false;\n\t\t}\n\t\tif(key.toLowerCase() != key){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq8je3_xk.js:29:10)\n    at Object.<anonymous> (/tmp/tmpq8je3_xk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() === dict[key].toLowerCase()){\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t\telse if(typeof dict[key] === \"object\"){\n\t\t\tif(check_dict_case(dict[key])\
    \ === false){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppgsjqdda.js:38:10)\n    at Object.<anonymous> (/tmp/tmppgsjqdda.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i\
    \ = 0; i < keys.length; i++){\n\t\tif(typeof dict[keys[i]] != \"string\"){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4674h2_y.js:26:10)\n    at Object.<anonymous> (/tmp/tmp4674h2_y.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tlet keys = Object.keys(dict);\n\tfor(let i=0;\
    \ i<keys.length; i++){\n\t\tif(typeof dict[keys[i]] == \"string\"){\n\t\t\tif(!(keys[i]\
    \ in dict)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[keys[i]]\
    \ == \"number\"){\n\t\t\tif(!(keys[i] in dict)){\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf98qeuns.js:36:10)\n    at Object.<anonymous> (/tmp/tmpf98qeuns.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a dictionary, return True if all keys are strings in lower \n\
    // case or all keys are strings in upper case, else return False.\n// The function\
    \ should return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    function check_dict_case(dict){\n\tfor(var key in dict){\n\t\tif(typeof dict[key]\
    \ === \"string\"){\n\t\t\tif(dict[key].toLowerCase() !== dict[key]){\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof dict[key] === \"number\"){\n\
    \t\t\tif(dict[key] !== parseInt(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\telse if(typeof dict[key] === \"boolean\"){\n\t\t\tif(dict[key] !==\
    \ Boolean(dict[key])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(typeof\
    \ dict[key] === \"object\"){\n\t\t\tif(dict[key] !== null){\n\t\t\t\tif(check_dict_case(dict[key])\
    \ === false){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4v3ud730.js:44:10)\n    at Object.<anonymous> (/tmp/tmp4v3ud730.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
