{
  "name": "mbpp_641_is_nonagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth nonagonal number.\n    def isNonagonal(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return 0\n            i += 1\n        }\n        return 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(8 * n + 1) + 1) / 2\n        if (r == round(r)) n else 0",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var x = 1\n        var y = 1\n        var i = 1\n        while (i < n) {\n            x += 1\n            y += 1\n            i += 1\n            while (x > 1) {\n                x -= 1\n                y += 1\n                i += 1\n                if (i == n) return x * y\n            }\n            while (y > 1) {\n                x += 1\n                y -= 1\n                i += 1\n                if (i == n) return x * y\n            }\n        }\n        return x * y",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) n else 0",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt)\n            x.toInt\n        else\n            -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 8 * n) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = (i * (i + 1)) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        return -1",
    "        val sqrt = sqrt(1 + 8 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt + 1) / 2\n            if (x == x.toInt) return x\n        }\n        return 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toLong) x else -1",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == floor(x)) n else 0",
    "        val k = (sqrt(8 * n + 1) - 1) / 2\n        if (k == round(k)) k else -1",
    "        var x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return 0\n            i += 1\n        }\n        return 0",
    "        var i = 0\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        return -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val nth = (sqrt(8 * n + 1) + 1) / 2\n        if (nth == round(nth)) n else -1",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val s = sqrt(8 * n + 1)\n        if (s == s.toInt) {\n            val k = s.toInt\n            if (k % 2 == 0) {\n                val m = k / 2\n                m * (m + 1)\n            } else {\n                val m = (k + 1) / 2\n                m * m\n            }\n        } else {\n            0\n        }",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) n else -1",
    "        var i = 1\n        while (i * (i + 1) / 2 < n) i += 1\n        i * (i + 1) / 2",
    "        val m = (sqrt(8 * n + 1) + 1) / 2\n        if (m == floor(m)) m else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt)\n            x\n        else\n            -1",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val k = (sqrt(1 + 8 * n) - 1) / 2\n        if (k == floor(k)) k else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) return x.toInt\n        else return -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val p = (sqrt(8 * n + 1) - 1) / 2\n        if (p == floor(p)) n else 0",
    "        var i = 1\n        while (true) {\n            val x = (i * (i + 1)) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m % 1 == 0) m else -1",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 8 * n) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) n else 0",
    "        var i = 1\n        var s = 1\n        while (s < n) {\n            i += 1\n            s += i\n        }\n        if (s == n) i else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) return a.toInt\n        return -1",
    "        var x = 1\n        while (true) {\n            val y = (x * (x + 1)) / 2\n            if (y == n) return x\n            if (y > n) return 0\n            x += 1\n        }\n        return 0",
    "        val root = (sqrt(1 + 8 * n) - 1) / 2\n        if (root == root.toInt) root.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val r = (sqrt(8 * n + 1) + 1) / 2\n        if (r == r.toInt)\n            r.toInt\n        else\n            0",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return 0\n            i += 1\n        }\n        return 0",
    "        var x = 1\n        while (true) {\n            val y = (x * (3 * x - 1)) / 2\n            if (y == n) return x\n            if (y > n) return -1\n            x += 1\n        }\n        -1",
    "        var x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var x = 1\n        while (true) {\n            val y = x * (3 * x - 1) / 2\n            if (y >= n) return y\n            x += 1\n        }\n        return 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val k = (sqrt(8 * n + 1) - 1) / 2\n        if (k == round(k)) k else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) n else 0",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val root = sqrt(1 + 8 * n)\n        if (root == root.toInt) {\n            val r = root.toInt\n            if (r % 2 == 0) {\n                val k = r / 2\n                return k * (3 * k - 1) / 2\n            }\n        }\n        return 0",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return 0\n            i += 1\n        }\n        return 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val k = (sqrt(1 + 8 * n) - 1) / 2\n        if (k == floor(k)) k else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = (i * (i + 1)) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        val n1 = (sqrt(8 * n + 1) - 1) / 2\n        if (n1 == n1.toInt) n else -1",
    "        var i = 1\n        var sum = 0\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        return -1",
    "        var i = 1\n        var j = 1\n        while (true) {\n            if (i * (3 * i - 1) / 2 == n) return j\n            if (i * (3 * i - 1) / 2 > n) {\n                i = 1\n                j += 1\n            } else i += 1\n        }\n        return 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        var k = 1\n        while (true) {\n            val nn = (k * (3 * k - 1)) / 2\n            if (nn == n) return k\n            if (nn > n) return 0\n            k += 1\n        }\n        return 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) nth.toInt\n        else -1",
    "        var x = 1\n        var y = 1\n        while (x * (3 * x - 1) / 2 < n) x += 1\n        while ((x * (3 * x - 1) / 2 - y * (3 * y - 1) / 2) != n) y += 1\n        return x * (3 * x - 1) / 2",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == floor(nth)) nth else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(1 + 8 * n) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = (i * (i + 1)) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        var x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toLong) x.toLong else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == m.toInt) m.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m\n        else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        val r = m * (m + 1) / 2\n        if (r == n) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(8 * n + 1) - 1) / 2\n        if (r == floor(r)) r else -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val sqrt = sqrt(1 + 8 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt - 1) / 2\n            if (x == x.toInt) x.toInt else -1\n        }\n        else -1",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        var i = 1\n        var sum = 0\n        while (sum < n) {\n            sum += i\n            i += 1\n        }\n        if (sum == n) i - 1 else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        var k = 1\n        while (true) {\n            val x = k * (3 * k - 1) / 2\n            if (x == n) return k\n            if (x > n) return 0\n            k += 1\n        }\n        return 0",
    "        var x = 1\n        var y = 1\n        var i = 1\n        while (i < n) {\n            x += 1\n            y += 1\n            i += 1\n            while (x > 1) {\n                x -= 1\n                y += 1\n                i += 1\n                if (i == n) return x * y\n            }\n            while (y > 1) {\n                x += 1\n                y -= 1\n                i += 1\n                if (i == n) return x * y\n            }\n        }\n        return x * y",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val r = (sqrt(1 + 8 * n) - 1) / 2\n        if (r == r.toInt) r.toInt else -1",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 8 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) return x.toInt\n        return -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) n else 0",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            else if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var x = 1\n        while (true) {\n            val y = x * (3 * x - 1) / 2\n            if (y == n) return x\n            if (y > n) return -1\n            x += 1\n        }\n        -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) {\n            m\n        } else {\n            -1\n        }",
    "        var i = 1\n        while (true) {\n            val m = i * (3 * i - 1) / 2\n            if (m == n) return i\n            if (m > n) return -1\n            i += 1\n        }\n        return -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var k = 1\n        while (true) {\n            val x = k * (3 * k - 1) / 2\n            if (x == n) return k\n            if (x > n) return -1\n            k += 1\n        }\n        return -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == round(m)) m else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        val a = (sqrt(1 + 8 * n) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m % 1 == 0) m else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == floor(x)) x else -1",
    "        val nth = (sqrt(8 * n + 1) - 1) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) return x\n        return -1",
    "        val nth = ceil((sqrt(8 * n + 1) - 1) / 2).toLong\n        val first = nth * (nth - 1) / 2 + 1\n        val diff = n - first\n        nth + diff",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        var x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) return x.toInt\n        else return -1",
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 2\n        if (x == x.toInt) x.toInt else 0",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        var k = 1\n        while (true) {\n            val x = k * (3 * k - 1) / 2\n            if (x == n) return k\n            else if (x > n) return -1\n            k += 1\n        }\n        -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val sqrt = sqrt(1 + 8 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt - 1) / 2\n            if (x == x.toInt) x.toLong\n            else -1\n        }\n        else -1",
    "        var x = 1\n        var y = 1\n        while (true) {\n            val z = x + y\n            if (z == n) return x\n            if (z > n) return -1\n            x = y\n            y = z\n        }\n        return -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val s = sqrt(2 * n)\n        if (s == floor(s))\n            return s * (s + 1) / 2\n        return -1",
    "        val k = (sqrt(1 + 8 * n) - 1) / 2\n        if (k == floor(k)) k else -1"
  ]
}