{
  "name": "mbpp_641_is_nonagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth nonagonal number.\n    def isNonagonal(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        while (true) {\n            val x = i * (3 * i - 1) / 2\n            if (x == n) return i\n            if (x > n) return 0\n            i += 1\n        }\n        return 0",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(8 * n + 1) + 1) / 2\n        if (r == round(r)) n else 0",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        var x = 1\n        var y = 1\n        var i = 1\n        while (i < n) {\n            x += 1\n            y += 1\n            i += 1\n            while (x > 1) {\n                x -= 1\n                y += 1\n                i += 1\n                if (i == n) return x * y\n            }\n            while (y > 1) {\n                x += 1\n                y -= 1\n                i += 1\n                if (i == n) return x * y\n            }\n        }\n        return x * y",
    "        val nth = (sqrt(1 + 8 * n) - 1) / 2\n        if (nth == nth.toInt) n else 0",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 8 * n) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt)\n            x.toInt\n        else\n            -1",
    "        val nth = (-1 + sqrt(1 + 8 * n)) / 2\n        if (nth == nth.toInt) nth.toInt else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 8 * n) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(8 * n + 1) - 1) / 2\n        if (a == a.toInt) a.toInt else -1",
    "        var i = 1\n        while (true) {\n            val x = (i * (i + 1)) / 2\n            if (x == n) return i\n            if (x > n) return -1\n            i += 1\n        }\n        return -1",
    "        val sqrt = sqrt(1 + 8 * n)\n        if (sqrt == sqrt.toInt) {\n            val x = (sqrt + 1) / 2\n            if (x == x.toInt) return x\n        }\n        return 0",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val m = (sqrt(8 * n + 1) - 1) / 2\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(8 * n + 1) - 1) / 2\n        if (x == x.toInt) n else 0"
  ]
}