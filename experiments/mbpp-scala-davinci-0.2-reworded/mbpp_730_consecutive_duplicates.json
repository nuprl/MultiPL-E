{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    def consecutiveDuplicates(nums : Any) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(consecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));\n    assert(consecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(\"a\", \"b\", \"c\", \"d\"))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((Any(\"a\", \"b\", \"c\", \"d\", \"a\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => List(h)\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = List[Any]()\n        var prev : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != prev) {\n                result = result :+ num\n                prev = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return List()\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) result = result ::: List(list(i))\n            }\n            return result\n        }\n        else return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums == Nil) Nil\n        else {\n            val head = nums.asInstanceOf[List[Any]].head\n            val tail = nums.asInstanceOf[List[Any]].tail\n            if (tail == Nil) List(head)\n            else if (head == tail.head) consecutiveDuplicates(tail)\n            else head :: consecutiveDuplicates(tail)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => h :: Nil\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            val result = new ListBuffer[Any]\n            result += list(0)\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) {\n                    result += list(i)\n                }\n            }\n            return result.toList\n        }\n        else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        def consecutiveDuplicatesHelper(nums : Any, acc : Any) : Any = {\n            nums match {\n                case Nil => acc\n                case x :: xs => consecutiveDuplicatesHelper(xs.dropWhile(_ == x), acc :+ x)\n            }\n        }\n        consecutiveDuplicatesHelper(nums, List())",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return List()\n            if (list.length == 1) return list\n            var result = ListBuffer[Any]()\n            var prev = list(0)\n            result += prev\n            for (i <- 1 until list.length) {\n                if (list(i) != prev) {\n                    result += list(i)\n                    prev = list(i)\n                }\n            }\n            return result.toList\n        }\n        else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => List(h)\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.isEmpty) List()\n            else {\n                val head = list.head\n                val tail = list.tail\n                if (tail.isEmpty) List(head)\n                else {\n                    if (head == tail.head) consecutiveDuplicates(tail)\n                    else head :: consecutiveDuplicates(tail)\n                }\n            }\n        }\n        else {\n            val str = nums.asInstanceOf[String]\n            if (str.isEmpty) \"\"\n            else {\n                val head = str.head\n                val tail = str.tail\n                if (tail.isEmpty) head.toString\n                else {\n                    if (head == tail.head) consecutiveDuplicates(tail)\n                    else head.toString + consecutiveDuplicates(tail)\n                }\n            }\n        }",
    "        var result = ListBuffer[Any]()\n        var last = nums.asInstanceOf[List[Any]].head\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (i != last) {\n                result += i\n                last = i\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => h :: Nil\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: tail => h :: consecutiveDuplicates(tail.dropWhile(_ == h))\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val numsList = nums.asInstanceOf[List[Any]]\n            if (numsList.length == 0) {\n                return List()\n            }\n            val head = numsList.head\n            val tail = numsList.tail\n            if (tail.length == 0) {\n                return List(head)\n            }\n            if (head == tail.head) {\n                return consecutiveDuplicates(tail)\n            }\n            return List(head) ::: consecutiveDuplicates(tail).asInstanceOf[List[Any]]\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.isEmpty) {\n                return List()\n            }\n            var result = List(list.head)\n            for (i <- 1 until list.length) {\n                if (list(i) != result.last) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = ListBuffer[Any]()\n        var last = nums.asInstanceOf[List[Any]].head\n        for (x <- nums.asInstanceOf[List[Any]]) {\n            if (x != last) {\n                result += x\n                last = x\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: t => h :: consecutiveDuplicates(t.dropWhile(_ == h))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: t => h :: consecutiveDuplicates(t.dropWhile(_ == h))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return List()\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != result.last) result = result :+ list(i)\n            }\n            return result\n        }\n        else if (nums.isInstanceOf[String]) {\n            val str = nums.asInstanceOf[String]\n            if (str.length == 0) return \"\"\n            var result = str(0).toString\n            for (i <- 1 until str.length) {\n                if (str(i) != result.last) result = result + str(i)\n            }\n            return result\n        }\n        else return nums",
    "        var result = List[Any]()\n        var last : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result = result :+ num\n                last = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(y => y == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = List[Any]()\n        var last : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result = result :+ num\n                last = num\n            }\n        }\n        result",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return List()\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) result = result :+ list(i)\n            }\n            return result\n        }\n        else if (nums.isInstanceOf[String]) {\n            val str = nums.asInstanceOf[String]\n            if (str.length == 0) return \"\"\n            var result = \"\" + str(0)\n            for (i <- 1 until str.length) {\n                if (str(i) != str(i - 1)) result += str(i)\n            }\n            return result\n        }\n        else return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        val list = nums.asInstanceOf[List[Any]]\n        var result = ListBuffer[Any]()\n        var previous = list(0)\n        result += previous\n        for (i <- 1 until list.length) {\n            if (list(i) != previous) {\n                result += list(i)\n                previous = list(i)\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = List[Any]()\n        var last = 0\n        for (i <- 0 until nums.asInstanceOf[List[Any]].length) {\n            if (nums.asInstanceOf[List[Any]].apply(i) != last) {\n                result = result :+ nums.asInstanceOf[List[Any]].apply(i)\n                last = nums.asInstanceOf[List[Any]].apply(i)\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(y => y == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return List()\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) result = result :+ list(i)\n            }\n            return result\n        }\n        else if (nums.isInstanceOf[String]) {\n            val str = nums.asInstanceOf[String]\n            if (str.length == 0) return \"\"\n            var result = str(0).toString\n            for (i <- 1 until str.length) {\n                if (str(i) != str(i - 1)) result += str(i)\n            }\n            return result\n        }\n        else return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            val head = list.head\n            val tail = list.tail\n            if (tail.length == 0) {\n                return List(head)\n            }\n            if (head == tail.head) {\n                return consecutiveDuplicates(tail)\n            }\n            return List(head) ::: consecutiveDuplicates(tail).asInstanceOf[List[Any]]\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => h :: Nil\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = new ListBuffer[Any]\n        var prev = nums.asInstanceOf[List[Any]].head\n        result += prev\n        for (i <- 1 until nums.asInstanceOf[List[Any]].length) {\n            if (nums.asInstanceOf[List[Any]].apply(i) != prev) {\n                result += nums.asInstanceOf[List[Any]].apply(i)\n                prev = nums.asInstanceOf[List[Any]].apply(i)\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        var result = ListBuffer[Any]()\n        var last : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result += num\n                last = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => List(h)\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }"
  ]
}