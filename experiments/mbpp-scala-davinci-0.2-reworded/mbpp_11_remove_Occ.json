{
  "name": "mbpp_11_remove_Occ",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1, s.length)\n        s1 + s2 + s3",
    "        var str = s.toList\n        var chr = ch.toList\n        var i = 0\n        while(i < str.length) {\n            if(str(i) == chr(0)) {\n                str = str.patch(i, Nil, 1)\n                i -= 1\n            }\n            i += 1\n        }\n        str.mkString",
    "        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) s.tail.reverse.tail.reverse\n        else s.head + removeOcc(s.tail, ch)",
    "        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString",
    "        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str",
    "        var res = s\n        if (s.contains(ch)) {\n            res = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n            if (res.contains(ch)) res = res.substring(0, res.lastIndexOf(ch)) + res.substring(res.lastIndexOf(ch) + 1)\n        }\n        res",
    "        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str",
    "        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1)\n        s1 + s2 + s3",
    "        var str = s.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str",
    "        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1)\n        s1 + s2 + s3",
    "        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var str = s\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ch(0)) {\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n            i += 1\n        }\n        i = str.length - 1\n        while (i >= 0) {\n            if (str(i) == ch(0)) {\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            i -= 1\n        }\n        str",
    "        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) s.tail.reverse.tail.reverse\n        else s.head + removeOcc(s.tail, ch)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) {\n            s\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }"
  ]
}