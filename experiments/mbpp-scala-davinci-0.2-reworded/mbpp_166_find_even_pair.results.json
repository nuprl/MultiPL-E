{
  "name": "mbpp_166_find_even_pair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvnigov0a.scala:11)\n\tat Problem.main(tmpvnigov0a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        val evenOddPairs = evens.map(x => odds.count(_ == x)).sum\n        evenPairs + oddPairs + evenOddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5n7_b6v.scala:14)\n\tat Problem.main(tmpa5n7_b6v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.map(e => odds.count(_ => true)).sum + evens.count(_ => true) * (evens.count(_ => true) - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_xemyxx7.scala:11)\n\tat Problem.main(tmp_xemyxx7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3v44ok_n.scala:13)\n\tat Problem.main(tmp3v44ok_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt76ysl_t.scala:11)\n\tat Problem.main(tmpt76ysl_t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxt65kjhd.scala:13)\n\tat Problem.main(tmpxt65kjhd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * odd.length + even.length * (even.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3h0rnd8s.scala:11)\n\tat Problem.main(tmp3h0rnd8s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- A) {\n            if (map.contains(i)) {\n                count += map(i)\n            }\n            if (map.contains(i ^ 1)) {\n                map(i ^ 1) += 1\n            } else {\n                map(i ^ 1) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhjwiowk.scala:21)\n\tat Problem.main(tmplhjwiowk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (x <- A) {\n            if (x % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (x <- A) {\n            if (x % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1venz8rn.scala:15)\n\tat Problem.main(tmp1venz8rn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        evens.map(x => odds.count(_ => true)).sum + evens.count(_ => true)\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphg01nvrl.scala:11)\n\tat Problem.main(tmphg01nvrl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.map(_ => even.length - 1).sum + odd.map(_ => odd.length - 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqcjcaatn.scala:11)\n\tat Problem.main(tmpqcjcaatn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp5vmdsyy.scala:13)\n\tat Problem.main(tmpp5vmdsyy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenPairs = 0L\n        var oddPairs = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) evenPairs += i + 1\n            else oddPairs += i + 1\n        }\n        evenPairs * (A.length - evenPairs) + oddPairs * (A.length - oddPairs)\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ijj3odm.scala:15)\n\tat Problem.main(tmp8ijj3odm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        evens.map(even => odds.count(_ % 2 == even % 2)).sum\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphib9flye.scala:11)\n\tat Problem.main(tmphib9flye.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- A) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpicf39zwt.scala:19)\n\tat Problem.main(tmpicf39zwt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(even => odds.count(_ % 2 == even % 2)).sum\n        val oddPairs = odds.map(odd => evens.count(_ % 2 == odd % 2)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp30kcdpfw.scala:13)\n\tat Problem.main(tmp30kcdpfw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 != 0)\n        even.map(_ => even.length - 1).sum + odd.map(_ => odd.length - 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122767,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplyrjn2hm.scala:11)\n\tat Problem.main(tmplyrjn2hm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evens = 0L\n        var odds = 0L\n        for (i <- A) {\n            if (i % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * (evens - 1) / 2 + odds * (odds - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6e9d9gn.scala:13)\n\tat Problem.main(tmpw6e9d9gn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(x => evens.filter(_ <= x).length).sum\n        val oddPairs = odds.map(x => odds.filter(_ <= x).length).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj60aixov.scala:13)\n\tat Problem.main(tmpj60aixov.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * odd.length + even.length * (even.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp978lysi0.scala:11)\n\tat Problem.main(tmp978lysi0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.length * odd.length + even.length * (even.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmlxxqdi5.scala:11)\n\tat Problem.main(tmpmlxxqdi5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * odd.length\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpev1spgji.scala:11)\n\tat Problem.main(tmpev1spgji.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenCount = even.size\n        val oddCount = odd.size\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd + even * (even - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpff7mkjr_.scala:15)\n\tat Problem.main(tmpff7mkjr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6d6ug0_.scala:15)\n\tat Problem.main(tmpw6d6ug0_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evens = 0L\n        var odds = 0L\n        for (i <- A) {\n            if (i % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * (evens - 1) / 2 + odds * (odds - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.size * (even.size - 1) / 2\n        val oddPairs = odd.size * (odd.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenPairCount = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairCount += 1\n            }\n        }\n        evenPairCount\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => (x % 2 == 0))\n        val odd = A.filter(x => (x % 2 == 1))\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        evens.map(x => odds.count(_ => true)).sum + evens.count(_ => true) * (evens.count(_ => true) - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf9o1lmks.scala:11)\n\tat Problem.main(tmpf9o1lmks.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.map(x => even.filter(y => (x ^ y) % 2 == 0).length).sum\n        val oddPairs = odd.map(x => odd.filter(y => (x ^ y) % 2 == 0).length).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4_wvhjgs.scala:13)\n\tat Problem.main(tmp4_wvhjgs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(even => odds.count(_ % 2 == even % 2)).sum\n        val oddPairs = odds.map(odd => evens.count(_ % 2 == odd % 2)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpchc4gjui.scala:13)\n\tat Problem.main(tmpchc4gjui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        val evenOddPairs = evens.map(x => odds.count(_ == x)).sum\n        evenPairs + oddPairs + evenOddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5n7_b6v.scala:14)\n\tat Problem.main(tmpa5n7_b6v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * odd.length + even.length * (even.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3h0rnd8s.scala:11)\n\tat Problem.main(tmp3h0rnd8s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu695d0ir.scala:11)\n\tat Problem.main(tmpu695d0ir.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (x <- A) {\n            if (x % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n        val oddPairs = even.length * odd.length\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbhfq7b1y.scala:13)\n\tat Problem.main(tmpbhfq7b1y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp5vmdsyy.scala:13)\n\tat Problem.main(tmpp5vmdsyy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (x <- A) {\n            if (map.contains(x)) {\n                count += map(x)\n            }\n            if (x % 2 == 0) {\n                map(x) = map.getOrElse(x, 0L) + 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122779,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr7lzu5n7.scala:19)\n\tat Problem.main(tmpr7lzu5n7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw18661dw.scala:15)\n\tat Problem.main(tmpw18661dw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => (x & 1) == 0)\n        val odd = A.filter(x => (x & 1) == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        val evenOddPairs = evens.map(x => odds.count(_ == x)).sum\n        evenPairs + oddPairs + evenOddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5n7_b6v.scala:14)\n\tat Problem.main(tmpa5n7_b6v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evens = 0L\n        var odds = 0L\n        for (i <- A) {\n            if (i % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * (evens - 1) / 2 + odds * (odds - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu695d0ir.scala:11)\n\tat Problem.main(tmpu695d0ir.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        val oddEvenPairs = evens.map(x => odds.count(_ == x)).sum\n        evenPairs + oddPairs + oddEvenPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpruxui7f1.scala:14)\n\tat Problem.main(tmpruxui7f1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu695d0ir.scala:11)\n\tat Problem.main(tmpu695d0ir.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6e9d9gn.scala:13)\n\tat Problem.main(tmpw6e9d9gn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3v44ok_n.scala:13)\n\tat Problem.main(tmp3v44ok_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPair = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPair = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPair + oddPair\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp025u5c54.scala:13)\n\tat Problem.main(tmp025u5c54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * odd.length + even.length * (even.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3h0rnd8s.scala:11)\n\tat Problem.main(tmp3h0rnd8s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6e9d9gn.scala:13)\n\tat Problem.main(tmpw6e9d9gn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evenCount = A.count(x => x % 2 == 0)\n        val oddCount = A.length - evenCount\n        evenCount * oddCount\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf7dsn75x.scala:11)\n\tat Problem.main(tmpf7dsn75x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0).size\n        val odd = A.size - even\n        even * even + odd * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk398p7c_.scala:11)\n\tat Problem.main(tmpk398p7c_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evens = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evens += 1\n            }\n        }\n        evens\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt76ysl_t.scala:11)\n\tat Problem.main(tmpt76ysl_t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs / 2 + oddPairs / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjkex2j7c.scala:13)\n\tat Problem.main(tmpjkex2j7c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val count = new HashMap[Long, Long]\n        for (x <- A) {\n            if (count.contains(x)) count(x) += 1\n            else count(x) = 1\n        }\n        var result = 0L\n        for (x <- count.keys) {\n            val y = x ^ 1\n            if (count.contains(y)) result += count(x) * count(y)\n        }\n        result / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt3c0gxxs.scala:19)\n\tat Problem.main(tmpt3c0gxxs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        return evens.size * odds.size + evens.size * (evens.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm1xsic0b.scala:11)\n\tat Problem.main(tmpm1xsic0b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evens = 0L\n        var odds = 0L\n        for (x <- A) {\n            if (x % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * (evens - 1) / 2 + odds * (odds - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.length * (A.length - evens.length) + odds.length * (odds.length - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuofjeju_.scala:11)\n\tat Problem.main(tmpuofjeju_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var evenCount = 0L\n        var oddCount = 0L\n        for (i <- A) {\n            if (i % 2 == 0) evenCount += 1\n            else oddCount += 1\n        }\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => (x & 1) == 0)\n        val odd = A.filter(x => (x & 1) == 1)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_v6lpn6w.scala:13)\n\tat Problem.main(tmp_v6lpn6w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3v44ok_n.scala:13)\n\tat Problem.main(tmp3v44ok_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (x <- A) {\n            if (x % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1venz8rn.scala:15)\n\tat Problem.main(tmp1venz8rn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0).size\n        val odd = A.size - even\n        return even * (even - 1) / 2 + odd * (odd - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf0wq59eu.scala:13)\n\tat Problem.main(tmpf0wq59eu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2 + evens.length\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2 + odds.length\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptpw_ssql.scala:13)\n\tat Problem.main(tmptpw_ssql.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122787,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * odd.length\n    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666122778,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpev1spgji.scala:11)\n\tat Problem.main(tmpev1spgji.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}