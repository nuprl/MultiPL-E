{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        val sum = new Array[Long](size.toInt)\n        sum(0) = a(0)\n        var max = a(0)\n        for (i <- 1 until size.toInt) {\n            sum(i) = max(sum(i - 1) + a(i), a(i))\n            max = max(max, sum(i))\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi69b35lq.scala:10:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            sum(i) = max(sum(i - \u001b[31m1\u001b[0m) + a(i), a(i))\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpi69b35lq.scala:11:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            max = max(max, sum(i))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  \u001b[33mvariable\u001b[0m \u001b[35mmax\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0L\n        var max_ending_here = 0L\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzt8nq4iu.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i).toInt\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk3ue_5yb.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0o7jhyb5.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n            if (max_ending_here < 0) max_ending_here = 0\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_m_sv_4.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_m_sv_4.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt).toInt\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplx_c5dih.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        val n = a.length\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to n - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = Long.MinValue\n        var max_ending_here : Long = 0\n        var start : Long = 0\n        var end : Long = 0\n        var s : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i.toInt)\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpxobc75.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0L\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n            if (max_ending_here < 0)\n                max_ending_here = 0\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5vbmj5bg.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0\n        var start = 0\n        var end = 0\n        var s = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i).toInt\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp53d7xcpo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a.head\n        var curr_max = a.head\n        for (i <- 1 until size) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvjaal2k.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        var start : Long = 0\n        var end : Long = 0\n        var s : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i.toInt)\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5di5bvfi.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var maxSoFar : Long = a(0)\n        var maxEndingHere : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            maxEndingHere = max(a(i), maxEndingHere + a(i))\n            maxSoFar = max(maxSoFar, maxEndingHere)\n        }\n        return maxSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i.toInt)\n            if (max_ending_here < 0) max_ending_here = 0\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxsgfrj7z.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0L\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n            if (max_ending_here < 0) max_ending_here = 0\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbovup798.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0\n        var start = 0\n        var end = 0\n        var s = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i).toInt\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp53d7xcpo.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0o7jhyb5.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0) max_ending_here = 0\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzjk5rqnn.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = Long.MinValue\n        var max_ending_here : Long = 0\n        var start : Long = 0\n        var end : Long = 0\n        var s : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i.toInt)\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpxobc75.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0) max_ending_here = 0\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxqyy6ek.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxqyy6ek.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0L\n        var start = 0\n        var end = 0\n        var s = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i)\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeo8604x5.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt).toInt\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe47lsswj.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = a(0)\n        var curr_max : Long = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps44xo38u.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0) max_ending_here = 0\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbqb5mn94.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = Long.MinValue\n        var max_ending_here = 0\n        var start = 0\n        var end = 0\n        var s = 0\n        for (i <- 0 until size) {\n            max_ending_here += a(i.toInt)\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0\n                s = i + 1\n            }\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgwvn08i.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (size : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzgwvn08i.scala:12:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            max_ending_here += a(i.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = 0\n        var max_ending_here = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps39jnhfj.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            max_ending_here = max_ending_here + a(i.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    Long\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 to size.toInt - 1) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far : Long = 0\n        var max_ending_here : Long = 0\n        for (i <- 0 until size) {\n            max_ending_here = max_ending_here + a(i.toInt)\n            if (max_ending_here < 0)\n                max_ending_here = 0\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here\n        }\n        return max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbqmmky8.scala:8:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until size) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (size : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n        var max_so_far = a(0)\n        var curr_max = a(0)\n        for (i <- 1 until size.toInt) {\n            curr_max = max(a(i), curr_max + a(i))\n            max_so_far = max(max_so_far, curr_max)\n        }\n        max_so_far\n    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}