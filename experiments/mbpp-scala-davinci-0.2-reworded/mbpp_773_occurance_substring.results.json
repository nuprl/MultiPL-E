{
  "name": "mbpp_773_occurance_substring",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                occurance += 1\n                position = i - j\n                j = 0\n                found = true\n            }\n        }\n        if (found) Some(Right(position)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6s95qy7q.scala:31)\n\tat Problem.main(tmp6s95qy7q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6dpqztf.scala:11)\n\tat Problem.main(tmpw6dpqztf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm3sw40yi.scala:25)\n\tat Problem.main(tmpm3sw40yi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(position))\n        return Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo3te4651.scala:33)\n\tat Problem.main(tmpo3te4651.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0L\n        while(i < textLength && j < patternLength) {\n            if(textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                found = true\n                position = i - j\n            }\n        }\n        if(found) {\n            Some(Right(position))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhw4lyr.scala:34)\n\tat Problem.main(tmpnxhw4lyr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy_n4n0r0.scala:24)\n\tat Problem.main(tmpy_n4n0r0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Some(Right(i - j))\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpehhrl74j.scala:24)\n\tat Problem.main(tmpehhrl74j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            var i = 0\n            var j = 0\n            var occurance = 0\n            var position = 0\n            while (i < textLength) {\n                if (text(i) == pattern(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) {\n                        occurance += 1\n                        j = 0\n                    }\n                }\n                else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (occurance == 0) None\n            else Some(Left(occurance.toString))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6l5tpkb.scala:33)\n\tat Problem.main(tmpw6l5tpkb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm3sw40yi.scala:25)\n\tat Problem.main(tmpm3sw40yi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            return None\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength)\n                return Some(Right(i))\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnpib7ujj.scala:21)\n\tat Problem.main(tmpnpib7ujj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var k = 0\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    j = 0\n                    k += 1\n                    i = k\n                }\n            }\n            if (j == patternLength) {\n                Some(Right(k.toLong))\n            } else {\n                None\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps1lc87po.scala:34)\n\tat Problem.main(tmps1lc87po.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var occurance = 0\n        var result = new ListBuffer[Long]()\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                occurance += 1\n                result += index\n            }\n            index += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(result.toList))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3mu1rogx.scala:19:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33melse\u001b[0m Some(Right(result.toList))\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m                        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmvswcnbx.scala:15)\n\tat Problem.main(tmpmvswcnbx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val len = pattern.length\n        val lenText = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var pos = 0\n        while (i < lenText) {\n            if (text(i) == pattern(j)) {\n                count += 1\n                if (count == len) {\n                    pos = i - len + 1\n                    return Some(Right(pos))\n                }\n                j += 1\n            }\n            else {\n                count = 0\n                j = 0\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt20kl8gl.scala:30)\n\tat Problem.main(tmpt20kl8gl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == patternLength - 1) {\n                    return Some(Right(index))\n                }\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                }\n                i += 1\n                index = i\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvh294a71.scala:29)\n\tat Problem.main(tmpvh294a71.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            val textHash = new Array[Long](textLength)\n            val patternHash = new Array[Long](patternLength)\n            var i = 0\n            while (i < textLength) {\n                textHash(i) = textArray(i).toLong\n                i += 1\n            }\n            i = 0\n            while (i < patternLength) {\n                patternHash(i) = patternArray(i).toLong\n                i += 1\n            }\n            val hash = new Array[Long](textLength - patternLength + 1)\n            hash(0) = 0\n            i = 0\n            while (i < patternLength) {\n                hash(0) += textHash(i) * pow(31, patternLength - i - 1).toLong\n                i += 1\n            }\n            i = 1\n            while (i < textLength - patternLength + 1) {\n                hash(i) = hash(i - 1) - textHash(i - 1) * pow(31, patternLength - 1).toLong + textHash(i + patternLength - 1) * pow(31, patternLength - 1).toLong\n                i += 1\n            }\n            val patternHashValue = patternHash.sum\n            i = 0\n            while (i < textLength - patternLength + 1) {\n                if (hash(i) == patternHashValue) {\n                    var j = 0\n                    var matchFound = true\n                    while (j < patternLength) {\n                        if (textArray(i + j) != patternArray(j)) {\n                            matchFound = false\n                            j = patternLength\n                        }\n                        j += 1\n                    }\n                    if (matchFound) {\n                        return Some(Right(i))\n                    }\n                }\n                i += 1\n            }\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_bzq_2p5.scala:60)\n\tat Problem.main(tmp_bzq_2p5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(i - patternLength))\n            }\n        }\n        if (!found) return Some(Left(\"No match\"))\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9pssnoa0.scala:31)\n\tat Problem.main(tmp9pssnoa0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else Some(Right(result.get.start))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd8dfbctl.scala:12)\n\tat Problem.main(tmpd8dfbctl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw0yt945c.scala:35)\n\tat Problem.main(tmpw0yt945c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx4r2b0qa.scala:18)\n\tat Problem.main(tmpx4r2b0qa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var textIndex = 0\n        var patternIndex = 0\n        var result = \"\"\n        var position = 0L\n        while (textIndex < textLength) {\n            if (text(textIndex) == pattern(patternIndex)) {\n                if (patternIndex == patternLength - 1) {\n                    result += textIndex - patternLength + 1 + \" \"\n                    position += textIndex - patternLength + 1\n                    patternIndex = 0\n                } else patternIndex += 1\n            } else patternIndex = 0\n            textIndex += 1\n        }\n        if (result == \"\") None else Some(Right(position))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp83pq5jy6.scala:26)\n\tat Problem.main(tmp83pq5jy6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = hash(pattern)\n        var textHash = hash(text.substring(0, patternLength))\n        if (patternHash == textHash) return Some(Right(0))\n        for (i <- 1 to textLength - patternLength) {\n            textHash = textHash - text.charAt(i - 1) * pow(31, patternLength - 1).toLong\n            textHash = textHash * 31 + text.charAt(i + patternLength - 1)\n            if (patternHash == textHash) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekox_n2r.scala:9:26 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mpatternHash\u001b[0m = hash(pattern)\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Not found: hash\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekox_n2r.scala:10:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mtextHash\u001b[0m = hash(text.substring(\u001b[31m0\u001b[0m, patternLength))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: hash\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjc3xru1q.scala:11)\n\tat Problem.main(tmpjc3xru1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        val textHash = text.substring(0, patternLength).hashCode\n        if (patternHash == textHash) {\n            if (pattern == text.substring(0, patternLength)) return Some(Right(0))\n        }\n        for (i <- 1 to textLength - patternLength) {\n            val newHash = textHash - text.charAt(i - 1).toInt + text.charAt(i + patternLength - 1).toInt\n            if (newHash == patternHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcytizpa.scala:23)\n\tat Problem.main(tmphcytizpa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                break\n            }\n        }\n        if (found) {\n            return Some(Right(i - j))\n        } else {\n            return Some(Left(\"Not found\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122542,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptj2j2f48.scala:26:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpohx_tw6b.scala:19)\n\tat Problem.main(tmpohx_tw6b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n            if(j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if(count == 0) None\n        else Some(Right(count))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqfupv7nv.scala:29)\n\tat Problem.main(tmpqfupv7nv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprljfabvf.scala:19)\n\tat Problem.main(tmprljfabvf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) return Some(Right(index))\n            } else {\n                if (j > 0) {\n                    i = index\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6dgr0pq6.scala:28)\n\tat Problem.main(tmp6dgr0pq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpow3vwlle.scala:13)\n\tat Problem.main(tmpow3vwlle.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmtm41e50.scala:29)\n\tat Problem.main(tmpmtm41e50.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index != -1) {\n            Some(Right(index.toLong))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122544,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyegmnjqf.scala:14)\n\tat Problem.main(tmpyegmnjqf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjtrqyi1x.scala:38)\n\tat Problem.main(tmpjtrqyi1x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength)\n            return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength)\n                    return Some(Right(i - j + 1))\n            } else {\n                i -= j\n                j = 0\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpczhq36bz.scala:28)\n\tat Problem.main(tmpczhq36bz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6dpqztf.scala:11)\n\tat Problem.main(tmpw6dpqztf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        var index = 0\n        var result = \"\"\n        var found = false\n        while (index < text.length) {\n            if (text.substring(index).startsWith(pattern)) {\n                result += index + \" \"\n                found = true\n            }\n            index += 1\n        }\n        if (found) Some(Right(result.trim.toLong)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"0 20\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.occuranceSubstring(tmpqa7678s3.scala:16)\n\tat Problem$.main(tmpqa7678s3.scala:19)\n\tat Problem.main(tmpqa7678s3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            var i = 0\n            var j = 0\n            var k = 0\n            var found = false\n            while (i < textLength && j < patternLength && !found) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    j = 0\n                    i = k + 1\n                    k = i\n                }\n                if (j == patternLength) {\n                    found = true\n                }\n            }\n            if (found) {\n                Some(Right(i - patternLength))\n            } else {\n                None\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ugr7mzg.scala:36)\n\tat Problem.main(tmp8ugr7mzg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var currentHash = text.substring(0, patternLength).hashCode\n        var currentIndex = 0\n        while (currentIndex + patternLength <= textLength) {\n            if (currentHash == patternHash) {\n                val currentSubstring = text.substring(currentIndex, currentIndex + patternLength)\n                if (currentSubstring == pattern) return Some(Right(currentIndex))\n            }\n            if (currentIndex + patternLength < textLength) {\n                currentHash = currentHash - text(currentIndex).toInt + text(currentIndex + patternLength).toInt\n            }\n            currentIndex += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppnew0e7m.scala:25)\n\tat Problem.main(tmppnew0e7m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                if (subString == pattern) return Some(Right(i))\n                else return Some(Left(subString))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_lr804ww.scala:22)\n\tat Problem.main(tmp_lr804ww.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9yf95ed2.scala:19)\n\tat Problem.main(tmp9yf95ed2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        }\n        return Some(Right(occurance))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsfooi2wg.scala:33)\n\tat Problem.main(tmpsfooi2wg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplr24f3qr.scala:25)\n\tat Problem.main(tmplr24f3qr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var index = 0\n        var occurance = 0\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                occurance += 1\n                index += patternLength\n            }\n            else index += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 30, end 36, length 35\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.occuranceSubstring(tmpu9x6fzms.scala:12)\n\tat Problem$.main(tmpu9x6fzms.scala:22)\n\tat Problem.main(tmpu9x6fzms.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    position = i - j\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(position))\n        else Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj_5sg3ns.scala:32)\n\tat Problem.main(tmpj_5sg3ns.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var found = false\n        var count = 0\n        var position = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                i += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n                i += 1\n            }\n        }\n        if(count == 0) None\n        else if(count == 1) Some(Right(position))\n        else Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6xm7dmtx.scala:32)\n\tat Problem.main(tmp6xm7dmtx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        val d = new Array[Int](patternLength + 1)\n        d(0) = -1\n        while (i < patternLength) {\n            if (j == -1 || pattern(i) == pattern(j)) {\n                i += 1\n                j += 1\n                d(i) = j\n            } else {\n                j = d(j)\n            }\n        }\n        i = 0\n        while (i < textLength) {\n            if (k == -1 || text(i) == pattern(k)) {\n                i += 1\n                k += 1\n                if (k == patternLength) {\n                    t += 1\n                    k = d(k)\n                }\n            } else {\n                k = d(k)\n            }\n        }\n        if (t == 0) return None\n        Some(Right(t))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.occuranceSubstring(tmp2vdnmnqs.scala:26)\n\tat Problem$.main(tmp2vdnmnqs.scala:41)\n\tat Problem.main(tmp2vdnmnqs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxt236blm.scala:31)\n\tat Problem.main(tmpxt236blm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) {\n                    found = true\n                    break\n                }\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (found) Some(Right(i - patternLength + 1)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvkswrp6j.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnhyftjch.scala:31)\n\tat Problem.main(tmpnhyftjch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                k = i\n                while (j < patternLength && textArray(k) == patternArray(j)) {\n                    k += 1\n                    j += 1\n                }\n                if (j == patternLength) found = true\n                else j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(i - 1)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpul9kqyr_.scala:30)\n\tat Problem.main(tmpul9kqyr_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        else if (count == 1) return Some(Right(position))\n        else return Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4qwuj9_r.scala:36)\n\tat Problem.main(tmp4qwuj9_r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6dpqztf.scala:11)\n\tat Problem.main(tmpw6dpqztf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val result = text.indexOf(pattern)\n        if (result == -1) None\n        else Some(Right(result.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjc3xru1q.scala:11)\n\tat Problem.main(tmpjc3xru1q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val n = text.length\n        val m = pattern.length\n        val lps = Array.fill(m)(0)\n        var i = 1\n        var len = 0\n        while (i < m) {\n            if (pattern(i) == pattern(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var j = 0\n        var k = 0\n        while (j < n) {\n            if (text(j) == pattern(k)) {\n                j += 1\n                k += 1\n            }\n            if (k == m) {\n                return Some(Right(j - k))\n            } else if (j < n && text(j) != pattern(k)) {\n                if (k != 0) {\n                    k = lps(k - 1)\n                } else {\n                    j += 1\n                }\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxda06rcv.scala:45)\n\tat Problem.main(tmpxda06rcv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(i - patternLength + 1)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122551,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeqarqft7.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(index)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb3sxavtp.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(position))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0nimpbl_.scala:37)\n\tat Problem.main(tmp0nimpbl_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var found = false\n            var result = \"\"\n            while (i < textLength && j < patternLength) {\n                if (textArray(i) == patternArray(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n                if (j == patternLength) {\n                    found = true\n                    result += (i - patternLength).toString + \" \"\n                    j = 0\n                }\n            }\n            if (found) {\n                Some(Right(result.trim.toLong))\n            } else {\n                None\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"0 20\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.occuranceSubstring(tmp6un9ciud.scala:32)\n\tat Problem$.main(tmp6un9ciud.scala:39)\n\tat Problem.main(tmp6un9ciud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) return Some(Right(index.toLong))\n            }\n            else {\n                if (j != 0) i = index\n                j = 0\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2w_m9djv.scala:29)\n\tat Problem.main(tmp2w_m9djv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwmll67aj.scala:31)\n\tat Problem.main(tmpwmll67aj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw6dpqztf.scala:11)\n\tat Problem.main(tmpw6dpqztf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            None\n        } else {\n            var index = 0\n            var result = new ListBuffer[Long]\n            while (index < textLength - patternLength + 1) {\n                if (text.substring(index, index + patternLength) == pattern) {\n                    result += index\n                }\n                index += 1\n            }\n            if (result.length == 0) {\n                None\n            } else {\n                Some(Right(result.length))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplgqha6tp.scala:27)\n\tat Problem.main(tmplgqha6tp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm865hb04.scala:19)\n\tat Problem.main(tmpm865hb04.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while(i < textLength) {\n            if(textArray(i) == patternArray(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if(j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if(occurance == 0) None\n        else Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpew0eknpq.scala:34)\n\tat Problem.main(tmpew0eknpq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx__tw8py.scala:15)\n\tat Problem.main(tmpx__tw8py.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) {\n            return None\n        } else {\n            return Some(Right(position))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ocxpsxx.scala:39)\n\tat Problem.main(tmp5ocxpsxx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) position = i\n                j += 1\n            } else {\n                j = 0\n            }\n            if (j == patternLength) {\n                occurance += 1\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5t47h7hb.scala:33)\n\tat Problem.main(tmp5t47h7hb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        var result = new ListBuffer[Long]\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                result += i - j\n                j = 0\n            }\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(result(0)))\n        Some(Left(result.mkString(\" \")))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyny4z2yz.scala:33)\n\tat Problem.main(tmpyny4z2yz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var p = 0\n        var h = 0\n        var d = pow(10, 9).toInt + 7\n        for (i <- 0 until patternLength) {\n            h = (h * 10 + pattern(i)) % d\n            t = (t * 10 + text(i)) % d\n        }\n        val hPow = pow(10, patternLength - 1).toInt\n        var result = new ListBuffer[Long]\n        while (i < textLength - patternLength + 1) {\n            if (h == t) {\n                for (j <- 0 until patternLength) {\n                    if (text(i + j) != pattern(j)) break\n                }\n                if (j == patternLength) result += i\n            }\n            if (i < textLength - patternLength) {\n                t = (t - text(i) * hPow) % d\n                if (t < 0) t += d\n                t = (t * 10 + text(i + patternLength)) % d\n            }\n            i += 1\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxl7odl8n.scala:25:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    \u001b[33mif\u001b[0m (text(i + j) != pattern(j)) break\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvf3asezw.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        val lps = Array.fill(patternLength)(0)\n        computeLPSArray(pattern, patternLength, lps)\n        while (i < textLength) {\n            if (pattern(j) == text(i)) {\n                j += 1\n                i += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i - j))\n                j = lps(j - 1)\n            }\n            else if (i < textLength && pattern(j) != text(i)) {\n                if (j != 0) j = lps(j - 1)\n                else i += 1\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgc9d63yt.scala:13:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        computeLPSArray(pattern, patternLength, lps)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Not found: computeLPSArray\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val start = text.indexOf(pattern)\n        if (start == -1) None\n        else Some(Right(start.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6k03468o.scala:11)\n\tat Problem.main(tmp6k03468o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        val textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt).toInt * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122561,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpnvn4ul_p.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                textHash = (textHash - text(i).toInt * pow(\u001b[31m31\u001b[0m, patternLength - \u001b[31m1\u001b[0m).toInt).toInt * \u001b[31m31\u001b[0m + text(i + patternLength).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val textHash\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == patternLength - 1) return Some(Right(i - j))\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp46fle9s1.scala:27)\n\tat Problem.main(tmp46fle9s1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsotutpkk.scala:36)\n\tat Problem.main(tmpsotutpkk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        var found = false\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                    found = true\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if(found) {\n            if(count == 1) Some(Right(position))\n            else Some(Left(count.toString))\n        }\n        else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpro4fppq7.scala:35)\n\tat Problem.main(tmpro4fppq7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzfy2bavh.scala:25)\n\tat Problem.main(tmpzfy2bavh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            while (i < textLength) {\n                if (textArray(i) == patternArray(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        return Some(Right(i - j + 1))\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp40325knh.scala:30)\n\tat Problem.main(tmp40325knh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i += 1\n                j = 0\n            }\n            if (j == patternLength) {\n                found = true\n                k = i - j\n            }\n        }\n        if (found) {\n            Some(Right(k))\n        }\n        else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz_ylhql8.scala:36)\n\tat Problem.main(tmpz_ylhql8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyxwm621r.scala:13)\n\tat Problem.main(tmpyxwm621r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) i = position\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2u95cgj3.scala:32)\n\tat Problem.main(tmp2u95cgj3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        var flag = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    index = i\n                }\n                if (j == patternLength - 1) {\n                    count += 1\n                    flag = true\n                    j = 0\n                }\n                else {\n                    j += 1\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (flag) {\n            Some(Right(index))\n        }\n        else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpki1029gm.scala:42)\n\tat Problem.main(tmpki1029gm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                if (j != 0) i = position\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) None else Some(Right(position))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprda4z9po.scala:30)\n\tat Problem.main(tmprda4z9po.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122554,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnhyftjch.scala:31)\n\tat Problem.main(tmpnhyftjch.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp55ylytxj.scala:10)\n\tat Problem.main(tmp55ylytxj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx__tw8py.scala:15)\n\tat Problem.main(tmpx__tw8py.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            Some(Left(\"No match\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd2tozhvz.scala:14)\n\tat Problem.main(tmpd2tozhvz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp34l3dudw.scala:21)\n\tat Problem.main(tmp34l3dudw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmvswcnbx.scala:15)\n\tat Problem.main(tmpmvswcnbx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprelz54ij.scala:21)\n\tat Problem.main(tmprelz54ij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 until textLength - patternLength + 1) {\n            var matchCount = 0\n            for (j <- 0 until patternLength) {\n                if (textArray(i + j) == patternArray(j)) matchCount += 1\n                else break\n            }\n            if (matchCount == patternLength) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122562,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe1w6evzs.scala:15:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                \u001b[33melse\u001b[0m break\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textCharArray(i + j) == patternCharArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122565,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd1c6bzff.scala:22)\n\tat Problem.main(tmpd1c6bzff.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val n = text.length\n        val m = pattern.length\n        val lps = new Array[Int](m)\n        var i = 1\n        var j = 0\n        while (i < m) {\n            if (pattern(i) == pattern(j)) {\n                lps(i) = j + 1\n                i += 1\n                j += 1\n            } else if (j != 0) {\n                j = lps(j - 1)\n            } else {\n                lps(i) = 0\n                i += 1\n            }\n        }\n        i = 0\n        j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == m) {\n                return Some(Right(i - j))\n            } else if (i < n && text(i) != pattern(j)) {\n                if (j != 0) {\n                    j = lps(j - 1)\n                } else {\n                    i += 1\n                }\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122566,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw035utcu.scala:43)\n\tat Problem.main(tmpw035utcu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            i = i + 1\n        }\n        if (textHash == patternHash) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122568,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0yyg_i8l.scala:31)\n\tat Problem.main(tmp0yyg_i8l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position.toLong))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122567,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpamprd4ai.scala:38)\n\tat Problem.main(tmpamprd4ai.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122568,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp45xfjuin.scala:26)\n\tat Problem.main(tmp45xfjuin.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && !found) {\n            if (textArray(i) == patternArray(j)) {\n                k = i\n                while (j < patternLength && k < textLength && textArray(k) == patternArray(j)) {\n                    k += 1\n                    j += 1\n                }\n                if (j == patternLength) {\n                    found = true\n                }\n                else {\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (found) {\n            return Some(Right(i - 1))\n        }\n        else {\n            return None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptck8n309.scala:41)\n\tat Problem.main(tmptck8n309.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val count = text.split(pattern).length - 1\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122571,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp316byo4t.scala:15)\n\tat Problem.main(tmp316byo4t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) {\n            return None\n        }\n        return Some(Right(position))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122572,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgutv514x.scala:37)\n\tat Problem.main(tmpgutv514x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.length < pattern.length) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == pattern.length) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) return Some(Left(pattern))\n        else return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122572,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8bphaqkm.scala:27)\n\tat Problem.main(tmp8bphaqkm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub.hashCode == patternHash) {\n                if (sub == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpftghvjge.scala:25)\n\tat Problem.main(tmpftghvjge.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while(i < textLength) {\n            if(textArray(i) == patternArray(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if(found) Some(Right(count)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb3a_2aj5.scala:32)\n\tat Problem.main(tmpb3a_2aj5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        var j = 0\n        var count = 0\n        var position = 0\n        while(i < textLength) {\n            if(text(i) == pattern(j)) {\n                if(j == 0) position = i\n                j += 1\n                if(j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if(count == 0) None\n        else if(count == 1) Some(Right(position))\n        else Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqze1wpmz.scala:31)\n\tat Problem.main(tmpqze1wpmz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprljfabvf.scala:19)\n\tat Problem.main(tmprljfabvf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwnletida.scala:23)\n\tat Problem.main(tmpwnletida.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) Some(Left(pattern)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp92dxsvzd.scala:28)\n\tat Problem.main(tmp92dxsvzd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpflvkpkrx.scala:19)\n\tat Problem.main(tmpflvkpkrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val regex = pattern.r\n        val result = regex.findFirstMatchIn(text)\n        if (result.isEmpty) None\n        else {\n            val index = result.get.start\n            Some(Right(index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx__tw8py.scala:15)\n\tat Problem.main(tmpx__tw8py.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    break\n                }\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122570,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0qxhr__s.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        if (occurance == 1) return Some(Right(position))\n        return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3lkkh0m5.scala:31)\n\tat Problem.main(tmp3lkkh0m5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4jjm3lkt.scala:23)\n\tat Problem.main(tmp4jjm3lkt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var occurance = 0\n        var position = 0\n        var found = false\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                occurance += 1\n                position = i\n                found = true\n            }\n        }\n        if (found) {\n            Some(Right(position))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122573,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr7ktj7hy.scala:25)\n\tat Problem.main(tmpr7ktj7hy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var count = 0\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                count += 1\n                i += patternLength\n            } else {\n                i += 1\n            }\n        }\n        if (count == 0) {\n            return None\n        } else {\n            return Some(Right(count))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz19662u3.scala:34)\n\tat Problem.main(tmpz19662u3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            Some(Right(text.indexOf(pattern)))\n        } else {\n            Some(Left(\"No match\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyxwm621r.scala:13)\n\tat Problem.main(tmpyxwm621r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        return Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8jjkzl_s.scala:32)\n\tat Problem.main(tmp8jjkzl_s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) {\n                return Some(Right(i))\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxz9m4nkf.scala:20)\n\tat Problem.main(tmpxz9m4nkf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    break\n                }\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122572,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp83mu8zpj.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 until textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122575,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeq13a17y.scala:19)\n\tat Problem.main(tmpeq13a17y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val n = text.length\n        val m = pattern.length\n        val p = new Array[Int](m + 1)\n        var k = 0\n        var q = 1\n        p(0) = 0\n        while (q < m) {\n            if (pattern(q) == pattern(k)) {\n                k += 1\n                p(q) = k\n                q += 1\n            } else {\n                if (k != 0) {\n                    k = p(k - 1)\n                } else {\n                    p(q) = 0\n                    q += 1\n                }\n            }\n        }\n        var i = 0\n        var j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == m) {\n                return Some(Right(i - j))\n                j = p(j - 1)\n            } else if (i < n && text(i) != pattern(j)) {\n                if (j != 0) {\n                    j = p(j - 1)\n                } else {\n                    i += 1\n                }\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122576,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4sghv69_.scala:47)\n\tat Problem.main(tmp4sghv69_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122577,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjw7hiev0.scala:23)\n\tat Problem.main(tmpjw7hiev0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                j += 1\n                if (j == patternLength) return Some(Right(i - patternLength + 1))\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptd1wu97b.scala:24)\n\tat Problem.main(tmptd1wu97b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm3sw40yi.scala:25)\n\tat Problem.main(tmpm3sw40yi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        for (i <- 0 to textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt) / 256 + (text(i + patternLength).toInt * pow(256, patternLength - 1)).toInt\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122578,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiaf_o9uk.scala:26)\n\tat Problem.main(tmpiaf_o9uk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = textHash - text(i).toInt + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpanaob8d1.scala:24)\n\tat Problem.main(tmpanaob8d1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var index = -1\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    i = index + 1\n                    j = 0\n                } else {\n                    i += 1\n                }\n                index = -1\n            }\n            if (j == patternLength) {\n                found = true\n                return Some(Right(index.toLong))\n            }\n        }\n        if (found) Some(Right(index.toLong)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122580,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpo3w42o_n.scala:35)\n\tat Problem.main(tmpo3w42o_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val textCharArray = text.toCharArray\n        val patternCharArray = pattern.toCharArray\n        val textCharArrayLength = textCharArray.length\n        val patternCharArrayLength = patternCharArray.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        var index = 0\n        var result = \"\"\n        while (i < textCharArrayLength && j < patternCharArrayLength) {\n            if (textCharArray(i) == patternCharArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternCharArrayLength) {\n                found = true\n                result += (index + 1).toString + \" \"\n                index = i - patternCharArrayLength\n                j = 0\n            }\n        }\n        if (found) Some(Left(result)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpamx9qdte.scala:37)\n\tat Problem.main(tmpamx9qdte.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength)) {\n                    return Some(Right(i))\n                }\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text.charAt(i).toInt) / 31 + (text.charAt(i + patternLength).toInt * pow(31, patternLength - 1)).toInt\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcewic0h1.scala:28)\n\tat Problem.main(tmpcewic0h1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(index))\n        else Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpklay_1mk.scala:31)\n\tat Problem.main(tmpklay_1mk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength)\n            return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (patternHash == textHash) {\n                if (pattern == text.substring(i, i + patternLength))\n                    return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvx7m5m61.scala:26)\n\tat Problem.main(tmpvx7m5m61.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        if (patternHash == textHash) return Some(Left(text.substring(0, patternLength)))\n        var i = 1\n        while (i <= textLength - patternLength) {\n            textHash = textHash - text.charAt(i - 1).toInt + text.charAt(i + patternLength - 1).toInt\n            if (patternHash == textHash) return Some(Left(text.substring(i, i + patternLength)))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmu9rrrpi.scala:21)\n\tat Problem.main(tmpmu9rrrpi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i < textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength - 1) {\n                textHash = textHash - text.charAt(i).toInt + text.charAt(i + patternLength).toInt\n            }\n            i += 1\n        }\n        if (textHash == patternHash) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfx58s_xx.scala:27)\n\tat Problem.main(tmpfx58s_xx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy8x5uu3a.scala:33)\n\tat Problem.main(tmpy8x5uu3a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var result = new ListBuffer[Long]\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) result += i\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0i5k2oom.scala:17)\n\tat Problem.main(tmp0i5k2oom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            val count = text.split(pattern).length - 1\n            Some(Right(count))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgelwhok6.scala:15)\n\tat Problem.main(tmpgelwhok6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm865hb04.scala:19)\n\tat Problem.main(tmpm865hb04.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpflvkpkrx.scala:19)\n\tat Problem.main(tmpflvkpkrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var result = new ListBuffer[Long]\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                result += i\n            }\n        }\n        if (result.length == 0) None\n        else Some(Right(result.length))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmparfjdv69.scala:18)\n\tat Problem.main(tmparfjdv69.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) return None\n        return Some(Left(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeujj8b1b.scala:29)\n\tat Problem.main(tmpeujj8b1b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122574,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpflvkpkrx.scala:19)\n\tat Problem.main(tmpflvkpkrx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength) {\n            var j = 0\n            while (j < patternLength && i + j < textLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_hrij9hv.scala:25)\n\tat Problem.main(tmp_hrij9hv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122584,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg0kab_m5.scala:21)\n\tat Problem.main(tmpg0kab_m5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString.hashCode == patternHash) {\n                if (subString == pattern) return Some(Right(i))\n                else return Some(Left(subString))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_lr804ww.scala:22)\n\tat Problem.main(tmp_lr804ww.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    break\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (found) Some(Right(position)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122581,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_r8rm6px.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            val textArray = text.toCharArray\n            val patternArray = pattern.toCharArray\n            var i = 0\n            var j = 0\n            var found = false\n            var position = -1\n            while (i < textLength && !found) {\n                if (textArray(i) == patternArray(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) found = true\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) Some(Right(position)) else None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn17cio03.scala:31)\n\tat Problem.main(tmpn17cio03.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var k = 0\n        var t = 0\n        var h = 1\n        for (i <- 0 until patternLength - 1) h = (h * 256) % 101\n        i = 0\n        j = 0\n        while (i < patternLength) {\n            j = (j * 256 + text(i).toInt) % 101\n            k = (k * 256 + pattern(i).toInt) % 101\n            i += 1\n        }\n        i = 0\n        while (i <= textLength - patternLength) {\n            if (j == k) {\n                t = 0\n                while (t < patternLength) {\n                    if (text(i + t) != pattern(t)) break\n                    t += 1\n                }\n                if (t == patternLength) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                j = (j - h * text(i).toInt) % 101\n                if (j < 0) j += 101\n                j = (j * 256 + text(i + patternLength).toInt) % 101\n                i += 1\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122582,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp66bou1es.scala:27:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                    \u001b[33mif\u001b[0m (text(i + t) != pattern(t)) break\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                   Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var i = 0\n        var j = 0\n        var count = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n            if (j == patternLength) {\n                count += 1\n                j = 0\n            }\n        }\n        if (count == 0) None\n        else Some(Right(count))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbt34w_by.scala:28)\n\tat Problem.main(tmpbt34w_by.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        var found = false\n        while (index <= textLength - patternLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                found = true\n                return Some(Right(index))\n            }\n            index += 1\n        }\n        if (!found) return Some(Left(\"No match\"))\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprdvtfjb6.scala:21)\n\tat Problem.main(tmprdvtfjb6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                j = 0\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else if (occurance == 1) return Some(Right(position))\n        else return Some(Left(occurance.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122588,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp992r3v19.scala:32)\n\tat Problem.main(tmp992r3v19.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    j = 0\n                    i = position\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) None\n        else Some(Right(occurance))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122589,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjkkiuxah.scala:34)\n\tat Problem.main(tmpjkkiuxah.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    k = i\n                }\n                if (j == patternLength - 1) {\n                    found = true\n                    return Some(Right(k))\n                }\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (!found) {\n            return None\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpguwp3ayx.scala:39)\n\tat Problem.main(tmpguwp3ayx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (found) return Some(Left(pattern))\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp61veo1of.scala:29)\n\tat Problem.main(tmp61veo1of.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            if (textHash == patternHash) {\n                if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash = (textHash - text(i).toInt * pow(31, patternLength - 1).toInt) * 31 + text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5bhnpwm9.scala:24)\n\tat Problem.main(tmp5bhnpwm9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var k = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                j = 0\n                i = k + 1\n                k = i\n            }\n            if (j == patternLength) {\n                found = true\n            }\n        }\n        if (found) {\n            return Some(Right(i - patternLength))\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk4d3n5qd.scala:37)\n\tat Problem.main(tmpk4d3n5qd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) {\n            found = true\n            return Some(Right(i - j))\n        }\n        if (!found) {\n            return Some(Left(\"No match\"))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprxk9uqw8.scala:32)\n\tat Problem.main(tmprxk9uqw8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp55ylytxj.scala:10)\n\tat Problem.main(tmp55ylytxj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqu882vho.scala:16)\n\tat Problem.main(tmpqu882vho.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp12tcusix.scala:19)\n\tat Problem.main(tmp12tcusix.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    index = i - patternLength\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (count == 0) {\n            return None\n        } else if (count == 1) {\n            return Some(Right(index))\n        } else {\n            return Some(Left(count + \" times at \" + index))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0e0rmd4m.scala:38)\n\tat Problem.main(tmp0e0rmd4m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpohx_tw6b.scala:19)\n\tat Problem.main(tmpohx_tw6b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122564,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzfy2bavh.scala:25)\n\tat Problem.main(tmpzfy2bavh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) None\n        else {\n            var i = 0\n            var j = 0\n            var occurance = 0\n            var position = 0\n            var found = false\n            while (i < textLength) {\n                if (text(i) == pattern(j)) {\n                    if (j == 0) position = i\n                    j += 1\n                    if (j == patternLength) {\n                        occurance += 1\n                        j = 0\n                        found = true\n                    }\n                }\n                else {\n                    j = 0\n                    if (text(i) == pattern(j)) {\n                        position = i\n                        j += 1\n                    }\n                }\n                i += 1\n            }\n            if (found) Some(Right(position))\n            else None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5196mkn2.scala:39)\n\tat Problem.main(tmp5196mkn2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        var i = 0\n        var j = 0\n        var count = 0\n        var index = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                j += 1\n                if (j == patternLength) {\n                    count += 1\n                    j = 0\n                }\n            } else {\n                j = 0\n            }\n            i += 1\n        }\n        if (count == 0) return None\n        if (count == 1) return Some(Right(index))\n        return Some(Left(count.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnmvzpj8j.scala:31)\n\tat Problem.main(tmpnmvzpj8j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength)\n            return None\n        var i = 0\n        var j = 0\n        var index = -1\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0)\n                    index = i\n                j += 1\n                if (j == patternLength)\n                    return Some(Right(index))\n            }\n            else {\n                if (j != 0) {\n                    i = index\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122591,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpup1c3dac.scala:32)\n\tat Problem.main(tmpup1c3dac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        val patternHash = pattern.hashCode\n        var textHash = text.substring(0, patternLength).hashCode\n        var i = 0\n        var j = 0\n        while (i < textLength - patternLength + 1) {\n            if (textHash == patternHash) {\n                j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Some(Right(i))\n            }\n            if (i < textLength - patternLength) {\n                textHash -= text(i).toInt\n                textHash += text(i + patternLength).toInt\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0avd5n_x.scala:27)\n\tat Problem.main(tmp0avd5n_x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var occurance = 0\n        var position = 0\n        while (i < textLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) position = i\n                j += 1\n                if (j == patternLength) {\n                    occurance += 1\n                    j = 0\n                }\n            }\n            else {\n                if (j != 0) {\n                    i = position\n                    j = 0\n                }\n            }\n            i += 1\n        }\n        if (occurance == 0) return None\n        else return Some(Left(occurance.toString + \":\" + position.toString))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbmc0lfit.scala:34)\n\tat Problem.main(tmpbmc0lfit.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return None\n        var i = 0\n        var j = 0\n        var index = 0\n        var found = false\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) index = i\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = 0\n                    i = index + 1\n                } else {\n                    i += 1\n                }\n            }\n            if (j == patternLength) {\n                found = true\n                break\n            }\n        }\n        if (found) Some(Right(index)) else None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122590,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphmzck0o7.scala:28:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        if (text.contains(pattern)) {\n            val index = text.indexOf(pattern)\n            Some(Right(index))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfd9hd81q.scala:14)\n\tat Problem.main(tmpfd9hd81q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return None\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Some(Right(i))\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyazi5ewk.scala:19)\n\tat Problem.main(tmpyazi5ewk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122553,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplr24f3qr.scala:25)\n\tat Problem.main(tmplr24f3qr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            None\n        } else {\n            var index = 0\n            var result = List[Long]()\n            while (index <= textLength - patternLength) {\n                if (text.substring(index, index + patternLength) == pattern) {\n                    result = result :+ index\n                }\n                index += 1\n            }\n            if (result.isEmpty) {\n                None\n            } else {\n                Some(Right(result.length))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5lyoo0iv.scala:27)\n\tat Problem.main(tmp5lyoo0iv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkiygqb3m.scala:25)\n\tat Problem.main(tmpkiygqb3m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val index = text.indexOf(pattern)\n        if (index == -1) None\n        else Some(Right(index))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1665509964,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0lurgaf.scala:11)\n\tat Problem.main(tmpi0lurgaf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        var index = 0\n        var count = 0\n        var result = \"\"\n        while (index < textLength) {\n            if (text.substring(index, index + patternLength) == pattern) {\n                count += 1\n                result += index + \" \"\n            }\n            index += 1\n        }\n        if (count == 0) None\n        else if (count == 1) Some(Right(result.trim.toLong))\n        else Some(Left(result.trim))\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 30, end 36, length 35\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.occuranceSubstring(tmpni_z9zig.scala:12)\n\tat Problem$.main(tmpni_z9zig.scala:23)\n\tat Problem.main(tmpni_z9zig.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return None\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Some(Right(i))\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpesx9g5k9.scala:15)\n\tat Problem.main(tmpesx9g5k9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Some(Right(i))\n            }\n        }\n        return None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9yf95ed2.scala:19)\n\tat Problem.main(tmp9yf95ed2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val patternLength = pattern.length\n        val textLength = text.length\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        var i = 0\n        var j = 0\n        var found = false\n        var position = 0\n        var count = 0\n        while (i < textLength && j < patternLength) {\n            if (textArray(i) == patternArray(j)) {\n                if (j == 0) {\n                    position = i\n                }\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    found = true\n                    count += 1\n                    j = 0\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (found) {\n            Some(Right(position))\n        } else {\n            None\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyqgokny_.scala:39)\n\tat Problem.main(tmpyqgokny_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Either[String, Long]] = {\n        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            return None\n        }\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Some(Right(i))\n            }\n            i += 1\n        }\n        None\n    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals((\"python\", 0l, 6l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals((\"programming\", 7l, 18l)));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals((\"language\", 31l, 39l)));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n",
      "timestamp": 1666122592,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiygq2wxo.scala:25)\n\tat Problem.main(tmpiygq2wxo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}