{
  "name": "mbpp_59_is_octagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth octagonal number.\n    def isOctagonal(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x.isValidInt)\n            x.toLong\n        else\n            -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt)\n            m.toLong\n        else\n            0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 4\n        if (x == x.toInt) n else 0",
    "        val d = sqrt(1 + 24 * n)\n        if (d == d.toInt) {\n            val r = 1 + d\n            if (r % 6 == 0) r / 6 else 0\n        }\n        else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toLong else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) n else -1"
  ]
}