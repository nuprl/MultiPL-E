{
  "name": "mbpp_580_extract_even",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => x match {\n                case Left(y) => if (y % 2 == 0) Right(Left(y)) else Right(Right(y))\n                case Right(y) => if (y % 2 == 0) Right(Right(y)) else Left(y)\n            }\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }",
    "        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }"
  ]
}