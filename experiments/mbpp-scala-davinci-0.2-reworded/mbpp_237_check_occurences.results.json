{
  "name": "mbpp_237_check_occurences",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xbshtn_.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xbshtn_.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xbshtn_.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnk8jrx2.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnk8jrx2.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnk8jrx2.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (x <- test_list) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbibq33tl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbibq33tl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbibq33tl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw36efmz4.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw36efmz4.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw36efmz4.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_g_x1_7.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_g_x1_7.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_g_x1_7.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (occurences.contains(test_list(i))) {\n                occurences(test_list(i)) += 1\n            } else {\n                occurences += (test_list(i) -> 1)\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5pjx2ma.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5pjx2ma.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5pjx2ma.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe_o8_3bp.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5duxs11.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptcbyqt_n.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (map.contains(test_list(i))) {\n                map(test_list(i)) += 1\n            }\n            else {\n                map(test_list(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy9qaq1bo.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy9qaq1bo.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy9qaq1bo.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz9y5a6.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz9y5a6.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kz9y5a6.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfnyj_5v.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfnyj_5v.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfnyj_5v.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkaet1ylu.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) = occurences(i) + 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexcimr0.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexcimr0.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexcimr0.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0y8euo9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0y8euo9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0y8euo9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpres5hcea.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2j6bgw.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2j6bgw.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z2j6bgw.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz035itrg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz035itrg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz035itrg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zjcafip.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zjcafip.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zjcafip.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoym96j9.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho3vsmpv.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho3vsmpv.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpho3vsmpv.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jawyyfh.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jawyyfh.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jawyyfh.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpquybdylj.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_6gculc.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6sxz3dl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mecumqv.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mecumqv.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6mecumqv.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map += (i -> (map(i) + 1))\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vl223ry.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vl223ry.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vl223ry.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe217b_82.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe217b_82.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe217b_82.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpok_y228n.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp36s4q8k4.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmx6t1_61.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmx6t1_61.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmx6t1_61.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wg9pcr0.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox3d_og0.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdu3zam2.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (occurences.contains(test_list(i))) occurences(test_list(i)) += 1 else occurences += (test_list(i) -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23r_8omu.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23r_8omu.scala:13:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23r_8omu.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vgh9_2w.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vgh9_2w.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2vgh9_2w.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp715izz1k.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp22swe6ti.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyvscf1he.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnnds8_g3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhci6dpl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (occurences.contains(test_list(i))) occurences(test_list(i)) += 1\n            else occurences(test_list(i)) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aw09fet.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aw09fet.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aw09fet.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhsv_irn.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123346,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn0yyecnb.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn0yyecnb.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn0yyecnb.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7f079gm.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123347,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_ksm7h.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_ksm7h.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p_ksm7h.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}