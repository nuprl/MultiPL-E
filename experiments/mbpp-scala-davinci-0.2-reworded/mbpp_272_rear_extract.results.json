{
  "name": "mbpp_272_rear_extract",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case _ =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var rear_list : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => rear_list = rear_list :+ s.toLong\n                case Right(l) => rear_list = rear_list :+ l\n            }\n        }\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbha74ihq.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbha74ihq.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbha74ihq.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ 0\n                case Right(l) => result = result :+ l\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(a) => 0\n            case Right(b) => b\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkebsjed.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkebsjed.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjkebsjed.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ s.toLong\n                case Right(s) => result = result :+ s\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0w9yu_j.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0w9yu_j.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0w9yu_j.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => -1\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.filter(_.isRight).map(_.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(y) => 0\n            case Right(y) => y\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt4qyziy.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt4qyziy.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt4qyziy.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => throw new Exception(\"Not a tuple\")\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddwdhsf_.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddwdhsf_.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddwdhsf_.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            result = result :+ test_list(i).right.get\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9fqmx948.scala:13:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9fqmx948.scala:13:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9fqmx948.scala:13:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case _ =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(y) => y\n            case Left(y) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case Left(x) => result = result :+ 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        // We need to do a pattern match on the list to see if it's empty or not.\n        test_list match {\n            case Nil => Nil\n            case head :: tail => {\n                // We need to do a pattern match on the head to see if it's a Left or Right.\n                head match {\n                    case Left(x) => rearExtract(tail)\n                    case Right(x) => x :: rearExtract(tail)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hjw3u76.scala:19:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hjw3u76.scala:19:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9hjw3u76.scala:19:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case Left(x) => result = result :+ 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0srzq2c.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0L))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0L))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ 0\n                case Right(l) => result = result :+ l\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(x) => result = result :+ 0\n                case Right(x) => result = result :+ x\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyqis7vj.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyqis7vj.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcyqis7vj.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => -1\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.filter(_.isRight).map(_.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ 0\n                case Right(l) => result = result :+ l\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprq53s05r.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        return test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2b2yf8jh.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2b2yf8jh.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2b2yf8jh.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0L))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var rear_list : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(x) => rear_list = rear_list :+ 0\n                case Right(x) => rear_list = rear_list :+ x\n            }\n        }\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8klk9z4.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8klk9z4.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8klk9z4.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ 0\n                case Right(l) => result = result :+ l\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzhdmwvr6.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzhdmwvr6.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzhdmwvr6.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Left(x) => result = result :+ x.toLong\n                case Right(x) => result = result :+ x\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjv070dmc.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjv070dmc.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjv070dmc.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0L))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.filter(_.isRight).map(_.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.filter(_.isRight).map(_.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0)).filter(x => x != 0)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjpavbq2.scala:6:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        test_list.map(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m)).filter(\u001b[36mx\u001b[0m => x != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mAnyVal\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjpavbq2.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmjpavbq2.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            result = result :+ test_list(i).right.get\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwx9jd3l7.scala:13:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwx9jd3l7.scala:13:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwx9jd3l7.scala:13:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0L))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj1blllzy.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt2za4eea.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        val result = for (elem <- test_list) yield elem.right.get\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7fl9m_6o.scala:10:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7fl9m_6o.scala:10:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7fl9m_6o.scala:10:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var ret_list = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => ret_list = ret_list :+ x\n                case _ =>\n            }\n        }\n        ret_list\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstobbnpw.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstobbnpw.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpstobbnpw.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => -1\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ng11apf.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ng11apf.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2ng11apf.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Left(s) => result = result :+ 0\n                case Right(n) => result = result :+ n\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf52_whwt.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf52_whwt.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf52_whwt.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case _ =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvnxuhta.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => result = result :+ x\n                case Left(x) => result = result :+ 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp94q8mypq.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp94q8mypq.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp94q8mypq.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var rear_list : List[Long] = List()\n        for (i <- test_list) {\n            i match {\n                case Right(x) => rear_list = rear_list :+ x\n                case Left(x) => rear_list = rear_list :+ 0\n            }\n        }\n        return rear_list\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe5xc17d.scala:16:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe5xc17d.scala:16:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwe5xc17d.scala:16:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.filter(_.isRight).map(_.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2dy28ft.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxpam70u.scala:6:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        test_list.map(\u001b[36mx\u001b[0m => x.right.getOrElse(\u001b[31m0\u001b[0m)).toList\n\u001b[31m\u001b[31m  |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m        Found:    List[\u001b[1m\u001b[31mAnyVal\u001b[0m]\n\u001b[31m  |\u001b[0m        Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxpam70u.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxpam70u.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        var ret_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            ret_list = ret_list :+ test_list(i).right.get\n        }\n        return ret_list\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nk23z7z.scala:13:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nk23z7z.scala:13:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nk23z7z.scala:13:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.getOrElse(0))\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmttojipv.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => -1\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33yvb5go.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(x) => x\n            case Left(x) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3p_gh53.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Right(y) => y\n            case Left(y) => 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123308,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2g4aq4d5.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510135,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:70 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpesnnvmmc.scala:12:91 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Either[String, Long]]) : List[Long] = {\n        test_list.map(x => x.right.get)\n    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Either[String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510136,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:51 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                   ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:70 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b[31m20l\u001b[0m), (\u001b[31m3l\u001b[0m, \u001b[31m\"Kil\"\u001b[0m, \u001b[31m19l\u001b[0m)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m21l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m19l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                            Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpssljgfpb.scala:9:91 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(rearExtract((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m1l\u001b[0m, \u001b[31m\"Rash\"\u001b[0m, \u001b[31m21l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m\"Varsha\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}