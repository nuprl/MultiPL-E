{
  "name": "mbpp_632_move_zero",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        return nonzero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        val nonZero = num_list.filter(_ != 0)\n        val zero = num_list.filter(_ == 0)\n        nonZero ::: zero\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ++ zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else non_zero_list = non_zero_list :+ i\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) {\n                zero_list = zero_list :+ i\n            } else {\n                non_zero_list = non_zero_list :+ i\n            }\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val nonZeroList = num_list.filter(_ != 0)\n        val zeroList = num_list.filter(_ == 0)\n        nonZeroList ::: zeroList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ++ num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var result = List[Long]()\n        for (i <- num_list) {\n            if (i != 0) {\n                result = result :+ i\n            }\n        }\n        for (i <- num_list) {\n            if (i == 0) {\n                result = result :+ i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = List()\n        var non_zero_list : List[Long] = List()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = Nil\n        var non_zero_list : List[Long] = Nil\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ++ num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val (zeroes, nonzeroes) = num_list.partition(_ == 0)\n        nonzeroes ++ zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(_ != 0)\n        val zero_list = num_list.filter(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(_ != 0)\n        val zero_list = num_list.filter(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for(num <- num_list) {\n            if(num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var list = num_list\n        var i = 0\n        while(i < list.length) {\n            if(list(i) == 0) {\n                list = list.take(i) ++ list.drop(i+1) ++ List(0)\n            }\n            i += 1\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqxjns48c.scala:20)\n\tat Problem.main(tmpqxjns48c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(x => x != 0)\n        val zero_list = num_list.filter(x => x == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(x => x != 0)\n        val zero_list = num_list.filter(x => x == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(x => x != 0)\n        val zero_list = num_list.filter(x => x == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = ListBuffer[Long]()\n        val non_zero_list = ListBuffer[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list += i\n            else non_zero_list += i\n        }\n        non_zero_list.toList ::: zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, non_zeroes) = num_list.partition(_ == 0)\n        non_zeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ++ zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        return nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) {\n                zero_list = zero_list :+ i\n            } else {\n                non_zero_list = non_zero_list :+ i\n            }\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(_ != 0)\n        val zero_list = num_list.filter(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, nonzeroes) = num_list.partition(_ == 0)\n        nonzeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var list = num_list\n        var zero_list = List[Long]()\n        var i = 0\n        while (i < list.length) {\n            if (list(i) == 0) {\n                zero_list = zero_list :+ list(i)\n                list = list.filter(_ != 0)\n            }\n            i += 1\n        }\n        list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpew5pnupv.scala:19)\n\tat Problem.main(tmpew5pnupv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for(i <- num_list) {\n            if(i == 0) {\n                zero_list = zero_list :+ i\n            } else {\n                non_zero_list = non_zero_list :+ i\n            }\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = List()\n        var non_zero_list : List[Long] = List()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        return nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = Nil\n        var non_zero_list : List[Long] = Nil\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = ListBuffer[Long]()\n        val non_zero_list = ListBuffer[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list += num\n            else non_zero_list += num\n        }\n        non_zero_list.toList ++ zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        num_list.filter(x => x != 0) ++ num_list.filter(x => x == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ++ num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, nonzeroes) = num_list.partition(_ == 0)\n        nonzeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        return num_list.filter(_ != 0) ++ num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(x => x != 0) ::: num_list.filter(x => x == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n        for (i <- num_list) {\n            if (i != 0) {\n                result = result :+ i\n            }\n        }\n        for (i <- num_list) {\n            if (i == 0) {\n                result = result :+ i\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, nonzeroes) = num_list.partition(_ == 0)\n        nonzeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (num <- num_list) {\n            if (num != 0) result = result :+ num\n        }\n        for (num <- num_list) {\n            if (num == 0) result = result :+ num\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var zeroes = List[Long]()\n        var non_zeroes = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zeroes = zeroes :+ num\n            } else {\n                non_zeroes = non_zeroes :+ num\n            }\n        }\n        non_zeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else non_zero_list = non_zero_list :+ i\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = List()\n        var non_zero_list : List[Long] = List()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        return num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, non_zeroes) = num_list.partition(_ == 0)\n        non_zeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else nonzero_list = nonzero_list :+ i\n        }\n        return nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = ListBuffer[Long]()\n        val nonzero_list = ListBuffer[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list += num\n            else nonzero_list += num\n        }\n        nonzero_list.toList ++ zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val nonzero_list = num_list.filter(_ != 0)\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(x => x != 0)\n        val zero_list = num_list.filter(x => x == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = ListBuffer[Long]()\n        var non_zero_list = ListBuffer[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list += num\n            } else {\n                non_zero_list += num\n            }\n        }\n        non_zero_list.toList ::: zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(_ != 0)\n        val zero_list = num_list.filter(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        val zero_list = ListBuffer[Long]()\n        val non_zero_list = ListBuffer[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list += num\n            } else {\n                non_zero_list += num\n            }\n        }\n        non_zero_list.toList ++ zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (num <- num_list) {\n            if (num != 0) {\n                result = result :+ num\n            }\n        }\n        for (num <- num_list) {\n            if (num == 0) {\n                result = result :+ num\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = Nil\n        var non_zero_list : List[Long] = Nil\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123920,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else non_zero_list = non_zero_list :+ i\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ++ zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val non_zero_list = num_list.filter(_ != 0)\n        val zero_list = num_list.filter(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                non_zero_list = non_zero_list :+ num\n            }\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) {\n                zero_list = zero_list :+ i\n            } else {\n                non_zero_list = non_zero_list :+ i\n            }\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, non_zeroes) = num_list.partition(_ == 0)\n        non_zeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeroes, nonzeroes) = num_list.partition(_ == 0)\n        nonzeroes ::: zeroes\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var nonzero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else nonzero_list = nonzero_list :+ num\n        }\n        nonzero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ++ zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = new ListBuffer[Long]\n        val non_zero_list = new ListBuffer[Long]\n        for (num <- num_list) {\n            if (num == 0) zero_list += num\n            else non_zero_list += num\n        }\n        non_zero_list.toList ++ zero_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val (zero_list, non_zero_list) = num_list.partition(_ == 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(_ == 0)\n        val non_zero_list = num_list.filter(_ != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list : List[Long] = List()\n        var non_zero_list : List[Long] = List()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n        var zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) {\n                zero_list = zero_list :+ num\n            } else {\n                result = result :+ num\n            }\n        }\n        result = result ::: zero_list\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var list = num_list\n        var i = 0\n        while (i < list.length) {\n            if (list(i) == 0) {\n                list = list.take(i) ++ list.drop(i + 1) :+ 0\n            }\n            i += 1\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123921,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiiab3nsv.scala:18)\n\tat Problem.main(tmpiiab3nsv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (i <- num_list) {\n            if (i == 0) zero_list = zero_list :+ i\n            else non_zero_list = non_zero_list :+ i\n        }\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        non_zero_list ++ zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var l = num_list\n        var i = 0\n        while(i < l.length) {\n            if(l(i) == 0) {\n                l = l.take(i) ++ l.drop(i + 1) :+ 0\n            }\n            else {\n                i += 1\n            }\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123925,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Write your code here\n        return num_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm_edpfmj.scala:10)\n\tat Problem.main(tmpm_edpfmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val zero_list = num_list.filter(x => x == 0)\n        val non_zero_list = num_list.filter(x => x != 0)\n        non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123915,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        var zero_list = List[Long]()\n        var non_zero_list = List[Long]()\n        for (num <- num_list) {\n            if (num == 0) zero_list = zero_list :+ num\n            else non_zero_list = non_zero_list :+ num\n        }\n        return non_zero_list ::: zero_list\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        val (zeros, nonzeros) = num_list.partition(_ == 0)\n        nonzeros ::: zeros\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123905,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n        num_list.filter(_ != 0) ::: num_list.filter(_ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}