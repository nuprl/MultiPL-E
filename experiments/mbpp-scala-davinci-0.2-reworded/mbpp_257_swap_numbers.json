{
  "name": "mbpp_257_swap_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    def swapNumbers(a : Long, b : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapNumbers((10l), (20l)) == (20l, 10l));\n    assert(swapNumbers((15l), (17l)) == (17l, 15l));\n    assert(swapNumbers((100l), (200l)) == (200l, 100l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        val c = a\n        val d = b\n        return d\n        return c",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        var c = a\n        a = b\n        b = c\n        return a",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, (log10(a) + 1).toInt).toLong + a",
    "        return b * pow(10, floor(log10(a)).toInt + 1) + a",
    "        return b * pow(10, (log10(a) + 1).toInt).toLong + a",
    "        return b * pow(10, (log10(a) + 1)).toLong + a",
    "        var result : Long = 0\n        result = b * 100 + a\n        return result",
    "        return b * pow(10, numDigits(a)) + a",
    "        var temp = a\n        a = b\n        b = temp\n        return b",
    "        return a + b - (a = b)",
    "        var c = a\n        a = b\n        b = c\n        return b",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        val c = a\n        a = b\n        b = c\n        return b"
  ]
}