{
  "name": "mbpp_247_lps",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 1 until n) {\n            for (j <- 0 until n - i) {\n                if (str(j) == str(j + i)) dp(j)(j + i) = 2 + dp(j + 1)(j + i - 1)\n                else dp(j)(j + i) = max(dp(j + 1)(j + i), dp(j)(j + i - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 until n - l + 1) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i)(j - 1), dp(i + 1)(j))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n                val j = i + k\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n                val j = i + l\n                if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 1 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1; j <- i + 1 until n) {\n            if (str(i) == str(j)) dp(i)(j) = dp(i + 1)(j - 1) + 2\n            else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- n - 2 to 0 by -1) {\n            for (j <- i + 1 until n) {\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)",
    "        val n = str.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 1\n        for (i <- 0 until n - 1) {\n            if (str(i) == str(i + 1)) dp(i)(i + 1) = 2\n            else dp(i)(i + 1) = 1\n        }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                if (str(i) == str(j)) dp(i)(j) = 2 + dp(i + 1)(j - 1)\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n        }\n        dp(0)(n - 1)"
  ]
}