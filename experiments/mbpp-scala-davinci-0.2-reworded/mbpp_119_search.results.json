{
  "name": "mbpp_119_search",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                } else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else if (arr(mid) != arr(mid - 1)) search(arr, mid + 1, high)\n                    else search(arr, low, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpe5mn128a.scala:11)\n\tat Problem$.search(tmpe5mn128a.scala:22)\n\tat Problem$.main(tmpe5mn128a.scala:25)\n\tat Problem.main(tmpe5mn128a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510196,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpus03_0cn.scala:14)\n\tat Problem.main(tmpus03_0cn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length) {\n            if(i == 0) {\n                if(arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if(i == arr.length - 1) {\n                if(arr(i) != arr(i - 1)) return arr(i)\n            }\n            else {\n                if(arr(i) != arr(i + 1) && arr(i) != arr(i - 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpahubrref.scala:11)\n\tat Problem$.search(tmpahubrref.scala:21)\n\tat Problem$.main(tmpahubrref.scala:24)\n\tat Problem.main(tmpahubrref.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp_nu217bl.scala:11)\n\tat Problem$.search(tmp_nu217bl.scala:22)\n\tat Problem$.main(tmp_nu217bl.scala:25)\n\tat Problem.main(tmp_nu217bl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) {\n                    val diff = arr(mid) - arr(mid - 1)\n                    if (diff == 1) return search(arr, mid + 1, end)\n                    else return search(arr, start, mid - 2)\n                }\n                else {\n                    val diff = arr(mid + 1) - arr(mid)\n                    if (diff == 1) return search(arr, start, mid - 1)\n                    else return search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuv73lwwy.scala:35)\n\tat Problem.main(tmpuv73lwwy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_ihdmud.scala:20)\n\tat Problem.main(tmp8_ihdmud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m > 0 && arr(m) == arr(m - 1)) {\n                    if ((m - l) % 2 == 0) search(arr, l, m - 2)\n                    else search(arr, m + 1, r)\n                }\n                else if (m < arr.length - 1 && arr(m) == arr(m + 1)) {\n                    if ((r - m) % 2 == 0) search(arr, m + 2, r)\n                    else search(arr, l, m - 1)\n                }\n                else arr(m)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp_a1jjlpe.scala:10)\n\tat Problem$.main(tmp_a1jjlpe.scala:16)\n\tat Problem.main(tmp_a1jjlpe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                } else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpwsl_go07.scala:11)\n\tat Problem$.search(tmpwsl_go07.scala:21)\n\tat Problem$.main(tmpwsl_go07.scala:24)\n\tat Problem.main(tmpwsl_go07.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            } else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                } else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmptvvo0dd0.scala:11)\n\tat Problem$.search(tmptvvo0dd0.scala:21)\n\tat Problem$.main(tmptvvo0dd0.scala:24)\n\tat Problem.main(tmptvvo0dd0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else -1\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else -1\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                    else search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplhbyvg2k.scala:29)\n\tat Problem.main(tmplhbyvg2k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) return arr(i)\n            if (arr(i) != arr(i + 1)) return arr(i)\n            search(arr, i + 2)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(arr.length / 2) == arr(arr.length / 2 - 1)) return search(arr.slice(0, arr.length / 2))\n        if (arr(arr.length / 2) == arr(arr.length / 2 + 1)) return search(arr.slice(arr.length / 2 + 1, arr.length))\n        arr(arr.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp8v2horc3.scala:8)\n\tat Problem$.search(tmp8v2horc3.scala:8)\n\tat Problem$.main(tmp8v2horc3.scala:12)\n\tat Problem.main(tmp8v2horc3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            }\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510196,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpus03_0cn.scala:14)\n\tat Problem.main(tmpus03_0cn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        arr.groupBy(x => x).mapValues(_.size).filter(x => x._2 == 1).keys.head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        while (start < end) {\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) start = mid + 2\n                else end = mid\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) start = mid + 1\n                else end = mid - 1\n            }\n        }\n        arr(start)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.size == 1) return arr(0)\n        val mid = arr.size / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(mid + 1, arr.size))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(0, mid))\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpwx2kir7r.scala:8)\n\tat Problem$.main(tmpwx2kir7r.scala:13)\n\tat Problem.main(tmpwx2kir7r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else return arr(mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmprfn2wrhq.scala:10)\n\tat Problem$.search(tmprfn2wrhq.scala:20)\n\tat Problem$.main(tmprfn2wrhq.scala:23)\n\tat Problem.main(tmprfn2wrhq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid - 1) == arr(mid)) search(arr.slice(0, mid))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_1av62l2.scala:14)\n\tat Problem.main(tmp_1av62l2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid - 1) != arr(mid) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid - 1) == arr(mid)) search(arr, left, mid - 1)\n            else search(arr, mid + 1, right)\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvhu5zkdc.scala:17)\n\tat Problem.main(tmpvhu5zkdc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else 0\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw3yj4zgz.scala:20)\n\tat Problem.main(tmpw3yj4zgz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) -1 else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpso03bia0.scala:14)\n\tat Problem.main(tmpso03bia0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == high || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpz6hiyrcl.scala:11)\n\tat Problem$.search(tmpz6hiyrcl.scala:22)\n\tat Problem$.main(tmpz6hiyrcl.scala:25)\n\tat Problem.main(tmpz6hiyrcl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (1, arr.length - 2)\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        arr(left)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                    else arr(mid)\n                } else {\n                    if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                    else arr(mid)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp0vrhrg54.scala:11)\n\tat Problem$.search(tmp0vrhrg54.scala:21)\n\tat Problem$.main(tmp0vrhrg54.scala:24)\n\tat Problem.main(tmp0vrhrg54.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnnzww84f.scala:28)\n\tat Problem.main(tmpnnzww84f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpudt3hfay.scala:11)\n\tat Problem$.search(tmpudt3hfay.scala:22)\n\tat Problem$.main(tmpudt3hfay.scala:25)\n\tat Problem.main(tmpudt3hfay.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq26ruz2m.scala:20)\n\tat Problem.main(tmpq26ruz2m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            if (start + 1 == end) {\n                if (arr(start) == arr(end)) return arr(end)\n                else return arr(start)\n            }\n            val mid = (start + end) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) return search(arr, mid + 1, end)\n                else return search(arr, start, mid - 2)\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((end - mid) % 2 == 0) return search(arr, start, mid - 1)\n                else return search(arr, mid + 2, end)\n            }\n            else return arr(mid)\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123358,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8vublnnh.scala:26)\n\tat Problem.main(tmp8vublnnh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpya_kfbaq.scala:30)\n\tat Problem.main(tmpya_kfbaq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n            else arr(mid)\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsbjaqcs8.scala:14)\n\tat Problem.main(tmpsbjaqcs8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.size == 1) return arr(0)\n        if (arr(arr.size / 2) == arr(arr.size / 2 - 1)) search(arr.slice(0, arr.size / 2))\n        else if (arr(arr.size / 2) == arr(arr.size / 2 + 1)) search(arr.slice(arr.size / 2 + 1, arr.size))\n        else arr(arr.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpxje198f2.scala:8)\n\tat Problem$.main(tmpxje198f2.scala:12)\n\tat Problem.main(tmpxje198f2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 2\n                else r = m\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) == arr(1)) return search(arr.tail.tail)\n        if (arr(0) != arr(1)) return arr(0)\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(0, mid - 1))\n        } else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(mid + 2, arr.length))\n        } else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa7x2zmfo.scala:18)\n\tat Problem.main(tmpa7x2zmfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpya_kfbaq.scala:30)\n\tat Problem.main(tmpya_kfbaq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (arr(m) == arr(m - 1)) {\n                if (m % 2 == 0) l = m + 1\n                else r = m - 1\n            }\n            else {\n                if (m % 2 == 0) r = m - 1\n                else l = m + 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start + 1) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid + 1) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_ihdmud.scala:20)\n\tat Problem.main(tmp8_ihdmud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            }\n            else {\n                return arr(i)\n            }\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while(i < arr.length - 1) {\n            if(arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else if (arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpz_usd5iq.scala:11)\n\tat Problem$.search(tmpz_usd5iq.scala:22)\n\tat Problem$.main(tmpz_usd5iq.scala:25)\n\tat Problem.main(tmpz_usd5iq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - low) % 2 == 0) search(arr, low, mid - 2)\n                else search(arr, mid + 1, high)\n            }\n            else {\n                if ((high - mid) % 2 == 0) search(arr, mid + 2, high)\n                else search(arr, low, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, start, mid)\n                else search(arr, mid + 1, end)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 1)\n                else search(arr, mid, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzyygwkba.scala:20)\n\tat Problem.main(tmpzyygwkba.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        return arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else if (arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpz_usd5iq.scala:11)\n\tat Problem$.search(tmpz_usd5iq.scala:22)\n\tat Problem$.main(tmpz_usd5iq.scala:25)\n\tat Problem.main(tmpz_usd5iq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return -1\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) search(arr, low, mid - 2)\n                else search(arr, mid + 1, high)\n            }\n            else {\n                if ((mid - 1) % 2 == 0) search(arr, mid + 1, high)\n                else search(arr, low, mid - 2)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpub819_t7.scala:23)\n\tat Problem.main(tmpub819_t7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr.head\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptphabus1.scala:23)\n\tat Problem.main(tmptphabus1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6rw9tjzz.scala:14)\n\tat Problem.main(tmp6rw9tjzz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        arr.groupBy(identity).mapValues(_.size).filter(_._2 == 1).keys.head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while(i < arr.length - 1) {\n            if(arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, right)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, left, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                    else search(arr, left, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpor0g59ce.scala:28)\n\tat Problem.main(tmpor0g59ce.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                    else search(arr, mid + 2, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu_nswqh8.scala:22)\n\tat Problem.main(tmpu_nswqh8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        val mid = arr.length / 2\n        if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        else return search(arr.slice(0, mid))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid - 1) != arr(mid) && arr(mid + 1) != arr(mid)) return arr(mid)\n            if (arr(mid - 1) == arr(mid)) {\n                if ((mid - left) % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if ((right - mid) % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(1) else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(mid + 1, arr.length))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(0, mid))\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkx1wzglc.scala:14)\n\tat Problem.main(tmpkx1wzglc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return -1\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else search(arr, mid + 1, high)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprxduj2pj.scala:22)\n\tat Problem.main(tmprxduj2pj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpcz5nox5w.scala:12)\n\tat Problem$.main(tmpcz5nox5w.scala:25)\n\tat Problem.main(tmpcz5nox5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnnzww84f.scala:28)\n\tat Problem.main(tmpnnzww84f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123359,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            }\n            else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else search(arr, low, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else search(arr, low, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpslv9a4ek.scala:10)\n\tat Problem$.search(tmpslv9a4ek.scala:17)\n\tat Problem$.main(tmpslv9a4ek.scala:20)\n\tat Problem.main(tmpslv9a4ek.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (n == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, n))\n            else search(arr.slice(mid, n))\n        } else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid, n))\n            else search(arr.slice(mid + 1, n))\n        } else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpae6fz_lp.scala:19)\n\tat Problem.main(tmpae6fz_lp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp150ut1t2.scala:20)\n\tat Problem.main(tmp150ut1t2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.size == 1) return arr.head\n        if (arr.size == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.size / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.size))\n            else return search(arr.slice(mid, arr.size))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc201cdje.scala:23)\n\tat Problem.main(tmpc201cdje.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                    else arr(mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else arr(mid)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpykh1sq5l.scala:11)\n\tat Problem$.search(tmpykh1sq5l.scala:22)\n\tat Problem$.main(tmpykh1sq5l.scala:25)\n\tat Problem.main(tmpykh1sq5l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) == arr(1)) return search(arr.drop(2))\n        if (arr(0) != arr(1)) return arr(0)\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        arr.groupBy(identity).filter(_._2.length == 1).keys.head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], index : Int) : Long = {\n            if (index == arr.length - 1) arr(index)\n            else if (arr(index) == arr(index + 1)) search(arr, index + 2)\n            else arr(index)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                else search(arr, start, mid - 2)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else if (mid == arr.length - 1 || arr(mid) != arr(mid + 1)) arr(mid)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpdbe19v_f.scala:10)\n\tat Problem$.search(tmpdbe19v_f.scala:20)\n\tat Problem$.main(tmpdbe19v_f.scala:23)\n\tat Problem.main(tmpdbe19v_f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0) arr(m)\n                    else if (arr(m) == arr(m - 1)) search(arr, l, m - 2)\n                    else arr(m)\n                } else {\n                    if (m == arr.length - 1) arr(m)\n                    else if (arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpfgi3ecfq.scala:11)\n\tat Problem$.search(tmpfgi3ecfq.scala:22)\n\tat Problem$.main(tmpfgi3ecfq.scala:25)\n\tat Problem.main(tmpfgi3ecfq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n      arr.groupBy(identity).filter(x => x._2.length == 1).keys.toList.head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmppx7j028t.scala:11)\n\tat Problem$.search(tmppx7j028t.scala:22)\n\tat Problem$.main(tmppx7j028t.scala:25)\n\tat Problem.main(tmppx7j028t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, right)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, left, mid - 1)\n                }\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6ccohijs.scala:26)\n\tat Problem.main(tmp6ccohijs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        else if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        else {\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            if (left.length % 2 == 0) {\n                if (left(left.length - 1) == left(left.length - 2)) return search(right)\n                else return search(left)\n            }\n            else {\n                if (left(left.length - 1) == left(left.length - 2)) return search(left)\n                else return search(right)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp4piph9oo.scala:20)\n\tat Problem$.search(tmp4piph9oo.scala:16)\n\tat Problem$.main(tmp4piph9oo.scala:26)\n\tat Problem.main(tmp4piph9oo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            } else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(0, mid))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0m_um8tt.scala:23)\n\tat Problem.main(tmp0m_um8tt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, left, mid - 2)\n                else search(arr, mid + 2, right)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvshiydzq.scala:20)\n\tat Problem.main(tmpvshiydzq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n      // Fill up this function body\n      // You can add another function as well, if required\n      var i = 0\n      var j = arr.length - 1\n      while (i < j) {\n        val mid = (i + j) / 2\n        if (mid % 2 == 0) {\n          if (arr(mid) == arr(mid + 1)) i = mid + 2\n          else j = mid\n        }\n        else {\n          if (arr(mid) == arr(mid - 1)) i = mid + 1\n          else j = mid - 1\n        }\n      }\n      arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        arr.groupBy(x => x).filter(x => x._2.length == 1).map(x => x._1).head\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var left = 0\n        var right = n - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp_nu217bl.scala:11)\n\tat Problem$.search(tmp_nu217bl.scala:22)\n\tat Problem$.main(tmp_nu217bl.scala:25)\n\tat Problem.main(tmp_nu217bl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        val mid = arr.length / 2\n        if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        else return search(arr.slice(0, mid))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123379,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmp_a1jjlpe.scala:10)\n\tat Problem$.main(tmp_a1jjlpe.scala:16)\n\tat Problem.main(tmp_a1jjlpe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq26ruz2m.scala:20)\n\tat Problem.main(tmpq26ruz2m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmppx7j028t.scala:11)\n\tat Problem$.search(tmppx7j028t.scala:22)\n\tat Problem$.main(tmppx7j028t.scala:25)\n\tat Problem.main(tmppx7j028t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0 && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid == arr.length - 1 && arr(mid) != arr(mid - 1)) return arr(mid)\n            if (mid > 0 && mid < arr.length - 1 && arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) return search(arr, start, mid - 2)\n            else return search(arr, mid + 2, end)\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj8gekxcc.scala:19)\n\tat Problem.main(tmpj8gekxcc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        arr match {\n            case Nil => 0\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) search(xs) else x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else if (mid > 0 && arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else return arr(mid)\n            } else {\n                if (mid > 0 && arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else if (mid < arr.length - 1 && arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpdrund9q7.scala:10)\n\tat Problem$.search(tmpdrund9q7.scala:19)\n\tat Problem$.main(tmpdrund9q7.scala:22)\n\tat Problem.main(tmpdrund9q7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            } else {\n                return arr(i)\n            }\n        }\n        return arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpqs891_6m.scala:10)\n\tat Problem$.main(tmpqs891_6m.scala:16)\n\tat Problem.main(tmpqs891_6m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var start = 0\n        var end = arr.length - 1\n        while (start < end) {\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) start = mid + 2\n                else end = mid\n            } else {\n                if (arr(mid) == arr(mid - 1)) start = mid + 1\n                else end = mid - 1\n            }\n        }\n        return arr(start)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) {\n                    if ((mid - start) % 2 == 0) return search(arr, mid + 1, end)\n                    else return search(arr, start, mid - 2)\n                }\n                else {\n                    if ((end - mid) % 2 == 0) return search(arr, start, mid - 1)\n                    else return search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpik4wug2d.scala:32)\n\tat Problem.main(tmpik4wug2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        search(arr.slice(1, arr.length - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else return arr(mid)\n            } else {\n                if (arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp1eyqwn8p.scala:10)\n\tat Problem$.search(tmp1eyqwn8p.scala:19)\n\tat Problem$.main(tmp1eyqwn8p.scala:22)\n\tat Problem.main(tmp1eyqwn8p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp_nu217bl.scala:11)\n\tat Problem$.search(tmp_nu217bl.scala:22)\n\tat Problem$.main(tmp_nu217bl.scala:25)\n\tat Problem.main(tmp_nu217bl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_ihdmud.scala:20)\n\tat Problem.main(tmp8_ihdmud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        val n = arr.length\n        var l = 0\n        var r = n - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (m == 0 || m == n - 1) return arr(m)\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) l = m + 1\n                else r = m - 2\n            }\n            else {\n                if ((r - m) % 2 == 0) r = m - 1\n                else l = m + 2\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_kpx6jla.scala:25)\n\tat Problem.main(tmp_kpx6jla.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_ihdmud.scala:20)\n\tat Problem.main(tmp8_ihdmud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpcz5nox5w.scala:12)\n\tat Problem$.main(tmpcz5nox5w.scala:25)\n\tat Problem.main(tmpcz5nox5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((mid - start) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123398,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123399,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpem84ouum.scala:26)\n\tat Problem.main(tmpem84ouum.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8_ihdmud.scala:20)\n\tat Problem.main(tmp8_ihdmud.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp89wyq598.scala:23)\n\tat Problem.main(tmp89wyq598.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123397,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmppx7j028t.scala:11)\n\tat Problem$.search(tmppx7j028t.scala:22)\n\tat Problem$.main(tmppx7j028t.scala:25)\n\tat Problem.main(tmppx7j028t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else if (mid == arr.length - 1 || arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp4jt3gw4n.scala:11)\n\tat Problem$.search(tmp4jt3gw4n.scala:22)\n\tat Problem$.main(tmp4jt3gw4n.scala:25)\n\tat Problem.main(tmp4jt3gw4n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppuwr16sk.scala:23)\n\tat Problem.main(tmppuwr16sk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) right = mid - 2\n                else left = mid + 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((right - mid) % 2 == 0) left = mid + 2\n                else right = mid - 1\n            }\n            else return arr(mid)\n        }\n        return arr(left)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n      if (arr.length == 1) return arr(0)\n      if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else arr(1)\n      val mid = arr.length / 2\n      if (arr(mid) == arr(mid - 1)) {\n        if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n        else search(arr.slice(mid, arr.length))\n      }\n      else if (arr(mid) == arr(mid + 1)) {\n        if (mid % 2 == 0) search(arr.slice(0, mid))\n        else search(arr.slice(0, mid + 1))\n      }\n      else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd7bbc0yw.scala:20)\n\tat Problem.main(tmpd7bbc0yw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - l) % 2 == 0) l = mid + 1\n                else r = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((r - mid) % 2 == 0) r = mid - 1\n                else l = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpblg2ceka.scala:10)\n\tat Problem$.main(tmpblg2ceka.scala:23)\n\tat Problem.main(tmpblg2ceka.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz_bx584p.scala:24)\n\tat Problem.main(tmpz_bx584p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (mid == arr.length - 1 && arr(mid) != arr(mid - 1)) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpuxlenvem.scala:21)\n\tat Problem.main(tmpuxlenvem.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 2, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpuq_m5a0c.scala:11)\n\tat Problem$.search(tmpuq_m5a0c.scala:22)\n\tat Problem$.main(tmpuq_m5a0c.scala:25)\n\tat Problem.main(tmpuq_m5a0c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) arr(0)\n        else if (arr.length == 2) if (arr(0) == arr(1)) arr(0) else -1\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n            else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n            else arr(mid)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph421793z.scala:16)\n\tat Problem.main(tmph421793z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(0, mid - 1))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(mid + 1, arr.length))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzwts8kas.scala:19)\n\tat Problem.main(tmpzwts8kas.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(0, mid))\n        }\n        else arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7jb6p3eq.scala:20)\n\tat Problem.main(tmp7jb6p3eq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(0, mid))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(mid + 1, arr.length))\n        return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp354a7u_n.scala:14)\n\tat Problem.main(tmp354a7u_n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) return -1\n            val mid = (l + r) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) return search(arr, mid + 1, r)\n                else return search(arr, l, mid - 1)\n            }\n            if (arr(mid) == arr(mid + 1)) {\n                if (mid % 2 == 0) return search(arr, l, mid - 1)\n                else return search(arr, mid + 1, r)\n            }\n            -1\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnjlwaply.scala:31)\n\tat Problem.main(tmpnjlwaply.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left + 1) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((mid - left + 1) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n            else return arr(mid)\n        }\n        return arr(left)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgn93c8_7.scala:23)\n\tat Problem.main(tmpgn93c8_7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        arr(l)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, mid + 1, high)\n                else search(arr, low, mid - 1)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, low, mid - 1)\n                else search(arr, mid + 1, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcvui30pf.scala:23)\n\tat Problem.main(tmpcvui30pf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1665510197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppuwr16sk.scala:23)\n\tat Problem.main(tmppuwr16sk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp150ut1t2.scala:20)\n\tat Problem.main(tmp150ut1t2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmpudt3hfay.scala:11)\n\tat Problem$.search(tmpudt3hfay.scala:22)\n\tat Problem$.main(tmpudt3hfay.scala:25)\n\tat Problem.main(tmpudt3hfay.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) arr(m)\n                    else if (arr(m) != arr(m - 1)) search(arr, l, m - 1)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 5\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search$1(tmp546drn1f.scala:11)\n\tat Problem$.search(tmp546drn1f.scala:22)\n\tat Problem$.main(tmp546drn1f.scala:25)\n\tat Problem.main(tmp546drn1f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) arr(l)\n            else {\n                val mid = (l + r) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, r)\n                    else search(arr, l, mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, r)\n                    else search(arr, l, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123418,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.search(tmpsdtx3n66.scala:10)\n\tat Problem$.main(tmpsdtx3n66.scala:23)\n\tat Problem.main(tmpsdtx3n66.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) i = mid + 2\n                else j = mid\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) i = mid + 1\n                else j = mid - 1\n            }\n        }\n        arr(i)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        if (arr.size == 1) return arr(0)\n        if (arr(arr.size / 2) == arr(arr.size / 2 - 1)) return search(arr.slice(0, arr.size / 2))\n        if (arr(arr.size / 2) == arr(arr.size / 2 + 1)) return search(arr.slice(arr.size / 2, arr.size))\n        return arr(arr.size / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi0frzccp.scala:12)\n\tat Problem.main(tmpi0frzccp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return search(arr, mid + 1, high)\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return search(arr, low, mid - 1)\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) return search(arr, low, mid - 2)\n                else return search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd78qq2s_.scala:27)\n\tat Problem.main(tmpd78qq2s_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) i = mid + 1\n                else j = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) i = mid + 1\n                else j = mid - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}