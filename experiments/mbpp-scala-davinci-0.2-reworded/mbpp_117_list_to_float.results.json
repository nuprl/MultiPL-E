{
  "name": "mbpp_117_list_to_float",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxcg16yop.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxcg16yop.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxcg16yop.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- 0 until test_list.length) {\n            try {\n                float_list = float_list :+ test_list(i).toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        return test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_ayi03t.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_ayi03t.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_ayi03t.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception => result = result :+ 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_969ul.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_969ul.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_969ul.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e : NumberFormatException =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8g_uhn5.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8g_uhn5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8g_uhn5.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception => {\n                    println(\"Cannot convert \" + test_list(i) + \" to float\")\n                }\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1oooex9.scala:19:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1oooex9.scala:19:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd1oooex9.scala:19:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 until test_list.length) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            }\n            catch {\n                case e : Exception => {\n                    println(\"Not a float\")\n                }\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfnf2si8.scala:20:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfnf2si8.scala:20:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjfnf2si8.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo72munt9.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo72munt9.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo72munt9.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception => println(\"Cannot convert \" + i + \" to float\")\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: NumberFormatException =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppv7nyeeq.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppv7nyeeq.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppv7nyeeq.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception => println(\"Cannot convert \" + i + \" to float\")\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptrt119kd.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpan1gpvqs.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpan1gpvqs.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpan1gpvqs.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for(i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheqt4gre.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheqt4gre.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpheqt4gre.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception => println(\"Error: \" + e.getMessage)\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp509zx88e.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp509zx88e.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp509zx88e.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 until test_list.length) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph7paqhm5.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph7paqhm5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph7paqhm5.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case _ : Throwable =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7owfo9yj.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7owfo9yj.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7owfo9yj.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until test_list.length) {\n            try {\n                result = result :+ test_list(i).toFloat\n            } catch {\n                case e: Exception => println(\"Not a float\")\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jk6r7_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jk6r7_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe5jk6r7_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvp5vkg7.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvp5vkg7.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzvp5vkg7.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- 0 until test_list.length) {\n            try {\n                float_list = float_list :+ test_list(i).toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpghc9345w.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw4kqk1po.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw4kqk1po.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw4kqk1po.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy5yis76x.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for(x <- test_list) {\n            try {\n                result_list = result_list :+ x.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuigwj27r.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuigwj27r.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuigwj27r.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = List()\n        for (i <- 0 until test_list.length) {\n            try {\n                float_list = float_list :+ test_list(i).toFloat\n            }\n            catch {\n                case e : Exception => {\n                    println(\"Cannot convert \" + test_list(i) + \" to float.\")\n                }\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphp3kjyoc.scala:20:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphp3kjyoc.scala:20:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphp3kjyoc.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : NumberFormatException =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd_ajpl9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd_ajpl9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd_ajpl9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception => println(\"Cannot convert to float\")\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz9ylx89z.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz9ylx89z.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz9ylx89z.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5b_8o0jl.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5b_8o0jl.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5b_8o0jl.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdwybuhez.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => println(\"Cannot convert \" + i + \" to float\")\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8ncvc98.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8ncvc98.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8ncvc98.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 until test_list.length) {\n            try {\n                result = result :+ test_list(i).toFloat\n            } catch {\n                case _ : Throwable =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124016,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxsva6fs.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxsva6fs.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxsva6fs.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = List()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                float_list = float_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception => println(\"Cannot convert \" + test_list(i) + \" to float\")\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6fu6g7o.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6fu6g7o.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6fu6g7o.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        val float_list : List[Float] = test_list.map(x => x.toFloat)\n        float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_edqw63.scala:10:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_edqw63.scala:10:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8_edqw63.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = List()\n        for (i <- 0 until test_list.length) {\n            try {\n                float_list = float_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bt_yo7u.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bt_yo7u.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bt_yo7u.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until test_list.length) {\n            try {\n                result = result :+ test_list(i).toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt5b8mcpv.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt5b8mcpv.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt5b8mcpv.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                result = result :+ test_list(i).toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnf01yij7.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnf01yij7.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnf01yij7.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        val float_list = test_list.map(x => x.toFloat)\n        float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit_9fzps.scala:10:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit_9fzps.scala:10:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpit_9fzps.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case e: Exception => {\n                    println(\"Cannot convert \" + i + \" to float\")\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplf3_z59u.scala:20:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplf3_z59u.scala:20:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplf3_z59u.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp505wpltu.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp505wpltu.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp505wpltu.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy2twwjw.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e : Exception => println(e)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_513koc.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_513koc.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg_513koc.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph401ziig.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph401ziig.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph401ziig.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for(i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg033vlx5.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg033vlx5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg033vlx5.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyqigfrx.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyqigfrx.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptyqigfrx.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe7qy9gyt.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => result = result :+ 0.0f\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124017,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hw70dme.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hw70dme.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8hw70dme.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxnonwa2.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxnonwa2.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxnonwa2.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8mpv6v.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        val list = test_list.map(x => x.toFloat)\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_7lf1qld.scala:10:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_7lf1qld.scala:10:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_7lf1qld.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (x <- test_list) {\n            try {\n                result = result :+ x.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_pg6x78.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_pg6x78.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_pg6x78.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: NumberFormatException =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0ff7iqs.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0ff7iqs.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0ff7iqs.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list : List[Float] = List()\n        for (i <- 0 to test_list.length - 1) {\n            try {\n                result_list = result_list :+ test_list(i).toFloat\n            } catch {\n                case e : Exception => {}\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd16chw_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd16chw_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd16chw_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (element <- test_list) {\n            try {\n                result = result :+ element.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ye4nldr.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ye4nldr.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ye4nldr.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2edljiay.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2edljiay.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2edljiay.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpge7lyvs9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var float_list : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                float_list = float_list :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return float_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mz5m51q.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mz5m51q.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4mz5m51q.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = Nil\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : NumberFormatException =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91glqo38.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91glqo38.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91glqo38.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result_list = List[Float]()\n        for (i <- test_list) {\n            try {\n                result_list = result_list :+ i.toFloat\n            } catch {\n                case e: NumberFormatException => println(\"Not a float\")\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn3ev8zo.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn3ev8zo.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsn3ev8zo.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result = List[Float]()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e: Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcquq8vr0.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            } catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph9lwhtq_.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        test_list.map(x => x.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1665509728,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                     Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                                Required: String\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawmdr1v8.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[String]) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- test_list) {\n            try {\n                result = result :+ i.toFloat\n            }\n            catch {\n                case e : Exception =>\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[String]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Float]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[String]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Float]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[String]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Float]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n",
      "timestamp": 1666124018,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                     Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0m), (\u001b[31m7.32f\u001b[0m, \u001b[31m8.0f\u001b[0m), (\u001b[31m4.0f\u001b[0m, \u001b[31m8.0f\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mString\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                              Required: String\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv066h6c2.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listToFloat((List[\u001b[35mString\u001b[0m]((\u001b[31m\"3\"\u001b[0m, \u001b[31m\"4\"\u001b[0m), (\u001b[31m\"1\"\u001b[0m, \u001b[31m\"26.45\"\u001b[0m), (\u001b[31m\"7.32\"\u001b[0m, \u001b[31m\"8\"\u001b[0m), (\u001b[31m\"4\"\u001b[0m, \u001b[31m\"8\"\u001b[0m)))).equals((List[\u001b[35mFloat\u001b[0m]((\u001b[31m3.0f\u001b[0m, \u001b[31m4.0f\u001b[0m), (\u001b[31m1.0f\u001b[0m, \u001b[31m26.45f\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}