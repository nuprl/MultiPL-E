{
  "name": "mbpp_769_Diff",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the difference between two lists.\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set -- li2_set\n        val li2_diff_li1 = li2_set -- li1_set\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for(i <- li2) {\n            if(!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val diff = li1Set.diff(li2Set)\n        diff.toList",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val set3 = set1 -- set2\n        val set4 = set2 -- set1\n        (set3 ++ set4).toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3"
  ]
}