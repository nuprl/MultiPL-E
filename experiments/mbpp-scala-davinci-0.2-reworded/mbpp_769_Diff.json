{
  "name": "mbpp_769_Diff",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the difference between two lists.\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set -- li2_set\n        val li2_diff_li1 = li2_set -- li1_set\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for(i <- li2) {\n            if(!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val diff = li1Set.diff(li2Set)\n        diff.toList",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val set3 = set1 -- set2\n        val set4 = set2 -- set1\n        (set3 ++ set4).toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        val li5 = li3.diff(li4)\n        val li6 = li5.toList\n        return li6",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        // Write your code here\n        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        if (li1.isEmpty) return li2\n        if (li2.isEmpty) return li1\n        if (li1.head == li2.head) return Diff(li1.tail, li2.tail)\n        if (li1.head < li2.head) return li1.head :: Diff(li1.tail, li2)\n        return li2.head :: Diff(li1, li2.tail)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        // Write your code here\n        li1.diff(li2)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        // Write your code here\n        li1.diff(li2)",
    "        var li : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        val diff = li1_diff_li2.union(li2_diff_li1)\n        diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        (li1Diff ++ li2Diff).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        var li4 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li4 = i :: li4\n        }\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for(i <- li2) {\n            if(!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val diff = li1_set.diff(li2_set)\n        diff.toList",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for(i <- li2) {\n            if(!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.diff(li2)\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for(i <- li2) {\n            if(!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        (li1Diff.toList ::: li2Diff.toList).sorted",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li = i :: li\n        }\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set -- li2_set\n        val li2_diff_li1 = li2_set -- li1_set\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        val liDiff = li1Diff.union(li2Diff)\n        liDiff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li3_set = li1_set -- li2_set\n        val li4_set = li2_set -- li1_set\n        val li5_set = li3_set ++ li4_set\n        li5_set.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for(i <- li1) {\n            if(!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        val liDiff = li1Diff.union(li2Diff)\n        liDiff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        li1.foreach(x => {\n            if (!li2.contains(x)) li3 = x :: li3\n        })\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        var li4 = List[Long]()\n        var li5 = List[Long]()\n        var li6 = List[Long]()\n        li3 = li1.filter(!li2.contains(_))\n        li4 = li2.filter(!li1.contains(_))\n        li5 = li3 ::: li4\n        li6 = li5.distinct\n        return li6",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        val li_diff = li1_diff_li2.union(li2_diff_li1)\n        li_diff.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val diff = li1_set.diff(li2_set)\n        diff.toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = li1.toSet -- li2.toSet\n        return li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        val s1 = li1.toSet\n        val s2 = li2.toSet\n        (s1 diff s2).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet -- li2.toSet\n        li.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        var li3 = List[Long]()\n        var li4 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li4 = i :: li4\n            }\n        }\n        return li3 ::: li4",
    "        val l1 = li1.toSet\n        val l2 = li2.toSet\n        (l1 -- l2).toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1SetDiff = li1Set.diff(li2Set)\n        val li2SetDiff = li2Set.diff(li1Set)\n        val liSetDiff = li1SetDiff.union(li2SetDiff)\n        return liSetDiff.toList",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        (li3 -- li4).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.filter(x => !li2.contains(x))\n        val li4 = li2.filter(x => !li1.contains(x))\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        val li_diff = li1_diff_li2.union(li2_diff_li1)\n        li_diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff = li1_set.diff(li2_set)\n        val li2_diff = li2_set.diff(li1_set)\n        val diff = li1_diff.union(li2_diff)\n        diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        return li3",
    "        return li1.diff(li2)",
    "        li1.diff(li2)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet -- li2.toSet\n        li.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        (li3 -- li4).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val set3 = set1.diff(set2)\n        val set4 = set2.diff(set1)\n        (set3.toList ::: set4.toList).sorted",
    "        var li3 = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff = li1_set -- li2_set\n        val li2_diff = li2_set -- li1_set\n        val li_diff = li1_diff ++ li2_diff\n        return li_diff.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        // Fill up this function body\n        // It should return the difference of two lists\n        li1.diff(li2)",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val diff_set = li1_set.diff(li2_set)\n        diff_set.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val diff = li1_set.diff(li2_set)\n        diff.toList",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        val diff = li1_diff_li2.union(li2_diff_li1)\n        diff.toList",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li = i :: li\n        }\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        val li5 = li3 ++ li4\n        li5",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        (li1Diff ++ li2Diff).toList"
  ]
}