{
  "name": "mbpp_602_first_repeated_char",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first repeated character in a given string.\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstRepeatedChar((\"abcabc\")).equals(\"a\"));\n    assert(firstRepeatedChar((\"abc\")).equals(None));\n    assert(firstRepeatedChar((\"123123\")).equals(\"1\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(p => p._2 > 1).map(p => p._1).toList.sorted.headOption\n        firstRepeatedChar.map(c => c.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString())\n            }\n            charMap.put(c, 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).keys.toList.sorted.headOption\n        firstRepeatedChar match {\n            case Some(c) => Some(c.toString)\n            case None => None\n        }",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).headOption\n        firstRepeatedChar match {\n            case Some(x) => Some(x._1.toString)\n            case None => None\n        }",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeated = charCount.find(p => p._2 > 1)\n        if (firstRepeated.isEmpty) {\n            None\n        } else {\n            Some(firstRepeated.get._1.toString)\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val map = Map[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                map += (c.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toList\n        val str10 = str9.map(x => str2.count(_ == x))\n        val str11 = str10.zip(str9)\n        val str12 = str11.filter(x => x._1 > 1)\n        if (str12.isEmpty) None\n        else Some(str12.head._2.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            map(str(i)) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = scala.collection.mutable.Map[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).keys.toList.sorted.headOption\n        firstRepeatedChar",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None"
  ]
}