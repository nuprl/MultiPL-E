{
  "name": "mbpp_602_first_repeated_char",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first repeated character in a given string.\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstRepeatedChar((\"abcabc\")).equals(\"a\"));\n    assert(firstRepeatedChar((\"abc\")).equals(None));\n    assert(firstRepeatedChar((\"123123\")).equals(\"1\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(p => p._2 > 1).map(p => p._1).toList.sorted.headOption\n        firstRepeatedChar.map(c => c.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString())\n            }\n            charMap.put(c, 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).keys.toList.sorted.headOption\n        firstRepeatedChar match {\n            case Some(c) => Some(c.toString)\n            case None => None\n        }",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).headOption\n        firstRepeatedChar match {\n            case Some(x) => Some(x._1.toString)\n            case None => None\n        }",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeated = charCount.find(p => p._2 > 1)\n        if (firstRepeated.isEmpty) {\n            None\n        } else {\n            Some(firstRepeated.get._1.toString)\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val map = Map[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                return Some(c.toString)\n            } else {\n                map += (c.toString -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toList\n        val str10 = str9.map(x => str2.count(_ == x))\n        val str11 = str10.zip(str9)\n        val str12 = str11.filter(x => x._1 > 1)\n        if (str12.isEmpty) None\n        else Some(str12.head._2.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            map(str(i)) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = scala.collection.mutable.Map[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).keys.toList.sorted.headOption\n        firstRepeatedChar",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var str = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.filter(x => x._2 > 1).keys.toList.sorted.headOption\n        firstRepeatedChar match {\n            case Some(c) => Some(c.toString)\n            case None => None\n        }",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toList\n        val str10 = str9.zipWithIndex\n        val str11 = str10.map(x => (x._1, x._2, str2.indexOf(x._1)))\n        val str12 = str11.filter(x => x._2 != x._3)\n        val str13 = str12.map(x => x._1)\n        val str14 = str13.headOption\n        str14",
    "        val str = str1.toLowerCase\n        val charMap = HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val charArray = str1.toCharArray\n        val charSet = new HashSet[Char]\n        for (c <- charArray) {\n            if (charSet.contains(c)) {\n                return Some(c.toString)\n            }\n            charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap.put(str(i), 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                charMap(str(i)) += 1\n            } else {\n                charMap(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (charMap(str(i)) > 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        var str2 : String = str1.toLowerCase\n        var str3 : String = str2.replaceAll(\"\\\\s\", \"\")\n        var str4 : String = str3.replaceAll(\"[^a-z]\", \"\")\n        var str5 : String = str4.replaceAll(\"[a-z]\", \"\")\n        var str6 : String = str5.replaceAll(\"[0-9]\", \"\")\n        var str7 : String = str6.replaceAll(\"[^a-z]\", \"\")\n        var str8 : String = str7.replaceAll(\"[a-z]\", \"\")\n        var str9 : String = str8.replaceAll(\"[0-9]\", \"\")\n        var str10 : String = str9.replaceAll(\"[^a-z]\", \"\")\n        var str11 : String = str10.replaceAll(\"[a-z]\", \"\")\n        var str12 : String = str11.replaceAll(\"[0-9]\", \"\")\n        var str13 : String = str12.replaceAll(\"[^a-z]\", \"\")\n        var str14 : String = str13.replaceAll(\"[a-z]\", \"\")\n        var str15 : String = str14.replaceAll(\"[0-9]\", \"\")\n        var str16 : String = str15.replaceAll(\"[^a-z]\", \"\")\n        var str17 : String = str16.replaceAll(\"[a-z]\", \"\")\n        var str18 : String = str17.replaceAll(\"[0-9]\", \"\")\n        var str19 : String = str18.replaceAll(\"[^a-z]\", \"\")\n        var str20 : String = str19.replaceAll(\"[a-z]\", \"\")\n        var str21 : String = str20.replaceAll(\"[0-9]\", \"\")\n        var str22 : String = str21.replaceAll(\"[^a-z]\", \"\")\n        var str23 : String = str22.replaceAll(\"[a-z]\", \"\")\n        var str24 : String = str23.replaceAll(\"[0-9]\", \"\")\n        var str25 : String = str24",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeated = charCount.find(p => p._2 > 1)\n        if (firstRepeated.isDefined) {\n            Some(firstRepeated.get._1.toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        var charMap = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            if (charMap.contains(str1(i).toString)) {\n                return Some(str1(i).toString)\n            }\n            else {\n                charMap += (str1(i).toString -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString())\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        var charMap = Map[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charMap = new HashMap[Char, Int]\n        for (c <- charArray) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c))\n                return Some(c.toString)\n            else\n                charSet += c\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 to str.length() - 1) {\n            if (charMap.contains(str.charAt(i))) {\n                return Some(str.charAt(i).toString())\n            } else {\n                charMap.put(str.charAt(i), 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str5.toList\n        val str7 = str6.map(x => str2.count(_ == x))\n        val str8 = str7.zip(str6)\n        val str9 = str8.filter(x => x._1 > 1)\n        if(str9.isEmpty) None\n        else Some(str9.head._2.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.find(x => x._2 > 1)\n        if (firstRepeatedChar.isEmpty) {\n            None\n        } else {\n            Some(firstRepeatedChar.get._1.toString())\n        }",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val len = str.length\n        var charMap = Map[Char, Int]()\n        for (i <- 0 until len) {\n            val c = str(i)\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        val firstRepeatedChar = charMap.filter(x => x._2 > 1).keys.toList.headOption\n        firstRepeatedChar",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val charMap = Map[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length()) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString())\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charList = str.toList\n        val charSet = charList.toSet\n        val charMap = charSet.map(x => (x, charList.count(_ == x))).toMap\n        val repeatedChar = charMap.filter(x => x._2 > 1).keys.toList\n        if (repeatedChar.isEmpty) None else Some(repeatedChar.head.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) return Some(c.toString)\n        }\n        None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val set = Set[Char]()\n        for (c <- str) {\n            if (set.contains(c)) return Some(c.toString)\n            else set += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        var str = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString())\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase()\n        val str3 = str2.toCharArray()\n        val str4 = str3.toSet\n        val str5 = str4.toArray\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray()\n        val str9 = str8.toSet\n        val str10 = str9.toArray\n        val str11 = str10.sorted\n        val str12 = str11.mkString\n        val str13 = str12.toCharArray()\n        val str14 = str13.toSet\n        val str15 = str14.toArray\n        val str16 = str15.sorted\n        val str17 = str16.mkString\n        val str18 = str17.toCharArray()\n        val str19 = str18.toSet\n        val str20 = str19.toArray\n        val str21 = str20.sorted\n        val str22 = str21.mkString\n        val str23 = str22.toCharArray()\n        val str24 = str23.toSet\n        val str25 = str24.toArray\n        val str26 = str25.sorted\n        val str27 = str26.mkString\n        val str28 = str27.toCharArray()\n        val str29 = str28.toSet\n        val str30 = str29.toArray\n        val str31 = str30.sorted\n        val str32 = str31.mkString\n        val str33 = str32.toCharArray()\n        val str34 = str33.toSet\n        val str35 = str34.toArray\n        val str36 = str35.sorted\n        val str37 = str36.mkString\n        val str38 = str37.toCharArray()\n        val str39 = str38.toSet\n        val str40 = str39.toArray\n        val str41 = str40.sorted\n        val str42 = str41.mkString\n        val str43 = str42.toCharArray()\n        val str44 = str43.toSet\n        val str45 = str44.toArray\n        val str46 = str45",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val charList = str1.toList\n        val charSet = charList.toSet\n        val charMap = charList.groupBy(identity).mapValues(_.size)\n        val charMapFiltered = charMap.filter(x => x._2 > 1)\n        if (charMapFiltered.isEmpty) None\n        else Some(charMapFiltered.head._1.toString)",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val char = str.charAt(i)\n            if (charMap.contains(char)) return Some(char.toString)\n            else charMap += (char -> 1)\n        }\n        None",
    "        val str2 = str1.toLowerCase()\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str5.toList\n        val str7 = str6.sorted\n        val str8 = str7.mkString\n        val str9 = str8.toList\n        val str10 = str9.map(x => str2.count(_ == x))\n        val str11 = str10.zip(str9)\n        val str12 = str11.filter(x => x._1 > 1)\n        val str13 = str12.map(x => x._2.toString)\n        val str14 = str13.headOption\n        return str14",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        var charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) {\n                return Some(c.toString)\n            }\n            charSet += c\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i).toString)) {\n                return Some(str1(i).toString)\n            }\n            else {\n                map += (str1(i).toString -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.find(x => x._2 > 1)\n        if (firstRepeatedChar.isEmpty) None else Some(firstRepeatedChar.get._1.toString)",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str5.toList\n        val str7 = str6.map(x => str2.count(y => y == x))\n        val str8 = str7.zip(str6)\n        val str9 = str8.filter(x => x._1 > 1)\n        if (str9.isEmpty) None\n        else Some(str9.head._2.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charMap = Map[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            charCount(c) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until charArray.length) {\n            if (charMap.contains(charArray(i))) {\n                return Some(charArray(i).toString)\n            }\n            else {\n                charMap += (charArray(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount += (c -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstRepeatedChar = charCount.find(x => x._2 > 1)\n        if (firstRepeatedChar.isEmpty) {\n            None\n        } else {\n            Some(firstRepeatedChar.get._1.toString)\n        }",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            } else {\n                map.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charCount.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charCount += (str(i) -> 1)\n            }\n        }\n        return None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.toSet\n        val str6 = str5.toList\n        val str7 = str6.sorted\n        val str8 = str7.mkString\n        val str9 = str8.toCharArray\n        val str10 = str9.toList\n        val str11 = str10.toSet\n        val str12 = str11.toList\n        val str13 = str12.sorted\n        val str14 = str13.mkString\n        val str15 = str14.toCharArray\n        val str16 = str15.toList\n        val str17 = str16.toSet\n        val str18 = str17.toList\n        val str19 = str18.sorted\n        val str20 = str19.mkString\n        val str21 = str20.toCharArray\n        val str22 = str21.toList\n        val str23 = str22.toSet\n        val str24 = str23.toList\n        val str25 = str24.sorted\n        val str26 = str25.mkString\n        val str27 = str26.toCharArray\n        val str28 = str27.toList\n        val str29 = str28.toSet\n        val str30 = str29.toList\n        val str31 = str30.sorted\n        val str32 = str31.mkString\n        val str33 = str32.toCharArray\n        val str34 = str33.toList\n        val str35 = str34.toSet\n        val str36 = str35.toList\n        val str37 = str36.sorted\n        val str38 = str37.mkString\n        val str39 = str38.toCharArray\n        val str40 = str39.toList\n        val str41 = str40.toSet\n        val str42 = str41.toList\n        val str43 = str42.sorted\n        val str44 = str43.mkString\n        val str45 = str44.toCharArray\n        val str46 = str45.toList\n        val str47 = str46",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap += (c -> (charMap(c) + 1))\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        val firstRepeatedChar = charMap.find(x => x._2 > 1)\n        if (firstRepeatedChar.isDefined) {\n            Some(firstRepeatedChar.get._1.toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charSet = new HashSet[Char]\n        for (c <- charArray) {\n            if (charSet.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charSet += c\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str2.toList\n        val str7 = str6.diff(str5.toList)\n        val str8 = str7.mkString\n        val str9 = str8.toList\n        val str10 = str9.distinct\n        val str11 = str10.mkString\n        val str12 = str11.toList\n        val str13 = str12.head.toString\n        val str14 = str13.toUpperCase\n        val str15 = str14.toList\n        val str16 = str15.mkString\n        val str17 = str16.toList\n        val str18 = str17.head.toString\n        val str19 = str18.toUpperCase\n        val str20 = str19.toList\n        val str21 = str20.mkString\n        val str22 = str21.toList\n        val str23 = str22.head.toString\n        val str24 = str23.toUpperCase\n        val str25 = str24.toList\n        val str26 = str25.mkString\n        val str27 = str26.toList\n        val str28 = str27.head.toString\n        val str29 = str28.toUpperCase\n        val str30 = str29.toList\n        val str31 = str30.mkString\n        val str32 = str31.toList\n        val str33 = str32.head.toString\n        val str34 = str33.toUpperCase\n        val str35 = str34.toList\n        val str36 = str35.mkString\n        val str37 = str36.toList\n        val str38 = str37.head.toString\n        val str39 = str38.toUpperCase\n        val str40 = str39.toList\n        val str41 = str40.mkString\n        val str42 = str41.toList\n        val str43 = str42.head.toString\n        val str44 = str43.toUpperCase\n        val str",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map += (c -> 1)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str2.diff(str5)\n        if (str6.length == 0) None else Some(str6.head.toString)",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) {\n                return Some(c)\n            } else {\n                map(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charSet = new HashSet[Char]\n        for (c <- charArray) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount += (c -> 1)\n            }\n        }\n        return None",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                map(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c))\n                return Some(c.toString)\n            else\n                charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toSet\n        val str10 = str9.toList\n        val str11 = str10.sorted\n        val str12 = str11.mkString\n        val str13 = str12.toCharArray\n        val str14 = str13.toSet\n        val str15 = str14.toList\n        val str16 = str15.sorted\n        val str17 = str16.mkString\n        val str18 = str17.toCharArray\n        val str19 = str18.toSet\n        val str20 = str19.toList\n        val str21 = str20.sorted\n        val str22 = str21.mkString\n        val str23 = str22.toCharArray\n        val str24 = str23.toSet\n        val str25 = str24.toList\n        val str26 = str25.sorted\n        val str27 = str26.mkString\n        val str28 = str27.toCharArray\n        val str29 = str28.toSet\n        val str30 = str29.toList\n        val str31 = str30.sorted\n        val str32 = str31.mkString\n        val str33 = str32.toCharArray\n        val str34 = str33.toSet\n        val str35 = str34.toList\n        val str36 = str35.sorted\n        val str37 = str36.mkString\n        val str38 = str37.toCharArray\n        val str39 = str38.toSet\n        val str40 = str39.toList\n        val str41 = str40.sorted\n        val str42 = str41.mkString\n        val str43 = str42.toCharArray\n        val str44 = str43.toSet\n        val str45 = str44.toList\n        val str46 = str45.sorted\n        val str47 = str",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            charMap(str(i)) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charSet = new HashSet[Char]\n        for (c <- charArray) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        val firstRepeatedChar = charMap.find(x => x._2 > 1)\n        if (firstRepeatedChar.isDefined) {\n            Some(firstRepeatedChar.get._1.toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map(c) = 1\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) return Some(str(i).toString)\n            else map(str(i)) = 1\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toList\n        val str10 = str9.zipWithIndex\n        val str11 = str10.map(x => (x._1, x._2 + 1))\n        val str12 = str11.map(x => (x._1, str2.indexOf(x._1)))\n        val str13 = str12.filter(x => x._2 != -1)\n        val str14 = str13.filter(x => x._2 != x._3)\n        val str15 = str14.sortBy(x => x._2)\n        if (str15.isEmpty) None\n        else Some(str15.head._1.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        return None",
    "        var charMap = new HashMap[Char, Int]()\n        for(i <- 0 until str1.length) {\n            if(charMap.contains(str1(i))) {\n                return Some(str1(i).toString)\n            }\n            else {\n                charMap += (str1(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString())\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) return Some(c.toString)\n            else map += (c -> 1)\n        }\n        None",
    "        var charMap = Map[Char, Int]()\n        var charList = List[Char]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                charMap += (c -> (charMap(c) + 1))\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c) > 1) {\n                charList = c :: charList\n            }\n        }\n        if (charList.isEmpty) {\n            None\n        } else {\n            Some(charList.head.toString)\n        }",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap.put(c, charMap(c) + 1)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        val repeatedChars = charMap.filter(x => x._2 > 1)\n        if (repeatedChars.size > 0) {\n            Some(repeatedChars.head._1.toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap(c) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap += (c -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charMap = new HashMap[Char, Int]\n        for (c <- charArray) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap.put(c, 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c))\n                return Some(c.toString)\n            else\n                charMap += (c -> 1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            charMap += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString())\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                map += (str(i) -> 1)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase()\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.mkString\n        val str6 = str5.toList\n        val str7 = str6.map(x => (str2.count(_ == x), x))\n        val str8 = str7.filter(x => x._1 > 1)\n        val str9 = str8.sortBy(x => x._1)\n        if (str9.isEmpty) None else Some(str9.head._2.toString)",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charSet = Set[Char]()\n        for (c <- str) {\n            if (charSet.contains(c)) return Some(c.toString)\n            else charSet += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                return Some(str(i).toString)\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val set = Set[Char]()\n        for (c <- str) {\n            if (set.contains(c)) return Some(c.toString)\n            else set += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                return Some(c.toString)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            }\n            else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) > 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                return Some(str(i).toString)\n            }\n            else {\n                charMap += (str(i) -> 1)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray\n        val str9 = str8.toList\n        val str10 = str9.map(x => str2.count(_ == x))\n        val str11 = str10.zip(str9)\n        val str12 = str11.filter(x => x._1 > 1)\n        if (str12.isEmpty) None\n        else Some(str12.head._2.toString)",
    "        var map = Map[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) {\n                return Some(c.toString)\n            }\n            map += (c -> 1)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val set = Set[Char]()\n        for (c <- str) {\n            if (set.contains(c)) return Some(c.toString)\n            else set += c\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                return Some(c.toString)\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        None"
  ]
}