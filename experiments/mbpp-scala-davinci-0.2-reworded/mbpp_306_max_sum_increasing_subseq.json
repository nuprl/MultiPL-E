{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    def maxSumIncreasingSubseq(a : List[Long], n : Long, index : Long, k : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (4l), (6l)) == (11l));\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (2l), (5l)) == (7l));\n    assert(maxSumIncreasingSubseq((List[Long](11l.toLong, 15l.toLong, 19l.toLong, 21l.toLong, 26l.toLong, 28l.toLong, 31l.toLong)), (7l), (2l), (4l)) == (71l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) max (maxSumIncreasingSubseq(a, n, index + 1, k + 1) + a(index.toInt))\n            else maxSumIncreasingSubseq(a, n, index + 1, k)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill[Long](n.toInt)(0)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index.toInt) {\n                result = max(result, dp(i))\n            } else if (i == index.toInt) {\n                result = max(result, dp(i) + a(k.toInt))\n            } else {\n                result = max(result, dp(i) + a(index.toInt))\n            }\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j != index.toInt) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + dp2(k.toInt)",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            result = max(result, dp(i))\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) <= a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, index) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (k > index) max\n            else {\n                val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, k, k)\n                if (sum > max) sum else max\n            }\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, index) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val max = a(index.toInt)\n            var maxSum = 0L\n            for (i <- index + 1 to n) {\n                if (a(i.toInt) > max && i <= k) {\n                    val sum = maxSumIncreasingSubseq(a, n, i, k)\n                    if (sum > maxSum) maxSum = sum\n                }\n            }\n            max + maxSum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j < index && i < k) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(k.toInt - 1) + dp(index.toInt - 1)",
    "        if (index == n) 0\n        else {\n            val sum1 = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, index + 1)\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (k == index) max\n            else if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j < index && i < k) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(k.toInt - 1) + dp(index.toInt - 1)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            val max = a(i - 1) + dp(i - 1)\n            for (j <- 0 until i) {\n                if (a(j) < a(i - 1)) {\n                    val cur = a(i - 1) + dp(j)\n                    if (cur > max) max = cur\n                }\n            }\n            dp(i) = max\n        }\n        val max = dp(index.toInt) + a(k.toInt - 1)\n        for (i <- 0 until index.toInt) {\n            if (a(i) < a(k.toInt - 1)) {\n                val cur = dp(i) + a(k.toInt - 1)\n                if (cur > max) return cur\n            }\n        }\n        return max",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(j) + a(i) > dp(i)) {\n                    dp(i) = dp(j) + a(i)\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        dp2(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j != index.toInt && i != k.toInt) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(index.toInt) + dp(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 to n.toInt - 1) {\n            var max = 0L\n            for (j <- 0 to i - 1) {\n                if (a(i) > a(j) && dp(j) > max) {\n                    max = dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- index.toInt to k.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            var max = 0L\n            for (i <- index + 1 to n) {\n                if (a(i.toInt) > a(index.toInt) && i <= k) {\n                    val sum = maxSumIncreasingSubseq(a, n, i, k)\n                    if (sum > max) max = sum\n                }\n            }\n            a(index.toInt) + max\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(sum + maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                dp(i)(j) = -1\n            }\n        }\n        def solve(i : Long, j : Long) : Long = {\n            if (i == n) return 0\n            if (dp(i.toInt)(j.toInt) != -1) return dp(i.toInt)(j.toInt)\n            var ans = solve(i + 1, j)\n            if (i < j) ans = max(ans, solve(i + 1, i) + a(i.toInt))\n            dp(i.toInt)(j.toInt) = ans\n            ans\n        }\n        solve(index + 1, k)",
    "        if (index == n) 0\n        else if (k > n) maxSumIncreasingSubseq(a, n, index + 1, index + 1)\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, index) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else if (k > n) maxSumIncreasingSubseq(a, n, index + 1, index + 1)\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        val dp = Array.fill(a.length + 1)(0L)\n        val dp2 = Array.fill(a.length + 1)(0L)\n        for (i <- 1 to a.length) {\n            for (j <- 0 until i) {\n                if (a(i - 1) > a(j)) {\n                    dp(i) = max(dp(i), dp(j) + a(i - 1))\n                }\n            }\n        }\n        for (i <- 1 to a.length) {\n            for (j <- 0 until i) {\n                if (a(i - 1) > a(j)) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i - 1))\n                }\n            }\n            if (i == k) dp2(i) = max(dp2(i), dp(i - 1) + a(i - 1))\n        }\n        dp2(a.length)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val maxSum = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) max(maxSum, a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1))\n            else maxSum\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (k > index && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else max\n        }",
    "        if (index == n) 0\n        else if (k == n) a(index.toInt)\n        else if (k > n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) max(sum1, sum2)\n            else max(sum1, sum2 + a(index.toInt))\n        }",
    "        var dp = new Array[Long](n.toInt)\n        for (i <- 0 until n.toInt) dp(i) = a(i)\n        for (i <- 1 until n.toInt) {\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 1 to i) {\n                if (a(i - 1) > a(j - 1) && dp(j) > max) max = dp(j)\n            }\n            dp(i) = max + a(i - 1)\n        }\n        var max = 0L\n        for (i <- 1 to n.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index == k) sum\n            else max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val maxSum = dp.max\n        var sum = 0L\n        for (i <- index.toInt until k.toInt) {\n            sum += a(i)\n        }\n        maxSum + sum",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val maxSum = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSum\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j < index && i < k) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(k.toInt - 1) + dp(index.toInt - 1)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index) {\n                max = max max dp(i)\n            } else if (i == index) {\n                max = max max (dp(i) + a(k.toInt))\n            } else {\n                max = max max (dp(i) - a(i) + a(k.toInt))\n            }\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (k == -1) 0 else a(k.toInt)\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val max2 = maxSumIncreasingSubseq(a, n, index + 1, index)\n            val max3 = if (k == -1 || a(index.toInt) > a(k.toInt)) max2 else max2 + sum\n            max max max3\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = a(i - 1)\n            for (j <- 1 to i - 1) {\n                if (a(j - 1) < a(i - 1) && dp(j) + a(i - 1) > dp(i)) {\n                    dp(i) = dp(j) + a(i - 1)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 1 to n.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = dp(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(index.toInt) + dp(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 to n.toInt - 1) {\n            dp(i) = a(i)\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        dp2(0) = a(0)\n        for (i <- 1 to n.toInt - 1) {\n            dp2(i) = a(i)\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i) && j < index) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(k.toInt) + dp(index.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1) + sum)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to index.toInt) {\n            sum += a(i)\n        }\n        sum += dp(k.toInt)\n        sum",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- index.toInt until k.toInt) {\n            max = max max dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until index.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max + a(k.toInt)",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, sum2)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        val prev = Array.fill(n.toInt + 1)(0)\n        for (i <- 1 to n.toInt) {\n            dp(i) = a(i - 1)\n            prev(i) = i\n            for (j <- 1 to i - 1) {\n                if (a(j - 1) < a(i - 1) && dp(j) + a(i - 1) > dp(i)) {\n                    dp(i) = dp(j) + a(i - 1)\n                    prev(i) = j\n                }\n            }\n        }\n        var max = 0L\n        var maxIndex = 0\n        for (i <- 1 to n.toInt) {\n            if (dp(i) > max) {\n                max = dp(i)\n                maxIndex = i\n            }\n        }\n        var curr = maxIndex\n        var sum = 0L\n        while (curr != prev(curr)) {\n            if (curr < k) sum += a(curr - 1)\n            curr = prev(curr)\n        }\n        sum += a(curr - 1)\n        sum",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt && i != k.toInt) result = max(result, dp(i))\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(sum + maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, k + 1))\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index && i < k) result = max(result, dp(i))\n            else if (i < index && i >= k) result = max(result, dp(i) + a(k.toInt))\n            else if (i >= index && i < k) result = max(result, dp(i) + a(index.toInt))\n            else if (i >= index && i >= k) result = max(result, dp(i) + a(index.toInt) + a(k.toInt))\n        }\n        result",
    "        if (index == n) 0\n        else {\n            var max = 0L\n            for (i <- index until n) {\n                if (a(i.toInt) > a(index.toInt) && i < k) {\n                    val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, i + 1, k)\n                    if (sum > max) max = sum\n                }\n            }\n            max\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt to k.toInt) {\n            result = max(result, dp(i))\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else if (k == index) maxSumIncreasingSubseq(a, n, index + 1, k)\n        else max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index) + a(index.toInt) * (k - index))",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(i) < dp(j) + a(i)) {\n                    dp(i) = dp(j) + a(i)\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            if (result < dp(i)) result = dp(i)\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to n.toInt) {\n                if (i == 0 || j == 0) dp(i)(j) = 0\n                else if (i == j) dp(i)(j) = a(i - 1)\n                else if (i < j) dp(i)(j) = max(dp(i)(j - 1), dp(i)(i) + dp(i + 1)(j))\n                else dp(i)(j) = 0\n            }\n        }\n        dp(index.toInt)(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum1 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum1, sum2)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        dp2(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp2(i) = max(dp2(i), dp2(j) + a(i))\n            }\n            if (i == k) dp2(i) = max(dp2(i), dp(index.toInt) + a(i))\n        }\n        dp2(n.toInt - 1)",
    "        if (index == n) return 0\n        val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n        if (a(index.toInt) < a(k.toInt)) return max + a(index.toInt)\n        return max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        // dp(i) = max(dp(j) + a(i)) where j < i and a(j) < a(i)\n        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index == k) sum\n            else max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 to index.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k) sum\n            else max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- 0 to n.toInt) {\n            if (i != index && i != k) {\n                max = max max dp(i)\n            }\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            sum + max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) sum + a(k.toInt)\n            else sum\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(j) + a(i) > dp(i)) dp(i) = dp(j) + a(i)\n            }\n        }\n        dp(k.toInt)",
    "        if (index == n) 0\n        else if (index == k) a(index.toInt)\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (sum > a(index.toInt)) sum\n            else a(index.toInt)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            if (i == k) dp(i) = dp(i - 1) + a(i)\n            else dp(i) = max(dp(i - 1), dp(i))\n        }\n        dp(index.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                dp(i)(j) = 0\n            }\n        }\n        for (i <- 0 until n.toInt) {\n            dp(i)(i) = a(i)\n        }\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                if (a(j) > a(i)) {\n                    dp(i)(j) = max(dp(i)(j), dp(i)(i) + a(j))\n                }\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt) {\n                ans = max(ans, dp(i)(index.toInt))\n            }\n        }\n        ans",
    "        if (index == n) 0\n        else {\n            val max = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k)\n            val max2 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, index)\n            val max3 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val max4 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 1)\n            val max5 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 2)\n            val max6 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 2)\n            val max7 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 3)\n            val max8 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 3)\n            val max9 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 4)\n            val max10 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 4)\n            val max11 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 5)\n            val max12 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 5)\n            val max13 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 6)\n            val max14 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k - 6)\n            val max15 = if (k == index) 0 else maxSumIncreasingSubseq(a, n, index + 1, k + 7)\n            val max16 = if (k",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 to n.toInt - 1) {\n            dp(i) = a(i)\n            for (j <- 0 to i - 1) {\n                if (a(i) > a(j)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- index.toInt to k.toInt) {\n            max = max(max, dp(i))\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        val dp = Array.fill(a.length + 1)(0L)\n        for (i <- 1 to a.length) {\n            val max = dp.slice(0, i).max\n            if (i == k) dp(i) = max + a(i - 1)\n            else if (i < k) dp(i) = max\n            else dp(i) = max + a(i - 1)\n        }\n        dp(a.length)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        val max = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = a(i - 1)\n            max(i) = a(i - 1)\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 until i) {\n                if (a(i - 1) > a(j)) {\n                    dp(i) = max(i) max (dp(j) + a(i - 1))\n                    max(i) = dp(i)\n                }\n            }\n        }\n        val result = dp(index.toInt) + a(k.toInt - 1)\n        result",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- index.toInt until k.toInt) {\n            max = max max dp(i)\n        }\n        max",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = dp(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + dp(i))\n                }\n            }\n        }\n        dp2(k.toInt - 1)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until index.toInt) {\n            sum += a(i)\n        }\n        sum += dp(k.toInt - 1)\n        sum",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else if (k == n) maxSumIncreasingSubseq(a, n, index + 1, index + 1)\n        else if (a(index.toInt) < a(k.toInt)) max(a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1), maxSumIncreasingSubseq(a, n, index, k + 1))\n        else maxSumIncreasingSubseq(a, n, index, k + 1)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = dp(index.toInt)\n        for (i <- index.toInt until k.toInt) {\n            if (a(i) < a(k.toInt)) {\n                result = max(result, dp(i) + a(k.toInt))\n            }\n        }\n        result",
    "        var dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(j) + a(i) > dp(i)) dp(i) = dp(j) + a(i)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (dp(i) > result) result = dp(i)\n        }\n        result",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 to n.toInt - 1) {\n            dp(i) = a(i)\n            for (j <- 0 to i - 1) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt to k.toInt - 1) {\n            result = max(result, dp(i))\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index && dp(i) > result) result = dp(i)\n            if (i > k && dp(i) > result) result = dp(i)\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until index.toInt) {\n            sum += dp(i)\n        }\n        sum += a(k.toInt)\n        sum",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        var max = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index && i != k) {\n                max = max max dp(i)\n            }\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (k < n && a(k.toInt) > a(index.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, k, k + 1) else 0\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, index + 2))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt && i != k.toInt) {\n                result = max(result, dp(i))\n            }\n        }\n        result",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max + a(i)\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt && i != k.toInt) {\n                result = max(result, dp(i))\n            }\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until index.toInt) {\n            sum += a(i)\n        }\n        sum += dp(k.toInt - 1)\n        sum",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        var dp = Array.fill[Long](a.length)(0)\n        for (i <- 0 until a.length) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(i) < dp(j) + a(i)) {\n                    dp(i) = dp(j) + a(i)\n                }\n            }\n        }\n        var max = 0L\n        for (i <- 0 until a.length) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1) + sum)\n        }",
    "        if (index == n) 0\n        else {\n            val maxSum = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (k == index + 1) max(maxSum, a(index.toInt))\n            else if (a(index.toInt) < a(k.toInt)) max(maxSum, a(index.toInt) + maxSumIncreasingSubseq(a, n, k, k))\n            else maxSum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            sum\n        }",
    "        if (index == n) 0\n        else if (k == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (sum > max) sum\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && j != index) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        dp2(k.toInt) + dp(index.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i) && dp(i) < dp(j) + a(i)) dp(i) = dp(j) + a(i)\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        if (index == 0) {\n            if (k == 0) a(0).toLong\n            else 0\n        }\n        else {\n            var max = 0L\n            for (i <- 0 to index - 1) {\n                if (a(i) < a(index)) {\n                    val sum = maxSumIncreasingSubseq(a, n, i, index) + a(index)\n                    if (sum > max) max = sum\n                }\n            }\n            if (k == index) max + a(index)\n            else max\n        }",
    "        if (index == n) 0\n        else {\n            val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k) sum\n            else max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = a(i - 1)\n            for (j <- 1 to i - 1) {\n                if (a(j - 1) < a(i - 1)) {\n                    dp(i) = max(dp(i), dp(j) + a(i - 1))\n                }\n            }\n        }\n        var result = dp(index.toInt)\n        for (i <- index.toInt + 1 to k.toInt) {\n            result = max(result, dp(i))\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i < index && dp(i) > result) result = dp(i)\n            if (i == k) result += a(i)\n        }\n        result",
    "        val dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            dp(i)(i) = a(i)\n            for (j <- i + 1 until n.toInt) {\n                dp(i)(j) = max(dp(i)(j - 1), dp(i)(j))\n                if (a(j) > a(i)) dp(i)(j) = max(dp(i)(j), a(j) + dp(i)(i))\n            }\n        }\n        dp(index.toInt)(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + a(k.toInt)",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until index.toInt) {\n            sum += dp(i)\n        }\n        sum + dp(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(sum + maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, k + 1))\n        }",
    "        var dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                dp(i)(j) = 0\n            }\n        }\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                if (i == j) dp(i)(j) = a(i)\n                else if (i < j) {\n                    if (a(i) < a(j)) dp(i)(j) = max(dp(i)(j), dp(i)(j - 1) + a(j))\n                    else dp(i)(j) = max(dp(i)(j), dp(i)(j - 1))\n                }\n            }\n        }\n        dp(index.toInt)(k.toInt)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, index + 1))\n        }",
    "        if (index == n) 0\n        else {\n            if (a(index.toInt) < a(k.toInt)) {\n                val sum = a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k)\n                val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n                max(sum, sum2)\n            }\n            else maxSumIncreasingSubseq(a, n, index + 1, k)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = a(0)\n        for (i <- 1 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        dp2(index.toInt) = a(index.toInt)\n        for (i <- (index.toInt + 1) until n.toInt) {\n            dp2(i) = a(i)\n            for (j <- (index.toInt + 1) until i) {\n                if (a(j) < a(i)) {\n                    dp2(i) = max(dp2(i), dp2(j) + a(i))\n                }\n            }\n        }\n        val dp3 = Array.fill(n.toInt)(0L)\n        dp3(k.toInt) = a(k.toInt)\n        for (i <- (k.toInt + 1) until n.toInt) {\n            dp3(i) = a(i)\n            for (j <- (k.toInt + 1) until i) {\n                if (a(j) < a(i)) {\n                    dp3(i) = max(dp3(i), dp3(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt) + dp2(k.toInt) + dp3(n.toInt - 1)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                if (i == j) dp(i)(j) = a(i)\n                else dp(i)(j) = 0\n            }\n        }\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                if (i != j) {\n                    if (a(j) > a(i)) dp(i)(j) = max(dp(i)(j), dp(i)(i) + dp(j)(j))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            if (i != index.toInt) {\n                result = max(result, dp(index.toInt)(i))\n            }\n        }\n        result",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (index < k && a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n            else max\n        }",
    "        if (index == n) 0\n        else if (k == n) maxSumIncreasingSubseq(a, n, index + 1, index + 1)\n        else if (a(index.toInt) < a(k.toInt)) max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, k + 1) + a(index.toInt))\n        else maxSumIncreasingSubseq(a, n, index + 1, k + 1)",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        var result = 0L\n        for (i <- index.toInt until k.toInt) {\n            result = max(result, dp(i))\n        }\n        result",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp(i) = max(dp(i), dp(j) + a(i))\n            }\n        }\n        val dp2 = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp2(i) = dp(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) dp2(i) = max(dp2(i), dp2(j) + dp(i))\n            }\n        }\n        dp2(k.toInt - 1)",
    "        if (index == n) return 0\n        val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n        if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) else max(maxSumIncreasingSubseq(a, n, index + 1, index) + a(index.toInt), max)",
    "        if (index >= n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        // dp(i) = maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i\n        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        dp(index.toInt)",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (k > index && a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else 0\n            max(sum1, sum2)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            dp(i) = a(i - 1)\n            for (j <- 1 to i - 1) {\n                if (a(j - 1) < a(i - 1)) {\n                    dp(i) = max(dp(i), dp(j) + a(i - 1))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 1 to index.toInt) {\n            result = max(result, dp(i))\n        }\n        result + a(k.toInt - 1)",
    "        if (index == n) 0\n        else {\n            val maxSum = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) max(maxSum, a(k.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k + 1))\n            else maxSum\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) a(index.toInt) else 0\n            max(sum + maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1))\n        }",
    "        if (index == n) 0\n        else {\n            val max = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (k == index + 1) max + a(index.toInt)\n            else if (a(k.toInt) > a(index.toInt)) max\n            else maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt)\n        }",
    "        val dp = Array.fill(n.toInt)(0L)\n        for (i <- 0 until n.toInt) {\n            dp(i) = a(i)\n            for (j <- 0 until i) {\n                if (a(j) < a(i)) {\n                    dp(i) = max(dp(i), dp(j) + a(i))\n                }\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until index.toInt) {\n            sum += a(i)\n        }\n        sum += dp(k.toInt - 1)\n        sum",
    "        if (index == n) 0\n        else {\n            val result = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, k) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            result\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (k == index + 1) a(index.toInt) else 0\n            max(maxSumIncreasingSubseq(a, n, index + 1, k), maxSumIncreasingSubseq(a, n, index + 1, index + 1) + sum)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        if (index == n) 0\n        else if (k == n) a(index.toInt)\n        else if (k > n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k + 1)\n            val sum2 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            if (a(index.toInt) < a(k.toInt)) max(sum1, sum2)\n            else max(sum1 + a(index.toInt), sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum1 = maxSumIncreasingSubseq(a, n, index + 1, k)\n            val sum2 = if (a(index.toInt) < a(k.toInt)) a(index.toInt) + maxSumIncreasingSubseq(a, n, index + 1, index) else 0\n            max(sum1, sum2)\n        }",
    "        if (index == n) 0\n        else {\n            val sum = if (a(index.toInt) < a(k.toInt)) maxSumIncreasingSubseq(a, n, index + 1, k) + a(index.toInt) else maxSumIncreasingSubseq(a, n, index + 1, k)\n            max(sum, maxSumIncreasingSubseq(a, n, index + 1, k))\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            val max = a.slice(0, i.toInt).zipWithIndex.filter(x => x._2 < i && x._2 < k).map(x => x._1 + dp(x._2)).max\n            dp(i) = max\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt, n.toInt)\n        for (i <- 0 until n.toInt) {\n            dp(i)(i) = a(i)\n        }\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                if (a(j) > a(i)) {\n                    dp(i)(j) = max(dp(i)(j), dp(i)(i) + a(j))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            result = max(result, dp(i)(index.toInt) + dp(index.toInt)(k.toInt))\n        }\n        result"
  ]
}