{
  "name": "mbpp_75_find_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2yym_kdx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result = result :+ tuple\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp65vk9s6n.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp65vk9s6n.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp65vk9s6n.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j && test_list(i) % test_list(j) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list += test_list(i)\n        }\n        return result_list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3e74ebmk.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3e74ebmk.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3e74ebmk.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3e74ebmk.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpized4zkm.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpized4zkm.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpized4zkm.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag == true) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkr_e4e_.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkr_e4e_.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkr_e4e_.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqo4an0k.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += test_list(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvlsrs3dj.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlsrs3dj.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlsrs3dj.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlsrs3dj.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2yym_kdx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2yym_kdx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqo4an0k.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqo4an0k.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqo4an0k.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl4atea2n.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4atea2n.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4atea2n.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl4atea2n.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86zke8zl.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86zke8zl.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp86zke8zl.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            var flag = true\n            for (j <- i) {\n                if (j % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph_gu30kk.scala:9:22 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i) {\n\u001b[31m\u001b[31m  |\u001b[0m                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_gu30kk.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_gu30kk.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph_gu30kk.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4nc8hu7y.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4nc8hu7y.scala:22:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4nc8hu7y.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4nc8hu7y.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = i :: result_list\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyi9ykbu.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyi9ykbu.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyi9ykbu.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (tuple % K == 0) result = result :+ tuple\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzxfirgl.scala:14:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzxfirgl.scala:14:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzxfirgl.scala:14:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpei0z1s7q.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaa8dvk9f.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaa8dvk9f.scala:19:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaa8dvk9f.scala:19:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt - 48 == 0 || test_list(i).toString.charAt(j).toInt - 48 > K || test_list(i).toString.charAt(j).toInt - 48 < 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += test_list(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8cvsexbi.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cvsexbi.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cvsexbi.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8cvsexbi.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0 && test_list(j) % test_list(i) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = test_list(i) :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphtfcc307.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphtfcc307.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphtfcc307.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_gk63oyf.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = for (i <- test_list if i % K == 0) yield i\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5e73zodl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result += test_list(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplds1ktl7.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplds1ktl7.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplds1ktl7.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) result = result ::: List(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b_uhe70.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b_uhe70.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4b_uhe70.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffbf6gu1.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffbf6gu1.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpffbf6gu1.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzydds89.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124283,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result = tuple :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmrdyur9k.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmrdyur9k.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmrdyur9k.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9ba7_5i.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9ba7_5i.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9ba7_5i.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob3v2xcc.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob3v2xcc.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob3v2xcc.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124283,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnajrh7p.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnajrh7p.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnajrh7p.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfnajrh7p.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3fkr3bi.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3fkr3bi.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3fkr3bi.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfi7_gd15.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfi7_gd15.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfi7_gd15.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwlqe3x9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8_kq3pn.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list.length - 1) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result_list = test_list :: result_list\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk568x87.scala:15:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                result_list = test_list :: result_list\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (test_list : List[Long])\n\u001b[31m   |\u001b[0m                              Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk568x87.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk568x87.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk568x87.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfzydds89.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfzydds89.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a67y2s6.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpog6keeyx.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2yym_kdx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = for (i <- test_list if (i % K == 0)) yield i\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm816hwm1.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm816hwm1.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm816hwm1.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = test_list :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt0ovw1n.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                result = test_list :: result\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (test_list : List[Long])\n\u001b[31m   |\u001b[0m                         Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt0ovw1n.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt0ovw1n.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt0ovw1n.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = for (i <- test_list if i % K == 0) yield i\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwoa_jpf.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124284,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpivvdvrvv.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpivvdvrvv.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpivvdvrvv.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpik0va_.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxpik0va_.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxpik0va_.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxpik0va_.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var output_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toInt % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                output_list = output_list :+ test_list(i)\n            }\n        }\n        return output_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx0l3dug.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx0l3dug.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjx0l3dug.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (tuple <- test_list) {\n            var flag = true\n            for (i <- tuple) {\n                if (i % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = tuple :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawki1kxm.scala:9:22 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- tuple) {\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value foreach is not a member of Long\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawki1kxm.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawki1kxm.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawki1kxm.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2y0qx0y1.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2y0qx0y1.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2y0qx0y1.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5g4wyhrb.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5g4wyhrb.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5g4wyhrb.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5g4wyhrb.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result += test_list(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplitwjkhs.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplitwjkhs.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplitwjkhs.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124256,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpei0z1s7q.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpei0z1s7q.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) % test_list(j) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm9u2hmq1.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9u2hmq1.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9u2hmq1.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9u2hmq1.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbkmj8mvc.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbkmj8mvc.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbkmj8mvc.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            var num = test_list(i)\n            while (num > 0) {\n                if (num % K != 0) {\n                    flag = false\n                    break\n                }\n                num /= K\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3uhlqpg4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3uhlqpg4.scala:22:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3uhlqpg4.scala:22:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3uhlqpg4.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2yym_kdx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2yym_kdx.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvwlqe3x9.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvwlqe3x9.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5e73zodl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5e73zodl.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag == true) {\n                result = test_list(i) :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xwitzna.scala:21:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xwitzna.scala:21:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1xwitzna.scala:21:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = i :: result_list\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124295,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14w7e60i.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14w7e60i.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14w7e60i.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124283,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt - '0' != 0 && test_list(i).toString.charAt(j).toInt - '0' != K) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = test_list(i) :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdhdkti_u.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhdkti_u.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhdkti_u.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhdkti_u.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayst4nsa.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wu150yp.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wu150yp.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wu150yp.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result_list = tuple :: result_list\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprvr7hssx.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprvr7hssx.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprvr7hssx.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list.length - 1) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu33ou4r1.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu33ou4r1.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu33ou4r1.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu33ou4r1.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result += test_list(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp218n8dic.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp218n8dic.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp218n8dic.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtq9kuka.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toInt % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124296,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkymql2jh.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkymql2jh.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkymql2jh.scala:20:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkymql2jh.scala:20:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        val result = test_list.filter(x => x % K == 0)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124254,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp46jfilmh.scala:10:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgijpzts8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124283,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnspuxear.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1dwtufh8.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509827,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15j5qnhs.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1au58xll.scala:13:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8yuciwi.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        test_list.filter(x => x % K == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:34 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                  Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:50 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50fx3g7z.scala:9:64 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                              Found:    (Long, Long, Long)\n\u001b[31m  |\u001b[0m                                              Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanatio",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1665509828,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzgpfas7c.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124283,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwthszx.scala:23:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list\n    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
      "timestamp": 1666124286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjh4wl39.scala:15:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(findTuples((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m6l\u001b[0m), (\u001b[31m12l\u001b[0m, \u001b[31m18l\u001b[0m, \u001b[31m21l\u001b[0m))), (\u001b[31m6l\u001b[0m)).equals((List[\u001b[35mLong\u001b[0m]((\u001b[31m6l\u001b[0m, \u001b[31m24l\u001b[0m, \u001b[31m12l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (Long, Long, Long)\n\u001b[31m   |\u001b[0m                                            Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}