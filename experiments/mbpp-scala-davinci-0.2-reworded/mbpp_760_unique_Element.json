{
  "name": "mbpp_760_unique_Element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list of numbers contains only one distinct element or not.\n    def uniqueElement(arr : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val unique = arr.distinct\n        if (unique.length == 1) true else false",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) set += i\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        arr.distinct.length == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val distinct = arr.distinct\n        if (distinct.length == 1) true else false",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) {\n                count += 1\n            }\n        }\n        return count == 1",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        return count == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        if (count == 1) return true\n        else return false",
    "        if (arr.length == 1) return true\n        var map = Map[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                return false\n            } else {\n                map += (arr(i) -> 1)\n            }\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        val set = arr.toSet\n        set.size == 1",
    "        arr.distinct.length == 1",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        for (x <- arr) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        arr.distinct.length == 1",
    "        val set = arr.toSet\n        return set.size == 1",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map.size == 1",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        if (arr.length == 1) return true\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return false\n        }\n        return true",
    "        val distinct = arr.distinct\n        if (distinct.length == 1) true else false",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for ((k, v) <- map) {\n            if (v > 1) return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        arr.distinct.length == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        for (i <- map.values) {\n            if (i != 1) return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var count = 0\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) count += 1\n        }\n        if (count == 0) true else false",
    "        arr.distinct.length == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        arr.distinct.length == 1",
    "        if (arr.length == 1) return true\n        var map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true else false",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (set.contains(arr(i))) return false\n            set += arr(i)\n        }\n        return true",
    "        arr.distinct.length == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) set += i\n        set.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        return set.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var unique = true\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) {\n                unique = false\n                return unique\n            }\n        }\n        return unique",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) return true\n        else return false",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        if (arr.length == 1) true\n        else if (arr.length == 0) false\n        else if (arr.distinct.length == 1) true\n        else false",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        return set.size == 1",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        var unique = true\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) == arr(j)) unique = false\n            }\n        }\n        unique",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) == arr(j)) count += 1\n            }\n            if (count > 1) return false\n            count = 0\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var set = Set[Long]()\n        for (i <- arr) set += i\n        return set.size == 1",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        if (set.size == 1) true\n        else false",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 1) return true\n        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) set.add(i)\n        return set.size == 1",
    "        var result = true\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) result = false\n        }\n        result",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        arr.distinct.length == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) {\n                count += 1\n            }\n        }\n        if (count == 1) {\n            return true\n        } else {\n            return false\n        }",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        return count == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = new HashSet[Long]\n        arr.foreach(x => set.add(x))\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var unique = true\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) {\n                unique = false\n                return unique\n            }\n        }\n        return unique",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = new HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (arr(i) == arr(j)) count += 1\n            }\n            if (count > 1) return false\n            count = 0\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        if (arr.length == 1) return true\n        arr.sortWith(_ < _)\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) == arr(i + 1)) return false\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (set.contains(arr(i))) return false\n            set.add(arr(i))\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        if (arr.length == 1) true\n        else if (arr.length == 0) false\n        else if (arr.head == arr.tail.head) uniqueElement(arr.tail)\n        else false",
    "        val set = arr.toSet\n        return set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 1) return true\n        var flag = false\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) != arr(i + 1)) {\n                if (flag) return false\n                flag = true\n            }\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 == 1) return true\n        }\n        return false",
    "        val set = arr.toSet\n        return set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val distinct = arr.distinct\n        if (distinct.length == 1) true\n        else false",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (x <- arr) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        if (arr.size == 1) true\n        else if (arr.size == 0) false\n        else if (arr.head == arr.tail.head) uniqueElement(arr.tail)\n        else false",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        if (count == 1) true else false",
    "        val set = new HashSet[Long]\n        for (i <- arr) set += i\n        set.size == 1",
    "        if (arr.length == 1) return true\n        var map = Map[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) return false\n            map += (arr(i) -> 1)\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 1) return true\n        if (arr.length == 0) return false\n        val sorted = arr.sorted\n        for (i <- 1 until sorted.length) {\n            if (sorted(i) == sorted(i - 1)) return false\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        if (arr.length == 1) return true\n        if (arr.length == 0) return false\n        if (arr.length == 2) return arr(0) != arr(1)\n        val mid = arr.length / 2\n        val left = arr.slice(0, mid)\n        val right = arr.slice(mid, arr.length)\n        if (uniqueElement(left) && uniqueElement(right)) {\n            if (left(left.length - 1) != right(0)) return true\n            else return false\n        }\n        else return false",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        arr.distinct.length == 1",
    "        if (arr.length == 1) return true\n        var unique = true\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) == arr(j)) {\n                    unique = false\n                    return unique\n                }\n            }\n        }\n        return unique",
    "        val distinct = arr.distinct\n        return distinct.length == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 > 1) return false\n            else count += 1\n        }\n        if (count == 1) return true\n        else return false",
    "        val set = arr.toSet\n        if (set.size == 1) true else false",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Long]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        for (i <- map.values) {\n            if (i > 1) return false\n        }\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        arr.distinct.length == 1",
    "        val set = new HashSet[Long]\n        for (x <- arr) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) set += i\n        set.size == 1",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = HashMap[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        if (count == 1) return true\n        else return false",
    "        if (arr.length == 1) return true\n        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (x <- arr) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        true",
    "        var map = new HashMap[Long, Int]\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map += (arr(i) -> 1)\n            }\n        }\n        map.size == 1",
    "        arr.distinct.size == 1",
    "        arr.distinct.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 1) true\n        else if (arr.length == 0) false\n        else arr.head == arr.tail.head && uniqueElement(arr.tail)",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        var count = 0\n        for (i <- map.values) {\n            if (i == 1) count += 1\n        }\n        if (count == 1) return true else return false",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        for (i <- map) if (i._2 > 1) return false\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = arr.toSet\n        if (set.size == 1) true else false",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true"
  ]
}