{
  "name": "mbpp_760_unique_Element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list of numbers contains only one distinct element or not.\n    def uniqueElement(arr : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val unique = arr.distinct\n        if (unique.length == 1) true else false",
    "        val set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        var set = Set[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) set += i\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        arr.distinct.length == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val distinct = arr.distinct\n        if (distinct.length == 1) true else false",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) {\n                count += 1\n            }\n        }\n        return count == 1",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            else set += i\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        if (count == 1) true\n        else false",
    "        val map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0\n        for (i <- map) {\n            if (i._2 == 1) count += 1\n        }\n        return count == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true"
  ]
}