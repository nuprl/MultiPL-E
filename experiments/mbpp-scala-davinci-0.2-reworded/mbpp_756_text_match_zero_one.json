{
  "name": "mbpp_756_text_match_zero_one",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/scalathon-exercises/re/scalathon-re-exercise-3.php\n    def textMatchZeroOne(text : String) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchZeroOne((\"ac\")) == (false));\n    assert(textMatchZeroOne((\"dc\")) == (false));\n    assert(textMatchZeroOne((\"abbbba\")) == (true));\n    assert(textMatchZeroOne((\"dsabbbba\")) == (true));\n    assert(textMatchZeroOne((\"asbbbba\")) == (false));\n    assert(textMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pattern = \"a[b]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"ab+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"ab+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a[b]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a[b]*\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a[b]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a[b]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"a+b\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b*\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"ab+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a[b]+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"a+b+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"ab+\".r\n        pattern.findFirstIn(text) match {\n            case Some(_) => true\n            case None => false\n        }"
  ]
}