{
  "name": "mbpp_20_is_woodall",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given number is woodball or not.\n    def isWoodall(x : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isWoodall((383l)) == (true));\n    assert(isWoodall((254l)) == (false));\n    assert(isWoodall((200l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var n = x\n        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n                n /= i\n                if (n % i != 0) {\n                    if (i == 2) return true\n                    else return false\n                }\n            }\n            else i += 1\n        }\n        return false",
    "        val n = x.toString.length\n        val a = x.toString.toArray.map(_.toString.toInt)\n        val b = a.map(pow(_, n).toLong)\n        val c = b.sum\n        c == x",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return m * (m - 1) == x",
    "        if (x == 1) return true\n        var i = 2\n        var p = 1\n        while (p <= x) {\n            p *= i\n            i += 1\n        }\n        return p == x",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return x == m * (m - 1) + 1",
    "        val n = log(x).toLong\n        var i = 1L\n        while (i <= n) {\n            if (pow(i, n).toLong == x) return true\n            i += 1\n        }\n        false",
    "        val n = x.toString.length\n        val s = x.toString\n        for (i <- 0 to n - 1) {\n            if (s(i) != (n - i - 1).toString.charAt(0)) return false\n        }\n        true",
    "        var n = x\n        while (n % 2 == 0) n /= 2\n        while (n % 5 == 0) n /= 5\n        return n == 1",
    "        val n = x.toString.length\n        val s = x.toString\n        for (i <- 0 until n) {\n            if (s(i) != '1') return false\n        }\n        return true",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return m * (m - 1) == x",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return m * (m - 1) == x",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return x == m * (m - 1) + 1",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return m * (m - 1) == x",
    "        var n = x\n        var d = 1\n        while (n >= d) {\n            if (n % d == 0) {\n                if (n / d != d) {\n                    return false\n                }\n            }\n            d += 1\n        }\n        return true",
    "        var n = x\n        while (n > 1) {\n            if (n % 2 == 0) n /= 2\n            else if (n % 3 == 0) n /= 3\n            else if (n % 5 == 0) n /= 5\n            else return false\n        }\n        return true",
    "        val n = x.toString.length\n        val s = x.toString.map(x => pow(x.asDigit, n).toLong).sum\n        return s == x",
    "        val n = log(x) / log(2)\n        val m = pow(2, n).toLong\n        return x == m * (m - 1) + 1",
    "        var n = x\n        while (n % 2 == 0) n /= 2\n        while (n % 5 == 0) n /= 5\n        n == 1",
    "        var n = x\n        while (n > 1) {\n            if (n % 2 == 0) n /= 2\n            else if (n % 3 == 0) n /= 3\n            else if (n % 5 == 0) n /= 5\n            else return false\n        }\n        return true",
    "        var n = x\n        while (n > 1) {\n            if (n % 2 == 0) n /= 2\n            else if (n % 3 == 0) n /= 3\n            else if (n % 5 == 0) n /= 5\n            else return false\n        }\n        return true"
  ]
}