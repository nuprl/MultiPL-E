{
  "name": "mbpp_74_is_samepatterns",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether it follows the sequence given in the patterns list.\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"green\")), (List[String](\"a\", \"b\", \"b\"))) == (true));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\", \"b\"))) == (false));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\"))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (patterns(i) == \"any\") continue\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (patterns(i) == \"any\") continue\n            if (patterns(i) != colors(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        var index = 0\n        while (index < colors.length) {\n            if (colors(index) != patterns(index)) return false\n            index += 1\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (patterns(i) == \"any\") continue\n            if (patterns(i) != colors(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) == patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        var flag = true\n        for (i <- 0 until patterns.length) {\n            if (colors(i) != patterns(i)) {\n                flag = false\n            }\n        }\n        return flag",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true",
    "        if (colors.size != patterns.size) return false\n        for (i <- 0 until colors.size) {\n            if (colors(i) != patterns(i)) return false\n        }\n        true",
    "        if (colors.length != patterns.length) return false\n        for (i <- 0 until colors.length) {\n            if (colors(i) != patterns(i)) return false\n        }\n        return true"
  ]
}