{
  "name": "mbpp_804_is_product_even",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var result = true\n        for (i <- arr) {\n            if (i % 2 == 1) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4qmryro6.scala:13)\n\tat Problem.main(tmp4qmryro6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) product *= i\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) product *= i\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 == 1) {\n                even = false\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppfmd_fkm.scala:15)\n\tat Problem.main(tmppfmd_fkm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 == 1) {\n                even = false\n                return even\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpd5r1r8zl.scala:16)\n\tat Problem.main(tmpd5r1r8zl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)((a, b) => a * b)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) return true\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return (product % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (x <- arr) {\n            product *= x\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var prod = 1L\n        for (i <- arr) prod *= i\n        prod % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var isEven = true\n        for (i <- arr) {\n            if (i % 2 != 0) isEven = false\n        }\n        return isEven\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1yg4mnca.scala:13)\n\tat Problem.main(tmp1yg4mnca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps29uleab.scala:13)\n\tat Problem.main(tmps29uleab.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var result = true\n        for (i <- arr) {\n            if (i % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5q1a84zk.scala:16)\n\tat Problem.main(tmp5q1a84zk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 == 1) {\n                even = false\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppfmd_fkm.scala:15)\n\tat Problem.main(tmppfmd_fkm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        if (arr.length == 0) return true\n        if (arr.length == 1) return arr(0) % 2 == 0\n        if (arr.length == 2) return (arr(0) * arr(1)) % 2 == 0\n        if (arr.length == 3) return (arr(0) * arr(1) * arr(2)) % 2 == 0\n        if (arr.length == 4) return (arr(0) * arr(1) * arr(2) * arr(3)) % 2 == 0\n        if (arr.length == 5) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4)) % 2 == 0\n        if (arr.length == 6) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5)) % 2 == 0\n        if (arr.length == 7) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5) * arr(6)) % 2 == 0\n        if (arr.length == 8) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5) * arr(6) * arr(7)) % 2 == 0\n        if (arr.length == 9) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5) * arr(6) * arr(7) * arr(8)) % 2 == 0\n        if (arr.length == 10) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5) * arr(6) * arr(7) * arr(8) * arr(9)) % 2 == 0\n        if (arr.length == 11) return (arr(0) * arr(1) * arr(2) * arr(3) * arr(4) * arr(5) * arr(6) * arr(7) * arr(8) * arr(9) * arr(10)) % 2 == 0\n        if (arr.\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzbr_oijw.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var isEven = true\n        for (i <- arr) {\n            if (i % 2 != 0) {\n                isEven = false\n                return isEven\n            }\n        }\n        isEven\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpx0wrt5r4.scala:16)\n\tat Problem.main(tmpx0wrt5r4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        if (arr.length == 0) return true\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)((x, y) => x * y) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var result = true\n        for (i <- arr) {\n            if (i % 2 == 1) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzjsdfh77.scala:15)\n\tat Problem.main(tmpzjsdfh77.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var result = true\n        for (i <- arr) {\n            if (i % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjfw45q30.scala:13)\n\tat Problem.main(tmpjfw45q30.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)((a, b) => a * b)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)((a, b) => a * b)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = arr.foldLeft(1L)((a, b) => a * b)\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)((x, y) => x * y)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 == 1) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwkckc_8i.scala:13)\n\tat Problem.main(tmpwkckc_8i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var prod = 1L\n        for (i <- arr) {\n            prod *= i\n        }\n        return prod % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) product *= i\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        if (arr.length == 0) return true\n        if (arr.length == 1) return arr(0) % 2 == 0\n        if (arr(0) % 2 == 0) return isProductEven(arr.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf9n8xmru.scala:12)\n\tat Problem.main(tmpf9n8xmru.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return (product % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return (product % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return (product % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        if (arr.length == 0) return true\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        val product = arr.foldLeft(1L)(_ * _)\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var even = true\n        for (i <- arr) {\n            if (i % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkqktbo97.scala:13)\n\tat Problem.main(tmpkqktbo97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        if (product % 2 == 0) return true\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product = 1L\n        for (i <- arr) {\n            product *= i\n        }\n        product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        arr.foldLeft(1L)(_ * _) % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var evenCount = 0\n        for (i <- arr) {\n            if (i % 2 == 0) {\n                evenCount += 1\n            }\n        }\n        if (evenCount % 2 == 0) {\n            return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpn_uxpxp7.scala:18)\n\tat Problem.main(tmpn_uxpxp7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n        var product : Long = 1\n        for (i <- arr) {\n            product *= i\n        }\n        return product % 2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}