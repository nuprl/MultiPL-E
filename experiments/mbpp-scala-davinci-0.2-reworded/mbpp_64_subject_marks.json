{
  "name": "mbpp_64_subject_marks",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of tuples using the second value of each tuple.\n    def subjectMarks(subjectmarks : List[Either[String, Long]]) : List[Either[String, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subjectMarks((List[Either[String, Long]]((\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l), (\"Social sciences\", 82l)))).equals((List[Either[String, Long]]((\"Social sciences\", 82l), (\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l)))));\n    assert(subjectMarks((List[Either[String, Long]]((\"Telugu\", 49l), (\"Hindhi\", 54l), (\"Social\", 33l)))).equals((List[Either[String, Long]]((\"Social\", 33l), (\"Telugu\", 49l), (\"Hindhi\", 54l)))));\n    assert(subjectMarks((List[Either[String, Long]]((\"Physics\", 96l), (\"Chemistry\", 97l), (\"Biology\", 45l)))).equals((List[Either[String, Long]]((\"Biology\", 45l), (\"Physics\", 96l), (\"Chemistry\", 97l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortBy(x => x.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortBy(x => x.right.getOrElse(0))",
    "        subjectmarks.sortBy(x => x.right.get)",
    "        subjectmarks.sortBy(x => x.right.get)",
    "        subjectmarks.sortBy(x => x.right.getOrElse(0))",
    "        subjectmarks.sortBy(x => x.right.getOrElse(0))",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortWith((a, b) => a.right.get < b.right.get)",
    "        val sorted = subjectmarks.sortBy(x => x.right.getOrElse(0))\n        sorted",
    "        subjectmarks.sortBy(x => x.right.getOrElse(0))",
    "        subjectmarks.sortBy(x => x.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortBy(x => x.right.getOrElse(0L))",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)",
    "        subjectmarks.sortWith((x, y) => x.right.get < y.right.get)"
  ]
}