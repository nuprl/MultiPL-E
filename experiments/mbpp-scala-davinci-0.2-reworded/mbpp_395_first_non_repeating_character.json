{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charMap = new HashMap[Char, Int]\n        for (c <- charArray) {\n            if (charMap.contains(c)) {\n                charMap.put(c, charMap(c) + 1)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        for (c <- charArray) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString())\n            }\n        }\n        None",
    "        var str2 = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (i <- 0 until str2.length) {\n            if (map.contains(str2(i))) {\n                map(str2(i)) += 1\n            } else {\n                map += (str2(i) -> 1)\n            }\n        }\n        for (i <- 0 until str2.length) {\n            if (map(str2(i)) == 1) return Some(str2(i).toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.map(x => (x, str2.count(_ == x)))\n        val str7 = str6.filter(x => x._2 == 1)\n        if (str7.isEmpty) None\n        else Some(str7.head._1.toString)",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        if (str1.isEmpty) None\n        else {\n            val str2 = str1.toLowerCase\n            val str3 = str2.toList\n            val str4 = str3.distinct\n            val str5 = str4.map(x => (x, str2.count(_ == x)))\n            val str6 = str5.filter(_._2 == 1)\n            if (str6.isEmpty) None\n            else Some(str6.head._1.toString)\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) if (map(c) == 1) return Some(c.toString)\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        var map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(x => x)\n        val str5 = str4.filter(x => x._2.length == 1)\n        if (str5.isEmpty) None\n        else Some(str5.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) = map(c) + 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for(i <- 0 until str.length) {\n            if(map.contains(str(i).toString)) {\n                map(str(i).toString) += 1\n            } else {\n                map(str(i).toString) = 1\n            }\n        }\n        for(i <- 0 until str.length) {\n            if(map(str(i).toString) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charCount = new HashMap[String, Int]\n        str1.foreach(c => {\n            val char = c.toString\n            if (charCount.contains(char)) {\n                charCount(char) += 1\n            } else {\n                charCount(char) = 1\n            }\n        })\n        val nonRepeatingChars = charCount.filter(pair => pair._2 == 1)\n        if (nonRepeatingChars.size > 0) {\n            Some(nonRepeatingChars.head._1)\n        } else {\n            None\n        }",
    "        var map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i).toString)) {\n                map(str1(i).toString) += 1\n            } else {\n                map(str1(i).toString) = 1\n            }\n        }\n        for (i <- 0 until str1.length) {\n            if (map(str1(i).toString) == 1) {\n                return Some(str1(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity)\n        val str5 = str4.mapValues(_.size)\n        val str6 = str5.filter(_._2 == 1)\n        val str7 = str6.keys.toList\n        if (str7.isEmpty) None\n        else Some(str7.head.toString)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        var str = str1.toLowerCase\n        var map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(x => x)\n        val str5 = str4.filter(x => x._2.length == 1)\n        if (str5.size == 0) None\n        else Some(str5.head._1.toString)",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.distinct\n        val str5 = str4.map(x => (x, str3.count(_ == x)))\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.isEmpty) None\n        else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            charCount(c) = charCount.getOrElse(c, 0) + 1\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        val firstNonRepeating = charMap.find(x => x._2 == 1)\n        if (firstNonRepeating.isDefined) {\n            Some(firstNonRepeating.get._1.toString)\n        } else {\n            None\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        var map = Map[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1 else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 to str1.length - 1) {\n            if (map.contains(str1.substring(i, i + 1))) {\n                map(str1.substring(i, i + 1)) += 1\n            } else {\n                map += (str1.substring(i, i + 1) -> 1)\n            }\n        }\n        for (i <- 0 to str1.length - 1) {\n            if (map(str1.substring(i, i + 1)) == 1) {\n                return Some(str1.substring(i, i + 1))\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase()\n        val str3 = str2.toCharArray()\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.sorted\n        val str7 = str6.mkString\n        val str8 = str7.toCharArray()\n        val str9 = str8.toList\n        val str10 = str9.map(x => str2.count(_ == x))\n        val str11 = str10.zip(str9)\n        val str12 = str11.filter(x => x._1 == 1)\n        if (str12.isEmpty) None else Some(str12.head._2.toString)",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += str(i) -> 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap += (c -> 1)\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) if (map(c) == 1) return Some(c.toString)\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        str1.toCharArray.toList.groupBy(x => x).filter(x => x._2.length == 1).keys.headOption",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val str2 = str.toList\n        val str3 = str2.groupBy(x => x)\n        val str4 = str3.map(x => (x._1, x._2.length))\n        val str5 = str4.filter(x => x._2 == 1)\n        if (str5.size == 0) None\n        else Some(str5.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity).mapValues(_.size)\n        val str5 = str4.filter(_._2 == 1)\n        if (str5.isEmpty) None\n        else Some(str5.keys.head.toString)",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(x => x)\n        val str5 = str4.map(x => (x._1, x._2.length))\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.size == 0) None\n        else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(x => x)\n        val str5 = str4.map(x => (x._1, x._2.length))\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.isEmpty) None else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity)\n        val str5 = str4.filter(x => x._2.length == 1)\n        if (str5.size == 0) None\n        else Some(str5.keys.toList(0).toString)",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c))\n                charCount(c) += 1\n            else\n                charCount(c) = 1\n        }\n        for (c <- str) {\n            if (charCount(c) == 1)\n                return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 to str.length - 1) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 to str.length - 1) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                charMap(str(i)) += 1\n            } else {\n                charMap(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (charMap(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charCount.contains(str(i))) {\n                charCount(str(i)) += 1\n            } else {\n                charCount(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (charCount(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        var map = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str1) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        var charMap = Map[String, Int]()\n        for (char <- str1) {\n            if (charMap.contains(char.toString)) {\n                charMap(char.toString) += 1\n            } else {\n                charMap += (char.toString -> 1)\n            }\n        }\n        for (char <- str1) {\n            if (charMap(char.toString) == 1) {\n                return Some(char.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val arr = str.toCharArray\n        val map = new HashMap[Char, Int]\n        for (c <- arr) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- arr) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstNonRepeatingChar = str.find(c => charCount(c) == 1)\n        firstNonRepeatingChar",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = str.groupBy(identity).mapValues(_.size)\n        val charList = charCount.filter(x => x._2 == 1).keys.toList\n        if (charList.length > 0) Some(charList(0).toString) else None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString())\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        var str = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) {\n                map(c) = map(c) + 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) {\n                return Some(c)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (c <- str) {\n            charMap.get(c) match {\n                case Some(value) => charMap.put(c, value + 1)\n                case None => charMap.put(c, 1)\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        var map = new HashMap[Char, Int]()\n        for (c <- str1) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str1) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity)\n        val str5 = str4.map(x => (x._1, x._2.length))\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.size == 0) None\n        else Some(str6.head._1.toString)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount += (c -> 1)\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map += (c -> 1)\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString())\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                charMap(str(i)) += 1\n            } else {\n                charMap(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (charMap(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) {\n                return Some(c)\n            }\n        }\n        return None",
    "        var map = Map[Char, Int]()\n        for (i <- 0 until str1.length) {\n            map += (str1(i) -> (map.getOrElse(str1(i), 0) + 1))\n        }\n        for (i <- 0 until str1.length) {\n            if (map(str1(i)) == 1) return Some(str1(i).toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (c <- str) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val strMap = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (strMap.contains(c)) strMap(c) += 1\n            else strMap += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (strMap(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            map(str(i)) = map.getOrElse(str(i), 0) + 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString())\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            map.get(c) match {\n                case Some(x) => map.put(c, x + 1)\n                case None => map.put(c, 1)\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.get(c).get == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            }\n            else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            charCount.put(c, charCount.getOrElse(c, 0) + 1)\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for(i <- 0 until str1.length) {\n            if(map.contains(str1(i).toString)) {\n                map(str1(i).toString) += 1\n            } else {\n                map(str1(i).toString) = 1\n            }\n        }\n        for(i <- 0 until str1.length) {\n            if(map(str1(i).toString) == 1) {\n                return Some(str1(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) if (map(c) == 1) return Some(c.toString)\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.groupBy(x => x)\n        val str6 = str5.map(x => (x._1, x._2.length))\n        val str7 = str6.filter(x => x._2 == 1)\n        if (str7.size == 0) None\n        else Some(str7.head._1.toString)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charMap = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (charMap.contains(str(i))) {\n                charMap(str(i)) += 1\n            } else {\n                charMap(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (charMap(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val str2 = str.toList\n        val str3 = str2.groupBy(identity).mapValues(_.size)\n        val str4 = str3.filter(x => x._2 == 1)\n        if (str4.size == 0) None else Some(str4.head._1.toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            map(str(i)) = map.getOrElse(str(i), 0) + 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstNonRepeating = str.find(c => charCount(c) == 1)\n        firstNonRepeating",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charMap = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        if (str1.length == 0)\n            None\n        else {\n            val map = new HashMap[Char, Int]\n            for (i <- 0 until str1.length) {\n                if (map.contains(str1(i)))\n                    map(str1(i)) += 1\n                else\n                    map(str1(i)) = 1\n            }\n            for (i <- 0 until str1.length) {\n                if (map(str1(i)) == 1)\n                    return Some(str1(i).toString)\n            }\n            None\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity).mapValues(_.size)\n        val str5 = str4.filter(_._2 == 1)\n        if (str5.isEmpty) None else Some(str5.keys.head.toString)",
    "        var str2 = str1.toLowerCase\n        var map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            if (map.contains(str2(i).toString)) {\n                map(str2(i).toString) += 1\n            } else {\n                map(str2(i).toString) = 1\n            }\n        }\n        for (i <- 0 until str2.length) {\n            if (map(str2(i).toString) == 1) {\n                return Some(str2(i).toString)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                charMap(c.toString) += 1\n            } else {\n                charMap(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            map(c) = map.getOrElse(c, 0) + 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val char = str.charAt(i).toString\n            if (map.contains(char)) map(char) += 1\n            else map(char) = 1\n        }\n        for (i <- 0 until str.length) {\n            val char = str.charAt(i).toString\n            if (map(char) == 1) return Some(char)\n        }\n        None"
  ]
}