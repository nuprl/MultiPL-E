{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val charArray = str.toCharArray\n        val charMap = new HashMap[Char, Int]\n        for (c <- charArray) {\n            if (charMap.contains(c)) {\n                charMap.put(c, charMap(c) + 1)\n            } else {\n                charMap.put(c, 1)\n            }\n        }\n        for (c <- charArray) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString())\n            }\n        }\n        None",
    "        var str2 = str1.toLowerCase\n        var map = Map[Char, Int]()\n        for (i <- 0 until str2.length) {\n            if (map.contains(str2(i))) {\n                map(str2(i)) += 1\n            } else {\n                map += (str2(i) -> 1)\n            }\n        }\n        for (i <- 0 until str2.length) {\n            if (map(str2(i)) == 1) return Some(str2(i).toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toSet\n        val str5 = str4.toList\n        val str6 = str5.map(x => (x, str2.count(_ == x)))\n        val str7 = str6.filter(x => x._2 == 1)\n        if (str7.isEmpty) None\n        else Some(str7.head._1.toString)",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        if (str1.isEmpty) None\n        else {\n            val str2 = str1.toLowerCase\n            val str3 = str2.toList\n            val str4 = str3.distinct\n            val str5 = str4.map(x => (x, str2.count(_ == x)))\n            val str6 = str5.filter(_._2 == 1)\n            if (str6.isEmpty) None\n            else Some(str6.head._1.toString)\n        }",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) if (map(c) == 1) return Some(c.toString)\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        var map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None"
  ]
}