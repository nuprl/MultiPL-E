{
  "name": "mbpp_574_surfacearea_cylinder",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the surface area of a cylinder.\n    def surfaceareaCylinder(r : Long, h : Long) : Float = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceareaCylinder((10l), (5l)) == (942.45f));\n    assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));\n    assert(surfaceareaCylinder((4l), (10l)) == (351.848f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val pi = 3.14f\n        2 * pi * r * (r + h)",
    "        return 2 * Pi.toFloat * r * (r + h)",
    "        2 * Pi * r * (r + h)",
    "        val pi = 3.14f\n        val area = 2 * pi * r * (r + h)\n        area",
    "        val pi = 3.14f\n        val area = 2 * pi * r * (r + h)\n        area",
    "        2 * Pi * r * (r + h)",
    "        val pi = 3.14f\n        2 * pi * r * (r + h)",
    "        val pi = 3.14f\n        val area = 2 * pi * r * (r + h)\n        return area",
    "        2 * Pi.toFloat * r * (r + h)",
    "        val pi = 3.14f\n        2 * pi * r * (r + h)",
    "        2 * Pi.toFloat * r * (r + h)",
    "        return 2 * Pi * r * (r + h)",
    "        2 * Pi.toFloat * r * (r + h)",
    "        val pi : Float = 3.14f\n        val area : Float = 2 * pi * r * (r + h)\n        area",
    "        2 * Pi * r * (r + h)",
    "        2 * Pi.toFloat * r * (r + h)",
    "        2 * Pi * r * (r + h)",
    "        val pi = 3.14f\n        val area = 2 * pi * r * (r + h)\n        return area",
    "        val pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711",
    "        var area = 2 * Pi * r * (r + h)\n        return area.toFloat"
  ]
}