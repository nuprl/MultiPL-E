{
  "name": "mbpp_296_get_Inv_Count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0; var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sortAndCount(left)\n                val (rightSorted, rightCount) = sortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        sortAndCount(arr)._2",
    "        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                if (left.head <= right.head) {\n                    val (merged, splitInv) = merge(left.tail, right)\n                    (left.head :: merged, splitInv)\n                } else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitInvCount) = merge(left, right)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2",
    "        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (l, r, invCount) = (0, 0, 0L)\n            var result = ListBuffer[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result += left(l)\n                    l += 1\n                }\n                else {\n                    result += right(r)\n                    r += 1\n                    invCount += left.length - l\n                }\n            }\n            while (l < left.length) {\n                result += left(l)\n                l += 1\n            }\n            while (r < right.length) {\n                result += right(r)\n                r += 1\n            }\n            invCount\n        }\n        mergeSort(arr)",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) return left.head :: merge(left.tail, right)\n            else return right.head :: merge(left, right.tail)\n        }\n        def getInvCount(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftInvCount = getInvCount(left)\n            val rightInvCount = getInvCount(right)\n            val splitInvCount = getSplitInvCount(left, right)\n            leftInvCount + rightInvCount + splitInvCount\n        }\n        def getSplitInvCount(left : List[Long], right : List[Long]) : Long = {\n            var i = 0\n            var j = 0\n            var splitInvCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    splitInvCount += (left.length - i)\n                    j += 1\n                }\n            }\n            splitInvCount\n        }\n        getInvCount(mergeSort(arr))",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += (left.length - i)\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (sortedLeft, leftInvCount) = mergeSort(left)\n            val (sortedRight, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(sortedLeft, sortedRight)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                (left, right) match {\n                    case (Nil, _) => right\n                    case (_, Nil) => left\n                    case (l :: ls, r :: rs) => if (l < r) l :: merge(ls, right) else r :: merge(left, rs)\n                }\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).zipWithIndex.foldLeft(0L)((acc, x) => acc + x._2 - arr.indexOf(x._1))",
    "        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            val n = arr.length\n            if (n == 1) (arr, 0)\n            else {\n                val (a, x) = mergeSort(arr.slice(0, n / 2))\n                val (b, y) = mergeSort(arr.slice(n / 2, n))\n                val (c, z) = merge(a, b)\n                (c, x + y + z)\n            }\n        }\n        def merge(a : List[Long], b : List[Long]) : (List[Long], Long) = {\n            var x = a\n            var y = b\n            var c = List[Long]()\n            var count = 0L\n            while (!x.isEmpty && !y.isEmpty) {\n                if (x.head <= y.head) {\n                    c = c :+ x.head\n                    x = x.tail\n                }\n                else {\n                    c = c :+ y.head\n                    y = y.tail\n                    count += x.length\n                }\n            }\n            if (!x.isEmpty) c = c ::: x\n            if (!y.isEmpty) c = c ::: y\n            (c, count)\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = sortAndCount(left)\n            val (rightSorted, rightCount) = sortAndCount(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        sortAndCount(arr)._2",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left, right)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.length == 0) return right\n            if (right.length == 0) return left\n            if (left(0) <= right(0)) return left(0) :: merge(left.slice(1, left.length), right)\n            else return right(0) :: merge(left, right.slice(1, right.length))\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            val leftInv = countInversions(left)\n            val rightInv = countInversions(right)\n            val splitInv = countSplitInversions(left, right)\n            leftInv + rightInv + splitInv\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    splitInv += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            splitInv\n        }\n        countInversions(mergeSort(arr))",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ::: left.slice(i, left.length)\n            if (j < right.length) result = result ::: right.slice(j, right.length)\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var sorted = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    sorted = sorted :+ left(i)\n                    i += 1\n                } else {\n                    sorted = sorted :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                sorted = sorted :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                sorted = sorted :+ right(j)\n                j += 1\n            }\n            (sorted, invCount)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = sort(arr.slice(0, mid))\n            val (right, rightInvCount) = sort(arr.slice(mid, arr.length))\n            val (sorted, mergeInvCount) = merge(left, right)\n            (sorted, leftInvCount + rightInvCount + mergeInvCount)\n        }\n        sort(arr)._2",
    "        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftInv = countInv(left)\n                val rightInv = countInv(right)\n                val splitInv = merge(left, right).zipWithIndex.map(x => (x._1, x._2 + 1)).filter(x => x._1 > arr(x._2 - 1)).map(x => x._1 - arr(x._2 - 1)).sum\n                leftInv + rightInv + splitInv\n            }\n        }\n        countInv(arr)",
    "        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (sorted, splitCount) = merge(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2"
  ]
}