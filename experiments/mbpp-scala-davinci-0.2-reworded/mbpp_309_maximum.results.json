{
  "name": "mbpp_309_maximum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpauqxhcle.scala:10)\n\tat Problem.main(tmpauqxhcle.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg9y5_9zt.scala:9)\n\tat Problem.main(tmpg9y5_9zt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a\n        else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a\n        else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg70ohfoz.scala:9)\n\tat Problem.main(tmpg70ohfoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpauqxhcle.scala:10)\n\tat Problem.main(tmpauqxhcle.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp441rae_2.scala:10)\n\tat Problem.main(tmp441rae_2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Fill up this function body\n        // You can add another function as well, if required\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg9y5_9zt.scala:9)\n\tat Problem.main(tmpg9y5_9zt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a\n        else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg9y5_9zt.scala:9)\n\tat Problem.main(tmpg9y5_9zt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        return a\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg9y5_9zt.scala:9)\n\tat Problem.main(tmpg9y5_9zt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        // Write your code here\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n        if (a > b) a else b\n    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n",
      "timestamp": 1665510488,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}