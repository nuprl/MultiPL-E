{
  "name": "mbpp_790_even_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) even = false\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) return false\n        if (nums(0) % 2 == 0) return false\n        return evenPosition(nums.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcqpfvg_o.scala:14)\n\tat Problem.main(tmpcqpfvg_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 1) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.isEmpty) true\n        else if (nums.head % 2 == 0) evenPosition(nums.tail.tail)\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.UnsupportedOperationException: tail of empty list\n\tat scala.collection.immutable.Nil$.tail(List.scala:664)\n\tat scala.collection.immutable.Nil$.tail(List.scala:661)\n\tat Problem$.evenPosition(tmpjhq77sb5.scala:7)\n\tat Problem$.main(tmpjhq77sb5.scala:13)\n\tat Problem.main(tmpjhq77sb5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return false\n        if (nums(0) % 2 == 0) return evenPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe7xavmwb.scala:14)\n\tat Problem.main(tmpe7xavmwb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 1 to nums.length by 2) {\n            if (nums(i) % 2 != 0) {\n                even = false\n                return even\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.evenPosition$$anonfun$1(tmpydzwjhca.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.evenPosition(tmpydzwjhca.scala:12)\n\tat Problem$.main(tmpydzwjhca.scala:16)\n\tat Problem.main(tmpydzwjhca.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 0 && num % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                even = false\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk6aepwq3.scala:10)\n\tat Problem.main(tmpk6aepwq3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length % 2 == 0) {\n            if (nums(0) % 2 == 0) evenPosition(nums.slice(1, nums.length))\n            else false\n        }\n        else {\n            if (nums(0) % 2 == 1) evenPosition(nums.slice(1, nums.length))\n            else false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk6aff23c.scala:17)\n\tat Problem.main(tmpk6aff23c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 != 0) return false\n        if (nums(1) % 2 != 0) return false\n        evenPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxo2h7621.scala:15)\n\tat Problem.main(tmpxo2h7621.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 0) return evenPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpazx0x3cu.scala:14)\n\tat Problem.main(tmpazx0x3cu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var evens = 0\n        var odds = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) evens += 1\n                else odds += 1\n            }\n        }\n        if (evens == 0) false\n        else if (odds == 0) true\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for(i <- 0 until nums.length by 2) {\n            if(nums(i) % 2 != 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return true\n        if (nums(0) % 2 == 0 && nums(1) % 2 == 0) return evenPosition(nums.slice(2, nums.length))\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2x6sqppk.scala:14)\n\tat Problem.main(tmp2x6sqppk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return true\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 != 0) return false\n        return evenPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzs54wl8q.scala:13)\n\tat Problem.main(tmpzs54wl8q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    flag = false\n                }\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpedudaogc.scala:12)\n\tat Problem.main(tmpedudaogc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 to nums.length - 1 if i % 2 == 0) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    i = nums.length\n                }\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for(i <- 0 until nums.length) {\n            if(i % 2 == 0 && nums(i) % 2 != 0) {\n                even = false\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length == 1) true\n        else if (nums.length == 2) nums(0) % 2 == 0\n        else if (nums(0) % 2 == 0 && nums(1) % 2 == 0) evenPosition(nums.slice(2, nums.length))\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpchftt92f.scala:15)\n\tat Problem.main(tmpchftt92f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpeezjq2o8.scala:10)\n\tat Problem.main(tmpeezjq2o8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Fill Up this function body\n        // `nums` In case you do not remember is the list of numbers\n        // The function should return a boolean denoting whether the numbers at even position are even or not\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwlbbqmaa.scala:14)\n\tat Problem.main(tmpwlbbqmaa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 0 && num % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return true\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return evenPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaezzza2x.scala:13)\n\tat Problem.main(tmpaezzza2x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Fill Up this function body\n        // `nums` In case you do not know, this is how you get the even positioned elements in the list\n        // e.g. nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        // This is just a sample. You can change it to suit your need\n        nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                    return even\n                }\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk6aepwq3.scala:10)\n\tat Problem.main(tmpk6aepwq3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var evens = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) evens += 1\n            }\n        }\n        evens == nums.length / 2\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpem25nju6.scala:17)\n\tat Problem.main(tmpem25nju6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    flag = false\n                    return flag\n                }\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) {\n            if (nums(0) % 2 == 0) return evenPosition(nums.drop(2))\n            else return false\n        }\n        else {\n            if (nums(0) % 2 == 0) return false\n            else return evenPosition(nums.drop(1))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb6o4sjnq.scala:17)\n\tat Problem.main(tmpb6o4sjnq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        def evenPositionHelper(nums : List[Long], i : Int) : Boolean = {\n            if (i >= nums.length) true\n            else if (i % 2 == 0 && nums(i) % 2 != 0) false\n            else evenPositionHelper(nums, i + 1)\n        }\n        evenPositionHelper(nums, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return true\n        if (nums(0) % 2 == 0 && nums(1) % 2 == 0) return evenPosition(nums.tail.tail)\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw7r1vkgu.scala:14)\n\tat Problem.main(tmpw7r1vkgu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 1) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length % 2 == 0) {\n            if (nums(0) % 2 == 0) evenPosition(nums.tail)\n            else false\n        }\n        else {\n            if (nums(0) % 2 != 0) evenPosition(nums.tail)\n            else false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpir6w1nv_.scala:17)\n\tat Problem.main(tmpir6w1nv_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length == 1) true\n        else if (nums(0) % 2 == 0 && nums(1) % 2 == 0) evenPosition(nums.drop(2))\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7711kcnw.scala:14)\n\tat Problem.main(tmp7711kcnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (i <- 0 to nums.length - 1) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        while (i < nums.length && result) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) result = false\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Write your code here\n        nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return true\n        if (nums(0) % 2 == 0) return false\n        if (nums(1) % 2 == 1) return false\n        return evenPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaezzza2x.scala:13)\n\tat Problem.main(tmpaezzza2x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 != 0) return false\n        if (nums(1) % 2 != 0) return false\n        evenPosition(nums.slice(2, nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxo2h7621.scala:15)\n\tat Problem.main(tmpxo2h7621.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 1) return false\n        if (nums(1) % 2 == 0) return false\n        return evenPosition(nums.tail.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 1) return false\n        if (nums(1) % 2 == 1) return false\n        return evenPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9als77vp.scala:15)\n\tat Problem.main(tmp9als77vp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        // Fill Up this function body\n        // `nums` In List[Long] has the following properties:\n        //     Every element is between 1 to 1000000000\n        //     Length of the list is between 1 to 100000\n        var i = 0\n        var flag = true\n        while(i < nums.length && flag) {\n            if(i % 2 == 0 && nums(i) % 2 != 0) {\n                flag = false\n            }\n            i += 1\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return false\n        if (nums(0) % 2 == 0) return evenPosition(nums.slice(2, nums.length))\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_wo0mbkq.scala:14)\n\tat Problem.main(tmp_wo0mbkq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return false\n        if (nums(0) % 2 == 0) return evenPosition(nums.tail)\n        else return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph08qyb17.scala:14)\n\tat Problem.main(tmph08qyb17.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 0 && nums(1) % 2 == 0) return evenPosition(nums.tail.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvde7jz3q.scala:14)\n\tat Problem.main(tmpvde7jz3q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 != 0) return false\n        return evenPosition(nums.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy747ciy6.scala:14)\n\tat Problem.main(tmpy747ciy6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) return false\n        if (nums(0) % 2 == 0) return false\n        return evenPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp592lnw15.scala:12)\n\tat Problem.main(tmp592lnw15.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 0) {\n                if (num % 2 != 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 0) return evenPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpazx0x3cu.scala:14)\n\tat Problem.main(tmpazx0x3cu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) true\n        else if (nums.length == 1) true\n        else if (nums(0) % 2 == 0 && nums(1) % 2 == 0) evenPosition(nums.drop(2))\n        else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7711kcnw.scala:14)\n\tat Problem.main(tmp7711kcnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) result = false\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                even = false\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                flag = false\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                    return even\n                }\n            }\n        }\n        return even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122966,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) flag = false\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1).forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    even = false\n                }\n            }\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) return false\n            i += 1\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var even = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 != 0) even = false\n        }\n        even\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 != 0) result = false\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 0 && nums(1) % 2 == 0) return evenPosition(nums.tail.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvde7jz3q.scala:14)\n\tat Problem.main(tmpvde7jz3q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 != 0) return false\n        if (nums(1) % 2 != 0) return false\n        evenPosition(nums.drop(2))\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbda_clj6.scala:15)\n\tat Problem.main(tmpbda_clj6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        for (num <- nums) {\n            if (i % 2 == 0) {\n                if (num % 2 != 0) {\n                    result = false\n                    return result\n                }\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        while (i < nums.length && result) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) result = false\n            }\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 0\n        if (nums(0) % 2 == 0 && nums(1) % 2 == 0) return evenPosition(nums.drop(2))\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpe1w1i40k.scala:14)\n\tat Problem.main(tmpe1w1i40k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 != 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 0) {\n            if (nums(i) % 2 != 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122975,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        val evens = nums.zipWithIndex.filter(x => x._2 % 2 == 0).map(x => x._1)\n        evens.forall(x => x % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        nums.zipWithIndex.forall(x => x._2 % 2 == 0 && x._1 % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmzphlfgq.scala:11)\n\tat Problem.main(tmpmzphlfgq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 0 && num % 2 != 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n        var count = 0\n        for(i <- 0 until nums.length) {\n            if(i % 2 == 0 && nums(i) % 2 == 0) count += 1\n        }\n        if(count == nums.length / 2) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphcsg_7pi.scala:15)\n\tat Problem.main(tmphcsg_7pi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}