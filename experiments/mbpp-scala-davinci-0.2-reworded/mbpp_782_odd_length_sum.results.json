{
  "name": "mbpp_782_odd_length_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpiep132pb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpiep132pb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpiep132pb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpiep132pb.scala:15)\n\tat Problem$.main(tmpiep132pb.scala:19)\n\tat Problem.main(tmpiep132pb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subList = arr.slice(i, arr.length)\n            while (subList.length > 0) {\n                if (subList.length % 2 != 0) sum += subList.sum\n                subList = subList.slice(0, subList.length - 1)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    sum += arr.slice(i, j).sum\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var sublist = arr.slice(i, arr.length)\n            while (sublist.length > 0) {\n                if (sublist.length % 2 == 1) sum += sublist.sum\n                sublist = sublist.slice(0, sublist.length - 1)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) sum += arr.slice(i, j + 1).sum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var count = 0\n            for (j <- i to arr.length - 1) {\n                count += 1\n                if (count % 2 != 0) sum += arr(j)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvlrh9zbb.scala:17)\n\tat Problem.main(tmpvlrh9zbb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- 0 to arr.length - i) {\n                if (i % 2 != 0) {\n                    for (k <- j to j + i - 1) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp9po6_3pc.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp9po6_3pc.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp9po6_3pc.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp9po6_3pc.scala:15)\n\tat Problem$.main(tmp9po6_3pc.scala:19)\n\tat Problem.main(tmp9po6_3pc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    sum += arr.slice(i, j).sum\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    sum += arr.slice(i, j).sum\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) sum += arr(k)\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp9po6_3pc.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp9po6_3pc.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp9po6_3pc.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp9po6_3pc.scala:15)\n\tat Problem$.main(tmp9po6_3pc.scala:19)\n\tat Problem.main(tmp9po6_3pc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) sum += arr.slice(i, j + 1).sum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i to arr.length - 1) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var sublist = List[Long]()\n            for (j <- i until arr.length) {\n                sublist = sublist :+ arr(j)\n                if (sublist.length % 2 == 1) sum += sublist.sum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpiep132pb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpiep132pb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpiep132pb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpiep132pb.scala:15)\n\tat Problem$.main(tmpiep132pb.scala:19)\n\tat Problem.main(tmpiep132pb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var temp = 0L\n            for (j <- i to arr.length - 1) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) sum += arr(k)\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpdjuo2blb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpdjuo2blb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpdjuo2blb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpdjuo2blb.scala:15)\n\tat Problem$.main(tmpdjuo2blb.scala:19)\n\tat Problem.main(tmpdjuo2blb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var currSum = 0L\n            for (j <- i until arr.length) {\n                currSum += arr(j)\n                if ((j - i + 1) % 2 != 0) sum += currSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var sublist = arr.slice(i, arr.length)\n            while (sublist.length > 0) {\n                if (sublist.length % 2 != 0) sum += sublist.sum\n                sublist = sublist.slice(0, sublist.length - 1)\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpdjuo2blb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpdjuo2blb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpdjuo2blb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpdjuo2blb.scala:15)\n\tat Problem$.main(tmpdjuo2blb.scala:19)\n\tat Problem.main(tmpdjuo2blb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var sublist = List[Long]()\n            for (j <- i until arr.length) {\n                sublist = sublist :+ arr(j)\n                if (sublist.length % 2 == 1) {\n                    sum += sublist.sum\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var j = i\n            while (j < arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n                j += 1\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val len = j - i + 1\n                if (len % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val len = j - i + 1\n                if (len % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 != 0) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpume04g5r.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpume04g5r.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpume04g5r.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpume04g5r.scala:15)\n\tat Problem$.main(tmpume04g5r.scala:19)\n\tat Problem.main(tmpume04g5r.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        arr.foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ypn9bmc.scala:9)\n\tat Problem.main(tmp5ypn9bmc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val len = j - i + 1\n                if (len % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i to arr.length - 1) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmps963vc4k.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmps963vc4k.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmps963vc4k.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmps963vc4k.scala:15)\n\tat Problem$.main(tmps963vc4k.scala:19)\n\tat Problem.main(tmps963vc4k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var j = i\n            while (j < arr.length) {\n                if ((j - i + 1) % 2 == 1) sum += arr.slice(i, j + 1).sum\n                j += 1\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i to arr.length - 1) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var temp = 0L\n            for (j <- i to arr.length - 1) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var subSum = 0L\n            for (j <- i to arr.length - 1) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var sublist = arr.slice(i, arr.length)\n            while (sublist.length > 0) {\n                if (sublist.length % 2 == 1) sum += sublist.sum\n                sublist = sublist.slice(0, sublist.length - 1)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var temp = 0L\n            for (j <- i to arr.length - 1) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum = sum + arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 != 0) sum += subListSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = 0L\n            for (j <- i until arr.length) {\n                temp += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += temp\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subListSum = 0L\n            for (j <- i until arr.length) {\n                subListSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subListSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i to arr.length - 1) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmp2nrmr04u.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmp2nrmr04u.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmp2nrmr04u.scala:15)\n\tat Problem$.main(tmp2nrmr04u.scala:19)\n\tat Problem.main(tmp2nrmr04u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var j = i\n            while (j < arr.length) {\n                if ((j - i + 1) % 2 != 0) sum += arr.slice(i, j + 1).sum\n                j += 1\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmph1v87b36.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmph1v87b36.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmph1v87b36.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmph1v87b36.scala:15)\n\tat Problem$.main(tmph1v87b36.scala:19)\n\tat Problem.main(tmph1v87b36.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if ((j - i + 1) % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpiep132pb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpiep132pb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpiep132pb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpiep132pb.scala:15)\n\tat Problem$.main(tmpiep132pb.scala:19)\n\tat Problem.main(tmpiep132pb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpiep132pb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpiep132pb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpiep132pb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpiep132pb.scala:15)\n\tat Problem$.main(tmpiep132pb.scala:19)\n\tat Problem.main(tmpiep132pb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var subSum = 0L\n            for (j <- i until arr.length) {\n                subSum += arr(j)\n                if (j - i + 1 % 2 == 1) sum += subSum\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6xqzwujz.scala:17)\n\tat Problem.main(tmp6xqzwujz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        arr.foldLeft(0L)((acc, x) => acc + x) * arr.length\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprrxv2fac.scala:9)\n\tat Problem.main(tmprrxv2fac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        arr.foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ypn9bmc.scala:9)\n\tat Problem.main(tmp5ypn9bmc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 != 0) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpiep132pb.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpiep132pb.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpiep132pb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpiep132pb.scala:15)\n\tat Problem$.main(tmpiep132pb.scala:19)\n\tat Problem.main(tmpiep132pb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length) {\n            for (j <- i to arr.length) {\n                if ((j - i) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1$$anonfun$1(tmpoyjl4ydz.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum$$anonfun$1(tmpoyjl4ydz.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.oddLengthSum(tmpoyjl4ydz.scala:15)\n\tat Problem$.main(tmpoyjl4ydz.scala:19)\n\tat Problem.main(tmpoyjl4ydz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var sublist = List[Long]()\n            for (j <- i to arr.length - 1) {\n                sublist = sublist :+ arr(j)\n                if (sublist.length % 2 != 0) sum += sublist.sum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if ((j - i + 1) % 2 == 1) {\n                    for (k <- i to j) {\n                        sum += arr(k)\n                    }\n                }\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n",
      "timestamp": 1666122476,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}