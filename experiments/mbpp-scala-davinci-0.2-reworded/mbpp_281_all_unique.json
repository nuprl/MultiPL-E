{
  "name": "mbpp_281_all_unique",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if the elements of a given list are unique or not.\n    def allUnique(test_list : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var unique = true\n        var test_set = Set[Long]()\n        for (i <- test_list) {\n            if (test_set.contains(i)) {\n                unique = false\n            }\n            else {\n                test_set += i\n            }\n        }\n        return unique",
    "        val test_set = Set[Long]()\n        for (i <- test_list) {\n            if (test_set.contains(i)) return false\n            test_set += i\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        test_list.distinct.length == test_list.length",
    "        val unique_set = Set[Long]()\n        for (element <- test_list) {\n            if (unique_set.contains(element)) {\n                return false\n            }\n            unique_set += element\n        }\n        return true",
    "        var unique = true\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    unique = false\n                }\n            }\n        }\n        return unique",
    "        val set = new HashSet[Long]()\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var unique_list = new ListBuffer[Long]()\n        for (i <- test_list) {\n            if (unique_list.contains(i)) return false\n            else unique_list += i\n        }\n        return true",
    "        test_list.distinct.length == test_list.length",
    "        val unique_list = test_list.distinct\n        return test_list.length == unique_list.length",
    "        var unique_set = Set[Long]()\n        for (i <- test_list) {\n            if (unique_set.contains(i)) return false\n            unique_set += i\n        }\n        return true",
    "        // Write your code here\n        test_list.distinct.length == test_list.length",
    "        val map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                return false\n            }\n            map += (i -> 1)\n        }\n        return true",
    "        val unique_set = Set[Long]()\n        for (x <- test_list) {\n            if (unique_set.contains(x)) {\n                return false\n            }\n            unique_set += x\n        }\n        return true",
    "        val unique_set = new HashSet[Long]\n        for (i <- test_list) {\n            if (unique_set.contains(i)) return false\n            unique_set += i\n        }\n        return true",
    "        val test_set = Set() ++ test_list\n        return test_list.length == test_set.size",
    "        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true",
    "        val set = Set[Long]()\n        for (x <- test_list) {\n            if (set.contains(x)) return false\n            set += x\n        }\n        return true",
    "        val test_set = Set() ++ test_list\n        return test_list.length == test_set.size",
    "        if (test_list.length == 0) return true\n        val set = new HashSet[Long]\n        for (i <- test_list) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        return true"
  ]
}