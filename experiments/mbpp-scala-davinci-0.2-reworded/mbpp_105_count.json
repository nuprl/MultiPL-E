{
  "name": "mbpp_105_count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count true booleans in the given list.\n    def count(lst : List[Boolean]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(count((List[Boolean](true.toBoolean, false.toBoolean, true.toBoolean))) == (2l));\n    assert(count((List[Boolean](false.toBoolean, false.toBoolean))) == (0l));\n    assert(count((List[Boolean](true.toBoolean, true.toBoolean, true.toBoolean))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        lst.filter(x => x == true).size",
    "        // TODO: implement this function\n        0",
    "        lst.filter(x => x).length",
    "        lst.count(x => x)",
    "        // TODO: implement this function\n        0",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).size",
    "        var count = 0\n        for (i <- lst) {\n            if (i) count += 1\n        }\n        return count",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x).size",
    "        // Your code here\n        0",
    "        lst.count(x => x)",
    "        lst.filter(x => x == true).size",
    "        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        // Write your code here\n        lst.filter(x => x == true).size",
    "        // TODO: Implement this function.\n        0",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0L)((x, y) => if (y) x + 1 else x)",
    "        // your code here\n        0",
    "        lst.filter(x => x == true).size",
    "        lst.count(x => x)",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x == true).size",
    "        // Your code here\n        lst.filter(x => x == true).size",
    "        // Write your code here\n        return 0",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        return lst.filter(x => x).length",
    "        lst.foldLeft(0L)((acc, x) => if (x) acc + 1 else acc)",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x == true).size",
    "        // Write your code here\n        lst.count(x => x == true)",
    "        // Your code here\n        lst.count(x => x == true)",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0L)((a, b) => if (b) a + 1 else a)",
    "        // Your code here.\n        return 0",
    "        lst.filter(x => x).length",
    "        return lst.filter(x => x).length",
    "        // TODO: Implement this function.\n        0",
    "        lst.filter(x => x).length",
    "        // Write your code here.\n        return 0",
    "        lst.filter(x => x).length",
    "        // your code here\n        0",
    "        lst.count(x => x)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.count(x => x)",
    "        lst.count(x => x)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x == true).size",
    "        // Write your code here\n        lst.filter(x => x).length",
    "        // Write your code here\n        lst.count(x => x)",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x).size",
    "        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x).length",
    "        // TODO: Implement this method.\n        return 0",
    "        lst.filter(x => x).size",
    "        lst.count(x => x)",
    "        lst.count(x => x)",
    "        // Write your code here\n        lst.count(x => x)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0L)((acc, x) => if (x) acc + 1 else acc)",
    "        lst.filter(x => x == true).length",
    "        // TODO: implement this function\n        return 0",
    "        // Your code here\n        0",
    "        // your code here\n        0",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        // Write your code here\n        0",
    "        lst.foldLeft(0)((x, y) => if (y) x + 1 else x)",
    "        // TODO: implement this function\n        0",
    "        lst.filter(x => x == true).length",
    "        // Write your code here\n        return 0;",
    "        lst.filter(x => x).size",
    "        // Your code here\n        return 0",
    "        lst.count(x => x)",
    "        lst.filter(x => x == true).size",
    "        // Your code here\n        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        lst.count(x => x == true)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        // Your code here\n        0",
    "        lst.foldLeft(0)((a, b) => if (b) a + 1 else a)",
    "        lst.filter(x => x).length",
    "        // TODO: implement this function.\n        0",
    "        // Fill in the code here.\n        lst.filter(_ == true).size",
    "        // TODO: implement this function\n        0",
    "        lst.filter(x => x).length",
    "        // Your code here\n        lst.filter(x => x == true).length",
    "        lst.filter(x => x).length",
    "        // Your code here.\n        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).size",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        lst.count(x => x)",
    "        lst.count(x => x)",
    "        lst.filter(x => x == true).length",
    "        lst.count(x => x)",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x == true).size",
    "        // TODO: Implement this method.\n        0",
    "        // TODO: Implement this function.\n        0",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x == true).length",
    "        lst.filter(x => x).size",
    "        // Fill in the code here.\n        lst.count(x => x)",
    "        // Write your code here\n        return 0",
    "        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        // Your code here.\n        0",
    "        // Your code here\n        0",
    "        // TODO: Implement this function.\n        0",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        // TODO: Implement this function.\n        0",
    "        return 0",
    "        // TODO: Implement this function.\n        0",
    "        // Write your code here\n        lst.count(x => x)",
    "        lst.foldLeft(0L)((acc, x) => if (x) acc + 1 else acc)",
    "        // Your code here\n        0",
    "        // Fill in the code here.\n        lst.count(x => x)",
    "        // your code here\n        0",
    "        lst.foldLeft(0L)((x, y) => if (y) x + 1 else x)",
    "        // Write your code here\n        lst.count(x => x)",
    "        // Your code here.\n        return 0",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0L)((a, b) => if (b) a + 1 else a)",
    "        lst.foldLeft(0)((x, y) => if (y) x + 1 else x)",
    "        // Your code here\n        lst.filter(x => x).size",
    "        // Your code here\n        lst.count(x => x)",
    "        // Your code here\n        lst.count(x => x == true)",
    "        // TODO: Implement this function.\n        0",
    "        lst.filter(x => x == true).size",
    "        lst.filter(x => x == true).size",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        return lst.filter(x => x).size",
    "        // Your code here\n        0",
    "        lst.count(x => x == true)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).size",
    "        // your code here\n        0",
    "        lst.foldLeft(0)((x, y) => if (y) x + 1 else x)",
    "        // Write your code here\n        lst.count(x => x)",
    "        lst.filter(x => x).length",
    "        // Your code here\n        lst.filter(x => x == true).length",
    "        // your code here\n        lst.count(x => x == true)",
    "        lst.filter(x => x).length",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0L)((x, y) => if (y) x + 1 else x)",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x == true).size",
    "        // TODO: Implement this function.\n        lst.count(_ == true)",
    "        // Your code here\n        0",
    "        // Write your code here.\n        0",
    "        lst.filter(x => x).length",
    "        lst.foldLeft(0)((x, y) => if (y) x + 1 else x)",
    "        // Your code here\n        0",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        // Your code here\n        lst.filter(x => x).length",
    "        // your code here\n        0",
    "        lst.filter(x => x).size",
    "        lst.filter(x => x).size",
    "        lst.count(x => x)",
    "        lst.filter(x => x).size",
    "        var count = 0\n        for (i <- lst) {\n            if (i) count += 1\n        }\n        count",
    "        lst.foldLeft(0)((acc, x) => if (x) acc + 1 else acc)",
    "        lst.filter(x => x).size",
    "        lst.foldLeft(0)((a, b) => if (b) a + 1 else a)",
    "        // TODO: Implement this function.\n        0",
    "        return lst.filter(x => x).length",
    "        // Write your code here\n        lst.count(x => x)",
    "        // Your code here\n        0"
  ]
}