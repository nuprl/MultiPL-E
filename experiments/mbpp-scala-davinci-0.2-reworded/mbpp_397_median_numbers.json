{
  "name": "mbpp_397_median_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val arr = Array(a, b, c)\n        val sorted = arr.sorted\n        if (arr.length % 2 == 0) {\n            (sorted(arr.length / 2) + sorted(arr.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(arr.length / 2).toFloat\n        }",
    "        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) {\n            val x = list(list.length / 2)\n            val y = list(list.length / 2 - 1)\n            (x + y).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat"
  ]
}