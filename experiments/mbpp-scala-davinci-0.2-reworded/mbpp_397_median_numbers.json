{
  "name": "mbpp_397_median_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val arr = Array(a, b, c)\n        val sorted = arr.sorted\n        if (arr.length % 2 == 0) {\n            (sorted(arr.length / 2) + sorted(arr.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(arr.length / 2).toFloat\n        }",
    "        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        var list = List(a, b, c)\n        list = list.sortWith(_ < _)\n        if (list.length % 2 == 0) {\n            val x = list(list.length / 2)\n            val y = list(list.length / 2 - 1)\n            (x + y).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2).toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val l = List(a, b, c)\n        val sortedList = l.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        if (a > b) {\n            if (b > c) {\n                b\n            } else if (a > c) {\n                c\n            } else {\n                a\n            }\n        } else {\n            if (a > c) {\n                a\n            } else if (b > c) {\n                c\n            } else {\n                b\n            }\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.size % 2 == 0) {\n            (sortedList(sortedList.size / 2) + sortedList(sortedList.size / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.size / 2).toFloat\n        }",
    "        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        (sorted(0) + sorted(1)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val arr = Array(a, b, c)\n        val sorted = arr.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) {\n            (arr(arr.length / 2) + arr(arr.length / 2 - 1)).toFloat / 2\n        } else {\n            arr(arr.length / 2).toFloat\n        }",
    "        val x = Array(a, b, c)\n        x.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) (arr(arr.length / 2) + arr(arr.length / 2 - 1)) / 2.0f\n        else arr(arr.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid - 1) + sortedList(mid)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)(1)",
    "        var arr = Array(a, b, c)\n        arr = arr.sortWith(_ < _)\n        return arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n        (max + min + mid) / 3.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        if (a > b) {\n            if (b > c) b else if (a > c) c else a\n        } else {\n            if (a > c) a else if (b > c) c else b\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        list.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f",
    "        val x = List(a, b, c)\n        val y = x.sorted\n        val z = y(1)\n        z.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        } else {\n            list(list.length / 2).toFloat\n        }",
    "        if (a > b) {\n            if (b > c) {\n                b.toFloat\n            } else if (a > c) {\n                c.toFloat\n            } else {\n                a.toFloat\n            }\n        } else {\n            if (a > c) {\n                a.toFloat\n            } else if (b > c) {\n                c.toFloat\n            } else {\n                b.toFloat\n            }\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = (sortedList(1) + sortedList(2)) / 2.0\n        median.toFloat",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val numbers = List(a, b, c).sorted\n        numbers(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val medianIndex = sortedList.length / 2\n        if (sortedList.length % 2 == 0) {\n            (sortedList(medianIndex - 1) + sortedList(medianIndex)) / 2.0f\n        } else {\n            sortedList(medianIndex)\n        }",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        if (a > b) {\n            if (b > c) b\n            else if (a > c) c\n            else a\n        } else {\n            if (a > c) a\n            else if (b > c) c\n            else b\n        }",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) (arr(arr.length / 2) + arr(arr.length / 2 - 1)) / 2.0f\n        else arr(arr.length / 2)",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var arr = Array(a, b, c)\n        arr = arr.sortWith(_ < _)\n        if (arr.length % 2 == 0) {\n            val mid = arr.length / 2\n            (arr(mid - 1) + arr(mid)) / 2.0f\n        } else {\n            arr(arr.length / 2)\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) {\n            (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        } else {\n            list(list.length / 2)\n        }",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val xs = List(a, b, c).sorted\n        if (xs.length % 2 == 0) {\n            (xs(xs.length / 2) + xs(xs.length / 2 - 1)).toFloat / 2\n        } else {\n            xs(xs.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        list.sorted.apply(1)",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        var arr = Array(a, b, c)\n        arr = arr.sorted\n        return arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        }\n        else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val numbers = Array(a, b, c)\n        numbers.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return (list(1) + list(2)) / 2.0f",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        } else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val sorted = List(a, b, c).sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val mid = sorted(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        val median = (sortedList(0) + sortedList(2)) / 2.0f\n        if (middle == median) middle else median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)",
    "        if (a > b) {\n            if (b > c) b.toFloat\n            else if (a > c) c.toFloat\n            else a.toFloat\n        } else {\n            if (a > c) a.toFloat\n            else if (b > c) c.toFloat\n            else b.toFloat\n        }",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)",
    "        val l = List(a, b, c)\n        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sorted = list.sorted\n        val middle = sorted(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val numbers = List(a, b, c)\n        val sortedNumbers = numbers.sorted\n        val middleNumber = sortedNumbers(1)\n        middleNumber.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val l = List(a, b, c)\n        l.sorted.apply(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)",
    "        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val m = Array(a, b, c)\n        m.sortWith(_ < _)\n        m(1)",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        return middle",
    "        val x = Array(a, b, c)\n        x.sortWith(_ < _)\n        if (x.length % 2 == 0) (x(x.length / 2) + x(x.length / 2 - 1)) / 2.0f else x(x.length / 2)",
    "        val list = List(a, b, c).sorted\n        (list(0) + list(1)) / 2.0f",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)).toFloat / 2\n        else list(list.length / 2).toFloat",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val sorted = List(a, b, c).sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val mid = sortedList(1)\n        mid.toFloat",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        (sortedList(1) + sortedList(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val arr = Array(a, b, c)\n        arr.sorted.apply(1)",
    "        val l = List(a, b, c).sorted\n        (l(1) + l(2)) / 2.0f",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)",
    "        val x = Array(a, b, c)\n        x.sortWith(_ < _)\n        x(1)",
    "        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val index = sortedList.length / 2\n            (sortedList(index - 1) + sortedList(index)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        sortedList(1)",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            (sortedList(sortedList.length / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        } else {\n            sortedList(sortedList.length / 2).toFloat\n        }",
    "        val l = List(a, b, c)\n        val sorted = l.sorted\n        (sorted(1) + sorted(2)) / 2.0f",
    "        var list = List(a, b, c)\n        list = list.sorted\n        return list(1)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        var list = List(a, b, c)\n        list = list.sorted\n        if (list.size % 2 == 0) {\n            return (list(list.size / 2) + list(list.size / 2 - 1)).toFloat / 2\n        } else {\n            return list(list.size / 2).toFloat\n        }",
    "        if (a > b) {\n            if (b > c) (b + min(a, c)) / 2.0f\n            else if (a > c) (a + b) / 2.0f\n            else (a + c) / 2.0f\n        } else {\n            if (a > c) (a + min(b, c)) / 2.0f\n            else if (b > c) (b + a) / 2.0f\n            else (b + c) / 2.0f\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid) + sortedList(mid - 1)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c).sorted\n        (list(1) + list(2)) / 2.0f",
    "        val list = List(a, b, c).sorted\n        if (list.length % 2 == 0) (list(list.length / 2) + list(list.length / 2 - 1)) / 2.0f\n        else list(list.length / 2)",
    "        val list = List(a, b, c).sorted\n        if (list.size % 2 == 0) (list(list.size / 2) + list(list.size / 2 - 1)) / 2.0f\n        else list(list.size / 2)",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val middle = sortedList(1)\n        middle.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        val median = sortedList(1)\n        median.toFloat",
    "        val list = List(a, b, c)\n        val sortedList = list.sorted\n        if (sortedList.length % 2 == 0) {\n            val mid = sortedList.length / 2\n            (sortedList(mid - 1) + sortedList(mid)) / 2.0f\n        } else {\n            sortedList(sortedList.length / 2)\n        }"
  ]
}