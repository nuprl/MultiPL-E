{
  "name": "mbpp_479_first_Digit",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first digit of a given number.\n    def firstDigit(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstDigit((123l)) == (1l));\n    assert(firstDigit((456l)) == (4l));\n    assert(firstDigit((12l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n < 10) n\n        else firstDigit(n / 10)",
    "        var m = n\n        while (m >= 10) m /= 10\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var num = n\n        while (num >= 10) {\n            num /= 10\n        }\n        num",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var x = n\n        while (x >= 10) {\n            x /= 10\n        }\n        return x",
    "        var m = n\n        while (m > 9) {\n            m /= 10\n        }\n        return m",
    "        var num = n\n        while (num >= 10) {\n            num /= 10\n        }\n        return num",
    "        var m = n\n        while (m >= 10) {\n            m = m / 10\n        }\n        m",
    "        if (n < 10) return n\n        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var x = n\n        while (x >= 10) {\n            x /= 10\n        }\n        return x",
    "        var m = n\n        while (m >= 10) {\n            m /= 10\n        }\n        return m",
    "        var x = n\n        while (x >= 10) {\n            x /= 10\n        }\n        return x"
  ]
}